"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/already";
exports.ids = ["vendor-chunks/already"];
exports.modules = {

/***/ "(rsc)/./node_modules/already/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/already/dist/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deferSet = exports.OrderedAsynchrony = exports.funnel = exports.wrapFunction = exports.rethrow = exports.specific = exports.deferInspectable = exports.inspect = exports.reflect = exports.defer = exports.retry = exports.once = exports.some = exports.eachImpl = exports.each = exports.reduce = exports.map = exports.filter = exports.props = exports.tap = exports.delayChain = exports.delay = exports.concurrent = void 0;\nexports[\"default\"] = {\n    defer,\n    deferSet,\n    delay,\n    delayChain,\n    each,\n    filter,\n    funnel,\n    inspect,\n    map,\n    once,\n    props,\n    reduce,\n    rethrow,\n    retry,\n    some,\n    specific,\n    tap,\n    wrapFunction,\n};\nfunction toReadonlyArray(arr) {\n    /* istanbul ignore else */\n    if (typeof arr.map === \"function\")\n        return arr;\n    else\n        return Array.from(arr);\n}\nfunction concurrent(size, fn) {\n    const queue = makeQueue(size);\n    if (size < 1)\n        throw new RangeError(`Size must be at least 1`);\n    if (!fn)\n        return (cb, ...args) => queue.enqueue(() => cb(...args));\n    else\n        return (...args) => queue.enqueue(() => fn(...args));\n}\nexports.concurrent = concurrent;\nfunction makeQueue(size) {\n    const queue = {\n        size,\n        count: 0,\n        queue: [],\n        process: () => {\n            if (queue.queue.length) {\n                const first = queue.queue.shift();\n                const { cb, deferred } = first;\n                queue.runOne(cb).then(deferred.resolve, deferred.reject);\n            }\n        },\n        runOne: (cb) => {\n            ++queue.count;\n            return (async () => cb())()\n                .finally(() => {\n                --queue.count;\n                queue.process();\n            });\n        },\n        enqueue: async (cb) => {\n            if (queue.count >= queue.size) {\n                const deferred = defer();\n                queue.queue.push({ cb, deferred });\n                return deferred.promise;\n            }\n            return queue.runOne(cb);\n        }\n    };\n    return queue;\n}\nfunction delay(milliseconds, t) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(t), milliseconds);\n    });\n}\nexports.delay = delay;\nfunction delayChain(milliseconds) {\n    return tap(() => delay(milliseconds));\n}\nexports.delayChain = delayChain;\nfunction tap(fn) {\n    return async (t) => {\n        await fn(t);\n        return t;\n    };\n}\nexports.tap = tap;\nfunction props(obj) {\n    const ret = {};\n    const awaiters = [];\n    for (const prop of Object.keys(obj))\n        awaiters.push(Promise.resolve(obj[prop])\n            .then(val => { ret[prop] = val; }));\n    return Promise.all(awaiters).then(() => ret);\n}\nexports.props = props;\nconst defaultFilterMapOptions = { concurrency: Infinity };\nfunction filter(arr, opts, filterFn) {\n    if (Array.isArray(arr)) {\n        if (typeof opts === \"function\") {\n            filterFn = opts;\n            opts = defaultFilterMapOptions;\n        }\n        const intermediate = filter(opts, filterFn);\n        return intermediate(arr);\n    }\n    filterFn = typeof arr === \"function\" ? arr : opts;\n    opts =\n        typeof arr === \"function\"\n            ? defaultFilterMapOptions\n            : arr;\n    const wrappedFilterFn = (val, index, arr) => Promise.resolve(filterFn(val, index, arr))\n        .then(ok => ({ ok, val }));\n    return (t) => {\n        return map(opts, wrappedFilterFn)(t)\n            .then(values => values\n            .filter(({ ok }) => ok)\n            .map(({ val }) => val));\n    };\n}\nexports.filter = filter;\nfunction map(arr, opts, mapFn) {\n    if (Array.isArray(arr)) {\n        if (typeof opts === \"function\") {\n            mapFn = opts;\n            opts = defaultFilterMapOptions;\n        }\n        return map(opts, mapFn)(arr);\n    }\n    mapFn = typeof arr === \"function\" ? arr : opts;\n    opts =\n        typeof arr === \"function\"\n            ? defaultFilterMapOptions\n            : arr;\n    const { concurrency = Infinity } = opts;\n    const promiseMapFn = (t, index, arr) => Promise.resolve(mapFn(t, index, arr));\n    const concurrently = concurrent(concurrency);\n    return (t) => {\n        return Promise.resolve(t)\n            .then((values) => toReadonlyArray(values).map((val, index, arr) => (() => Promise.resolve(val))()\n            .then((val) => concurrently(promiseMapFn, val, index, arr))))\n            .then(values => Promise.all(values));\n    };\n}\nexports.map = map;\nfunction reduce(input, reducer, initialValue) {\n    if (typeof input === \"function\") {\n        initialValue = reducer;\n        const _reducer = input;\n        return async (input) => {\n            return reduceImpl(input, _reducer, initialValue);\n        };\n    }\n    return reduceImpl(input, reducer, initialValue);\n}\nexports.reduce = reduce;\nasync function reduceImpl(input, reducer, initialValue) {\n    const _input = Array.from(await input);\n    const _initialValue = await initialValue;\n    if (_input.length === 0)\n        return _initialValue;\n    const usingInitialValue = typeof _initialValue !== \"undefined\";\n    const length = _input.length;\n    let index = usingInitialValue ? 0 : 1;\n    let accumulator = usingInitialValue\n        ? _initialValue\n        // This cast should be safe if the interface is respected\n        : await _input.shift();\n    while (_input.length > 0)\n        accumulator = await reducer(accumulator, await _input.shift(), index++, length);\n    return accumulator;\n}\nfunction each(arr, eachFn) {\n    if (Array.isArray(arr))\n        return eachImpl(eachFn)(arr);\n    return eachImpl(arr);\n}\nexports.each = each;\nfunction eachImpl(eachFn) {\n    return async (arr) => {\n        const length = arr.length;\n        async function iterator(t, index) {\n            await eachFn(t, index, length);\n            return t;\n        }\n        return map(arr, { concurrency: 1 }, iterator);\n    };\n}\nexports.eachImpl = eachImpl;\nfunction some(list, fn) {\n    if (typeof list === \"function\") {\n        fn = list;\n        return (list) => someImpl(list, fn);\n    }\n    return someImpl(list, fn);\n}\nexports.some = some;\nasync function someImpl(list, fn) {\n    const _list = toReadonlyArray(await list);\n    for (const val of _list) {\n        const ret = await fn(await val);\n        if (ret)\n            return ret;\n    }\n    return false;\n}\nfunction once(fn) {\n    if (fn) {\n        const _once = onceDynamic();\n        return ((t) => _once(fn, t));\n    }\n    else\n        return onceDynamic();\n}\nexports.once = once;\nfunction onceDynamic() {\n    const state = new WeakMap();\n    const ensureState = (fn) => {\n        if (!state.has(fn))\n            state.set(fn, { hasRun: false });\n    };\n    return ((fn, t) => {\n        ensureState(fn);\n        const stateObject = state.get(fn);\n        if (stateObject.hasRun) {\n            if (stateObject.deferred)\n                return stateObject.deferred.promise;\n            return stateObject.returnValue;\n        }\n        stateObject.hasRun = true;\n        const ret = fn(t);\n        const pret = ret;\n        if (pret !== undefined && pret && typeof pret.then === \"function\") {\n            stateObject.deferred = defer(void 0);\n            return pret\n                .then(stateObject.deferred.resolve, rethrow(stateObject.deferred.reject))\n                .then(() => stateObject.deferred.promise);\n        }\n        stateObject.returnValue = ret;\n        return ret;\n    });\n}\nfunction retry(times, fn, retryable = () => true) {\n    const retryAsync = (promise) => promise\n        .catch((err) => {\n        if (--times < 0 || !retryable(err))\n            throw err;\n        return retryAsync(fn());\n    });\n    const retrySync = (_err) => {\n        while (--times >= 0) {\n            try {\n                return fn();\n            }\n            catch (err) {\n                if (!retryable(err))\n                    throw err;\n                _err = err;\n            }\n        }\n        throw _err;\n    };\n    try {\n        const ret = fn();\n        if (ret &&\n            typeof ret === \"object\" &&\n            typeof ret.then === \"function\") {\n            return retryAsync(ret);\n        }\n        return ret;\n    }\n    catch (err) {\n        if (!retryable(err))\n            throw err;\n        return retrySync(err);\n    }\n}\nexports.retry = retry;\nfunction defer() {\n    var _a;\n    const deferred = {};\n    deferred.promise = new Promise((resolve, reject) => {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n    /* istanbul ignore next */\n    if (((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.JEST_WORKER_ID) !== undefined)\n        try {\n            // Jest has decided for many versions to break async catching,\n            // so this is needed for unit tests not to break unnecessarily.\n            deferred.promise.catch(() => { });\n        }\n        catch (_err) { }\n    return deferred;\n}\nexports.defer = defer;\nfunction reflect(promise) {\n    const inspection = inspect(promise);\n    function handleResolution(value) {\n        return {\n            isRejected: false,\n            isResolved: true,\n            value,\n        };\n    }\n    function handleRejection(error) {\n        return {\n            error,\n            isRejected: true,\n            isResolved: false,\n        };\n    }\n    return inspection.promise\n        .then(handleResolution, handleRejection);\n}\nexports.reflect = reflect;\nfunction inspect(promise) {\n    const inspectable = {\n        isPending: true,\n        isRejected: false,\n        isResolved: false,\n        promise: void 0,\n    };\n    inspectable.promise = promise.then(value => {\n        inspectable.isResolved = true;\n        inspectable.isPending = false;\n        return value;\n    })\n        .catch(err => {\n        inspectable.isRejected = true;\n        inspectable.isPending = false;\n        return Promise.reject(err);\n    });\n    return inspectable;\n}\nexports.inspect = inspect;\nfunction deferInspectable() {\n    const deferred = defer();\n    const ret = {\n        isPending: true,\n        isRejected: false,\n        isResolved: false,\n        promise: deferred.promise,\n        resolve(t) {\n            if (!ret.isPending)\n                return;\n            deferred.resolve(t);\n            ret.isPending = false;\n            ret.isRejected = false;\n            ret.isResolved = true;\n        },\n        reject(err) {\n            if (!ret.isPending)\n                return;\n            deferred.reject(err);\n            ret.isPending = false;\n            ret.isRejected = true;\n            ret.isResolved = false;\n        },\n    };\n    return ret;\n}\nexports.deferInspectable = deferInspectable;\n// This logic is taken from Bluebird\nfunction catchFilter(filters, err) {\n    return (Array.isArray(filters) ? filters : [filters])\n        .some((filter) => {\n        if (filter == null)\n            return false;\n        if (filter === Error ||\n            filter.prototype instanceof Error) {\n            if (err instanceof filter)\n                return true;\n        }\n        else if (typeof filter === \"function\") {\n            const filterFn = filter;\n            // It is \"ok\" for this to throw. It'll be thrown back to the catch\n            // handler, and the promise chain will contain this error.\n            return filterFn(err);\n        }\n        else if (typeof filter === \"object\") {\n            const obj = filter;\n            for (const key of Object.keys(obj))\n                if (obj[key] !== err[key])\n                    return false;\n            return true;\n        }\n        return false;\n    });\n}\nfunction specific(filters, handler) {\n    return (err) => {\n        if (!catchFilter(filters, err))\n            throw err;\n        return handler(err);\n    };\n}\nexports.specific = specific;\nfunction rethrow(fn) {\n    return async (err) => {\n        await fn(err);\n        throw err;\n    };\n}\nexports.rethrow = rethrow;\nfunction wrapFunction(wrap) {\n    // tslint:disable-next-line\n    return function (t, cb) {\n        if (arguments.length === 1) {\n            if (wrap.length > 0)\n                throw new EvalError(\"Invalid invocation, function requires 2 arguments\");\n            cb = t;\n            t = void 0;\n        }\n        const anyCleanup = wrap(t);\n        const callCleanup = (cleanup) => {\n            if (typeof cleanup === \"function\")\n                return cleanup();\n            else if (cleanup != null)\n                // Allow 'before' to just return null/undefined, but non-empty\n                // value would've been silently ignored.\n                throw new EvalError(\"Invalid return value in 'before' handler\");\n        };\n        if (anyCleanup &&\n            typeof anyCleanup.then === \"function\") {\n            let doCleanup;\n            return anyCleanup\n                .then(async (cleanup) => {\n                doCleanup = () => callCleanup(cleanup);\n                return cb();\n            })\n                .finally(() => {\n                if (doCleanup)\n                    return doCleanup();\n            });\n        }\n        else {\n            const cleanup = anyCleanup;\n            let cbRet;\n            try {\n                cbRet = cb();\n            }\n            catch (err) {\n                const cleanupRet = callCleanup(cleanup);\n                if (cleanupRet &&\n                    typeof cleanupRet.then === \"function\") {\n                    return cleanupRet\n                        .then(() => { throw err; });\n                }\n                else {\n                    throw err;\n                }\n            }\n            if (cbRet && typeof cbRet.then === \"function\") {\n                return cbRet\n                    .finally(() => callCleanup(cleanup));\n            }\n            else {\n                const cleanupRet = callCleanup(cleanup);\n                if (cleanupRet &&\n                    typeof cleanupRet.then === \"function\") {\n                    return cleanupRet\n                        .then(() => cbRet);\n                }\n                else {\n                    return cbRet;\n                }\n            }\n        }\n    };\n}\nexports.wrapFunction = wrapFunction;\nfunction funnel(opts = {}) {\n    const { onEmpty, concurrency = 1 } = (opts || {});\n    let FunnelState;\n    (function (FunnelState) {\n        FunnelState[FunnelState[\"DEFAULT\"] = 0] = \"DEFAULT\";\n        FunnelState[FunnelState[\"SHOULD_RETRY\"] = 1] = \"SHOULD_RETRY\";\n        FunnelState[FunnelState[\"WAITING\"] = 2] = \"WAITING\";\n        FunnelState[FunnelState[\"COMPLETED\"] = 3] = \"COMPLETED\";\n    })(FunnelState || (FunnelState = {}));\n    /**\n     * All ongoing tasks (functions) regardless of state they are in.\n     * If they return/throw or shortcut, they get cleared from this map.\n     * The order is preserved for fifo fairness.\n     */\n    const tasks = new Map();\n    const countWaiting = () => {\n        return [...tasks.values()]\n            .filter(({ state }) => state === FunnelState.WAITING)\n            .length;\n    };\n    const countWorking = () => {\n        return [...tasks.values()]\n            .filter(({ state }) => state === FunnelState.SHOULD_RETRY)\n            .length;\n    };\n    const freeSlots = () => {\n        return Math.max(0, concurrency - countWorking());\n    };\n    const triggerWaiting = () => {\n        const amountToResume = freeSlots();\n        [...tasks.values()]\n            .filter(({ state }) => state === FunnelState.WAITING)\n            .slice(0, amountToResume)\n            .forEach(task => {\n            task.resume();\n        });\n    };\n    return (fn) => {\n        const sentry = {};\n        const store = {\n            state: FunnelState.DEFAULT,\n            counted: false,\n            resume: undefined,\n        };\n        tasks.set(sentry, store);\n        const shouldRetry = () => {\n            if (store.state === FunnelState.COMPLETED)\n                // shortcut before should/retry shortcuts through\n                return false;\n            const free = freeSlots();\n            const shouldContinue = free > 0;\n            if (store.state !== FunnelState.DEFAULT)\n                throw new Error(\"Invalid use of 'shouldRetry'\");\n            store.state = FunnelState.SHOULD_RETRY;\n            store.counted = true;\n            return !shouldContinue;\n        };\n        const retry = () => {\n            if (store.state !== FunnelState.SHOULD_RETRY)\n                throw new Error(\"Invalid use of 'retry', \" +\n                    \"must only be called after 'shouldRetry'\");\n            store.state = FunnelState.WAITING;\n            const deferred = defer();\n            const resume = () => {\n                store.state = FunnelState.DEFAULT;\n                store.resume = undefined;\n                deferred.resolve(runner());\n            };\n            store.resume = resume;\n            return deferred.promise;\n        };\n        const shortcut = () => {\n            if (store.state === FunnelState.COMPLETED)\n                return;\n            store.state = FunnelState.COMPLETED;\n            tasks.delete(sentry);\n            if (countWaiting() === 0)\n                onEmpty === null || onEmpty === void 0 ? void 0 : onEmpty();\n            else\n                triggerWaiting();\n        };\n        const runner = () => {\n            return (async () => fn(shouldRetry, retry, shortcut))()\n                .finally(shortcut);\n        };\n        return runner();\n    };\n}\nexports.funnel = funnel;\nclass OrderedAsynchrony {\n    constructor() {\n        this.deferrals = [];\n    }\n    wait(waitForIndex, resolveIndex, rejectIndex) {\n        this.ensureDeferral([\n            ...([].concat(waitForIndex)),\n            ...(resolveIndex == null ? [] :\n                [].concat(resolveIndex)),\n            ...(rejectIndex == null ? [] :\n                [].concat(rejectIndex)),\n        ]);\n        return this.decorate(Promise.all([].concat(waitForIndex)\n            .map(index => this.deferrals[index].promise))\n            .then(() => Promise.all([\n            resolveIndex == null\n                ? void 0\n                : this.resolve(resolveIndex),\n            rejectIndex == null\n                ? void 0\n                : this.reject(rejectIndex),\n        ])\n            .then(() => { })));\n    }\n    resolve(index) {\n        this.ensureDeferral(index);\n        return this.decorate(delay(0).then(() => {\n            [].concat(index)\n                .forEach(index => {\n                this.deferrals[index].resolve();\n            });\n        }));\n    }\n    reject(index, error = new Error(\"OrderedAsynchrony rejection\")) {\n        this.ensureDeferral(index);\n        return this.decorate(delay(0).then(() => {\n            [].concat(index)\n                .forEach(index => {\n                this.deferrals[index].reject(error);\n            });\n        }));\n    }\n    ensureDeferral(index) {\n        const indices = []\n            .concat(index)\n            .sort((a, b) => b - a);\n        const highest = indices[0];\n        for (let i = this.deferrals.length; i <= highest; ++i)\n            this.deferrals.push(defer(void 0));\n        return this;\n    }\n    decorate(promise) {\n        // tslint:disable-next-line:variable-name\n        const This = {\n            decorate: this.decorate.bind(this),\n            deferrals: this.deferrals,\n            ensureDeferral: this.ensureDeferral.bind(this),\n            reject: this.reject.bind(this),\n            resolve: this.resolve.bind(this),\n            wait: this.wait.bind(this),\n        };\n        return Object.assign(promise, This);\n    }\n}\nexports.OrderedAsynchrony = OrderedAsynchrony;\nfunction deferSet() {\n    return new OrderedAsynchrony();\n}\nexports.deferSet = deferSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/already/dist/index.js\n");

/***/ })

};
;