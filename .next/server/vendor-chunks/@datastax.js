"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@datastax";
exports.ids = ["vendor-chunks/@datastax"];
exports.modules = {

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_DATA_API_PATH = exports.DEFAULT_DEVOPS_API_ENDPOINT = exports.DEFAULT_DEVOPS_API_AUTH_HEADER = exports.DEFAULT_DATA_API_AUTH_HEADER = exports.DEFAULT_TIMEOUT = exports.DEFAULT_NAMESPACE = exports.HttpMethods = exports.CLIENT_USER_AGENT = exports.RAGSTACK_REQUESTED_WITH = void 0;\nconst version_1 = __webpack_require__(/*! ../version */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/version.js\");\n/**\n * @internal\n */\nexports.RAGSTACK_REQUESTED_WITH = (() => {\n    try {\n        // Do not use require() here, it will break the build in some environments such as NextJS application\n        // if @datastax/ragstack-ai is not installed (which is perfectly fine).\n        const ragstack = eval(`require('@datastax/ragstack-ai')`);\n        const version = ragstack['RAGSTACK_VERSION'] || '?';\n        return `ragstack-ai-ts/${version}`;\n    }\n    catch (e) {\n        return '';\n    }\n})();\n/**\n * @internal\n */\nexports.CLIENT_USER_AGENT = version_1.LIB_NAME + '/' + version_1.LIB_VERSION;\n/**\n * @internal\n */\nexports.HttpMethods = {\n    Get: 'GET',\n    Post: 'POST',\n    Delete: 'DELETE',\n};\n/**\n * @internal\n */\nexports.DEFAULT_NAMESPACE = 'default_keyspace';\n/**\n * @internal\n */\nexports.DEFAULT_TIMEOUT = 30000;\n/**\n * @internal\n */\nexports.DEFAULT_DATA_API_AUTH_HEADER = 'Token';\n/**\n * @internal\n */\nexports.DEFAULT_DEVOPS_API_AUTH_HEADER = 'Authorization';\n/**\n * @internal\n */\nexports.DEFAULT_DEVOPS_API_ENDPOINT = 'https://api.astra.datastax.com/v2';\n/**\n * @internal\n */\nexports.DEFAULT_DATA_API_PATH = 'api/json/v1';\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLG1DQUFtQyxHQUFHLHNDQUFzQyxHQUFHLG9DQUFvQyxHQUFHLHVCQUF1QixHQUFHLHlCQUF5QixHQUFHLG1CQUFtQixHQUFHLHlCQUF5QixHQUFHLCtCQUErQjtBQUM3UixrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2FwaS9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREVGQVVMVF9EQVRBX0FQSV9QQVRIID0gZXhwb3J0cy5ERUZBVUxUX0RFVk9QU19BUElfRU5EUE9JTlQgPSBleHBvcnRzLkRFRkFVTFRfREVWT1BTX0FQSV9BVVRIX0hFQURFUiA9IGV4cG9ydHMuREVGQVVMVF9EQVRBX0FQSV9BVVRIX0hFQURFUiA9IGV4cG9ydHMuREVGQVVMVF9USU1FT1VUID0gZXhwb3J0cy5ERUZBVUxUX05BTUVTUEFDRSA9IGV4cG9ydHMuSHR0cE1ldGhvZHMgPSBleHBvcnRzLkNMSUVOVF9VU0VSX0FHRU5UID0gZXhwb3J0cy5SQUdTVEFDS19SRVFVRVNURURfV0lUSCA9IHZvaWQgMDtcbmNvbnN0IHZlcnNpb25fMSA9IHJlcXVpcmUoXCIuLi92ZXJzaW9uXCIpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0cy5SQUdTVEFDS19SRVFVRVNURURfV0lUSCA9ICgoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gRG8gbm90IHVzZSByZXF1aXJlKCkgaGVyZSwgaXQgd2lsbCBicmVhayB0aGUgYnVpbGQgaW4gc29tZSBlbnZpcm9ubWVudHMgc3VjaCBhcyBOZXh0SlMgYXBwbGljYXRpb25cbiAgICAgICAgLy8gaWYgQGRhdGFzdGF4L3JhZ3N0YWNrLWFpIGlzIG5vdCBpbnN0YWxsZWQgKHdoaWNoIGlzIHBlcmZlY3RseSBmaW5lKS5cbiAgICAgICAgY29uc3QgcmFnc3RhY2sgPSBldmFsKGByZXF1aXJlKCdAZGF0YXN0YXgvcmFnc3RhY2stYWknKWApO1xuICAgICAgICBjb25zdCB2ZXJzaW9uID0gcmFnc3RhY2tbJ1JBR1NUQUNLX1ZFUlNJT04nXSB8fCAnPyc7XG4gICAgICAgIHJldHVybiBgcmFnc3RhY2stYWktdHMvJHt2ZXJzaW9ufWA7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59KSgpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0cy5DTElFTlRfVVNFUl9BR0VOVCA9IHZlcnNpb25fMS5MSUJfTkFNRSArICcvJyArIHZlcnNpb25fMS5MSUJfVkVSU0lPTjtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydHMuSHR0cE1ldGhvZHMgPSB7XG4gICAgR2V0OiAnR0VUJyxcbiAgICBQb3N0OiAnUE9TVCcsXG4gICAgRGVsZXRlOiAnREVMRVRFJyxcbn07XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnRzLkRFRkFVTFRfTkFNRVNQQUNFID0gJ2RlZmF1bHRfa2V5c3BhY2UnO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0cy5ERUZBVUxUX1RJTUVPVVQgPSAzMDAwMDtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydHMuREVGQVVMVF9EQVRBX0FQSV9BVVRIX0hFQURFUiA9ICdUb2tlbic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnRzLkRFRkFVTFRfREVWT1BTX0FQSV9BVVRIX0hFQURFUiA9ICdBdXRob3JpemF0aW9uJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydHMuREVGQVVMVF9ERVZPUFNfQVBJX0VORFBPSU5UID0gJ2h0dHBzOi8vYXBpLmFzdHJhLmRhdGFzdGF4LmNvbS92Mic7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnRzLkRFRkFVTFRfREFUQV9BUElfUEFUSCA9ICdhcGkvanNvbi92MSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/data-api-http-client.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/data-api-http-client.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// noinspection ExceptionCaughtLocallyJS\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DataAPIHttpClient_props;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.reviver = exports.replacer = exports.DataAPIHttpClient = void 0;\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nconst data_api_1 = __webpack_require__(/*! ../data-api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js\");\nconst timeout_managers_1 = __webpack_require__(/*! ../api/timeout-managers */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js\");\nconst events_1 = __webpack_require__(/*! ../data-api/events */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/events.js\");\nconst errors_1 = __webpack_require__(/*! ../data-api/errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js\");\n/**\n * @internal\n */\nclass DataAPIHttpClient extends api_1.HttpClient {\n    constructor(props) {\n        super({\n            ...props,\n            mkAuthHeader: (token) => ({ [api_1.DEFAULT_DATA_API_AUTH_HEADER]: token }),\n        });\n        Object.defineProperty(this, \"collection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        _DataAPIHttpClient_props.set(this, void 0);\n        this.namespace = props.namespace;\n        __classPrivateFieldSet(this, _DataAPIHttpClient_props, props, \"f\");\n    }\n    withCollection(namespace, collection) {\n        const clone = new DataAPIHttpClient(__classPrivateFieldGet(this, _DataAPIHttpClient_props, \"f\"));\n        clone.collection = collection;\n        clone.namespace = namespace;\n        return clone;\n    }\n    timeoutManager(timeoutMs) {\n        return this._mkTimeoutManager(timeoutMs);\n    }\n    async executeCommand(command, options) {\n        const timeoutManager = options?.timeoutManager ?? this._mkTimeoutManager(options?.maxTimeMS);\n        return await this._requestDataAPI({\n            url: this.baseUrl,\n            timeoutManager: timeoutManager,\n            collection: options?.collection,\n            namespace: options?.namespace,\n            command: command,\n        });\n    }\n    async _requestDataAPI(info) {\n        let started = 0;\n        try {\n            info.collection || (info.collection = this.collection);\n            info.namespace || (info.namespace = this.namespace || api_1.DEFAULT_NAMESPACE);\n            const keyspacePath = `/${info.namespace}`;\n            const collectionPath = info.collection ? `/${info.collection}` : '';\n            info.url += keyspacePath + collectionPath;\n            if (this.monitorCommands) {\n                started = (0, api_1.hrTimeMs)();\n                this.emitter.emit('commandStarted', new events_1.CommandStartedEvent(info));\n            }\n            const resp = await this._request({\n                url: info.url,\n                data: JSON.stringify(info.command, replacer),\n                timeoutManager: info.timeoutManager,\n                method: api_1.HttpMethods.Post,\n            });\n            if (resp.status >= 400 && resp.status !== 401) {\n                throw new errors_1.DataAPIHttpError(resp);\n            }\n            const data = JSON.parse(resp.body, reviver);\n            if (resp.status === 401 || (data.errors && data.errors?.length > 0 && data?.errors[0]?.message === 'UNAUTHENTICATED: Invalid token')) {\n                const fauxResponse = mkFauxErroredResponse('Authentication failed; is your token valid?');\n                throw (0, errors_1.mkRespErrorFromResponse)(data_api_1.DataAPIResponseError, info.command, fauxResponse);\n            }\n            if (data.errors && data?.errors?.length > 0 && data?.errors[0]?.errorCode === 'COLLECTION_NOT_EXIST') {\n                const name = data?.errors[0]?.message.split(': ')[1];\n                throw new errors_1.CollectionNotFoundError(info.namespace, name);\n            }\n            if (data?.errors && data?.errors.length > 0) {\n                throw (0, errors_1.mkRespErrorFromResponse)(data_api_1.DataAPIResponseError, info.command, data);\n            }\n            const respData = {\n                status: data?.status,\n                data: data?.data,\n                errors: data?.errors,\n            };\n            if (this.monitorCommands) {\n                this.emitter.emit('commandSucceeded', new events_1.CommandSucceededEvent(info, respData, started));\n            }\n            return respData;\n        }\n        catch (e) {\n            if (this.monitorCommands) {\n                this.emitter.emit('commandFailed', new events_1.CommandFailedEvent(info, e, started));\n            }\n            throw e;\n        }\n    }\n    _mkTimeoutManager(timeout) {\n        timeout ?? (timeout = this.fetchCtx.maxTimeMS ?? api_1.DEFAULT_TIMEOUT);\n        return new timeout_managers_1.TimeoutManager(timeout, () => new data_api_1.DataAPITimeoutError(timeout));\n    }\n}\nexports.DataAPIHttpClient = DataAPIHttpClient;\n_DataAPIHttpClient_props = new WeakMap();\nconst mkFauxErroredResponse = (message) => {\n    return { errors: [{ message }] };\n};\n/**\n * @internal\n */\nfunction replacer(key, value) {\n    if (typeof value === 'bigint') {\n        return Number(value);\n    }\n    if (typeof this[key] === 'object') {\n        if (key === '$date') {\n            return new Date(value).valueOf();\n        }\n        if (this[key] instanceof Date) {\n            return { $date: this[key].valueOf() };\n        }\n    }\n    return value;\n}\nexports.replacer = replacer;\n/**\n * @internal\n */\nfunction reviver(_, value) {\n    if (!value) {\n        return value;\n    }\n    if (value.$date) {\n        return new Date(value.$date);\n    }\n    if (value.$objectId) {\n        return new data_api_1.ObjectId(value.$objectId);\n    }\n    if (value.$uuid) {\n        return new data_api_1.UUID(value.$uuid);\n    }\n    return value;\n}\nexports.reviver = reviver;\n//# sourceMappingURL=data-api-http-client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/data-api-http-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/devops-api-http-client.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/devops-api-http-client.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// noinspection ExceptionCaughtLocallyJS\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DevOpsAPIHttpClient = void 0;\nconst http_client_1 = __webpack_require__(/*! ../api/http-client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/http-client.js\");\nconst errors_1 = __webpack_require__(/*! ../devops/errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/errors.js\");\nconst timeout_managers_1 = __webpack_require__(/*! ../api/timeout-managers */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js\");\nconst constants_1 = __webpack_require__(/*! ../api/constants */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/constants.js\");\nconst devops_1 = __webpack_require__(/*! ../devops */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/index.js\");\n/**\n * @internal\n */\nclass DevOpsAPIHttpClient extends http_client_1.HttpClient {\n    constructor(props) {\n        super({\n            ...props,\n            mkAuthHeader: (token) => ({ [constants_1.DEFAULT_DEVOPS_API_AUTH_HEADER]: `Bearer ${token}` }),\n            fetchCtx: {\n                ...props.fetchCtx,\n                preferred: props.fetchCtx.http1,\n            },\n        });\n    }\n    async request(req, options, started = 0) {\n        const isLongRunning = started !== 0;\n        try {\n            const timeoutManager = options?.timeoutManager ?? this._mkTimeoutManager(options?.maxTimeMS);\n            const url = this.baseUrl + req.path;\n            if (this.monitorCommands && !isLongRunning) {\n                this.emitter.emit('adminCommandStarted', new devops_1.AdminCommandStartedEvent(req, isLongRunning, timeoutManager.ms));\n            }\n            started || (started = (0, http_client_1.hrTimeMs)());\n            const resp = await this._request({\n                url: url,\n                method: req.method,\n                params: req.params,\n                data: JSON.stringify(req.data),\n                timeoutManager,\n            });\n            const data = resp.body ? JSON.parse(resp.body) : undefined;\n            if (resp.status >= 400) {\n                throw new errors_1.DevOpsAPIResponseError(resp, data);\n            }\n            if (this.monitorCommands && !isLongRunning) {\n                this.emitter.emit('adminCommandSucceeded', new devops_1.AdminCommandSucceededEvent(req, false, data, started));\n            }\n            return {\n                data: data,\n                status: resp.status,\n                headers: resp.headers,\n            };\n        }\n        catch (e) {\n            if (!(e instanceof Error)) {\n                throw e;\n            }\n            if (this.monitorCommands) {\n                this.emitter.emit('adminCommandFailed', new devops_1.AdminCommandFailedEvent(req, isLongRunning, e, started));\n            }\n            throw e;\n        }\n    }\n    async requestLongRunning(req, info) {\n        const timeoutManager = this._mkTimeoutManager(info.options?.maxTimeMS);\n        const isLongRunning = info?.options?.blocking !== false;\n        if (this.monitorCommands) {\n            this.emitter.emit('adminCommandStarted', new devops_1.AdminCommandStartedEvent(req, isLongRunning, timeoutManager.ms));\n        }\n        const started = (0, http_client_1.hrTimeMs)();\n        const resp = await this.request(req, { timeoutManager }, started);\n        const id = (typeof info.id === 'function')\n            ? info.id(resp)\n            : info.id;\n        await this._awaitStatus(id, req, info, timeoutManager, started);\n        if (this.monitorCommands && isLongRunning) {\n            this.emitter.emit('adminCommandSucceeded', new devops_1.AdminCommandSucceededEvent(req, true, resp, started));\n        }\n        return resp;\n    }\n    async _awaitStatus(id, req, info, timeoutManager, started) {\n        if (info.options?.blocking === false) {\n            return;\n        }\n        const pollInterval = info.options?.pollInterval || info.defaultPollInterval;\n        let waiting = false;\n        for (;;) {\n            if (waiting) {\n                continue;\n            }\n            waiting = true;\n            if (this.monitorCommands) {\n                this.emitter.emit('adminCommandPolling', new devops_1.AdminCommandPollingEvent(req, started, pollInterval));\n            }\n            const resp = await this.request({\n                method: constants_1.HttpMethods.Get,\n                path: `/databases/${id}`,\n            }, {\n                timeoutManager: timeoutManager,\n            }, started);\n            if (resp.data?.status === info.target) {\n                break;\n            }\n            if (!info.legalStates.includes(resp.data?.status)) {\n                const okStates = [info.target, ...info.legalStates];\n                const error = new errors_1.DevOpsUnexpectedStateError(`Created database is not in any legal state [${okStates.join(',')}]`, okStates, resp.data);\n                if (this.monitorCommands) {\n                    this.emitter.emit('adminCommandFailed', new devops_1.AdminCommandFailedEvent(req, true, error, started));\n                }\n                throw error;\n            }\n            await new Promise((resolve) => {\n                setTimeout(() => {\n                    waiting = false;\n                    resolve();\n                }, pollInterval);\n            });\n        }\n    }\n    _mkTimeoutManager(timeout) {\n        timeout ?? (timeout = this.fetchCtx.maxTimeMS ?? (12 * 60 * 1000));\n        return new timeout_managers_1.TimeoutManager(timeout, (info) => new errors_1.DevOpsAPITimeoutError(info.url, timeout));\n    }\n}\nexports.DevOpsAPIHttpClient = DevOpsAPIHttpClient;\n//# sourceMappingURL=devops-api-http-client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/devops-api-http-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/http-client.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/http-client.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _HttpClient_applicationToken;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.buildUserAgent = exports.hrTimeMs = exports.HttpClient = void 0;\nconst constants_1 = __webpack_require__(/*! ../api/constants */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/constants.js\");\nconst fetch_h2_1 = __webpack_require__(/*! fetch-h2 */ \"(rsc)/./node_modules/fetch-h2/dist/index.js\");\n/**\n * @internal\n */\nclass HttpClient {\n    constructor(options) {\n        Object.defineProperty(this, \"baseUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"emitter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"monitorCommands\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fetchCtx\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        _HttpClient_applicationToken.set(this, void 0);\n        Object.defineProperty(this, \"baseHeaders\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        __classPrivateFieldSet(this, _HttpClient_applicationToken, options.applicationToken, \"f\");\n        this.baseUrl = options.baseUrl;\n        this.emitter = options.emitter;\n        this.monitorCommands = options.monitorCommands;\n        this.fetchCtx = options.fetchCtx;\n        if (options.baseApiPath) {\n            this.baseUrl += '/' + options.baseApiPath;\n        }\n        this.baseHeaders = options.mkAuthHeader?.(__classPrivateFieldGet(this, _HttpClient_applicationToken, \"f\")) ?? {};\n    }\n    get applicationToken() {\n        return __classPrivateFieldGet(this, _HttpClient_applicationToken, \"f\");\n    }\n    async _request(info) {\n        if (this.fetchCtx.closed.ref) {\n            throw new Error('Can\\'t make requests on a closed client');\n        }\n        if (info.timeoutManager.msRemaining <= 0) {\n            throw info.timeoutManager.mkTimeoutError(info);\n        }\n        const params = info.params ?? {};\n        Object.keys(params).forEach(key => params[key] === undefined && delete params[key]);\n        const url = (Object.keys(params).length > 0)\n            ? `${info.url}?${new URLSearchParams(params).toString()}`\n            : info.url;\n        try {\n            const resp = await this.fetchCtx.preferred.fetch(url, {\n                body: info.data,\n                method: info.method,\n                timeout: info.timeoutManager.msRemaining,\n                headers: this.baseHeaders,\n            });\n            resp.body = await resp.text();\n            return resp;\n        }\n        catch (e) {\n            if (e instanceof fetch_h2_1.TimeoutError) {\n                throw info.timeoutManager.mkTimeoutError(info);\n            }\n            throw e;\n        }\n    }\n}\nexports.HttpClient = HttpClient;\n_HttpClient_applicationToken = new WeakMap();\n/**\n * @internal\n */\nfunction hrTimeMs() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.hrTimeMs = hrTimeMs;\n/**\n * @internal\n */\nfunction buildUserAgent(caller) {\n    const callers = ((!caller)\n        ? [] :\n        Array.isArray(caller[0])\n            ? caller\n            : [caller]);\n    const callerString = callers.map((c) => {\n        return c[1] ? `${c[0]}/${c[1]}` : c[0];\n    }).join(' ');\n    return `${constants_1.RAGSTACK_REQUESTED_WITH} ${callerString} ${constants_1.CLIENT_USER_AGENT}`.trim();\n}\nexports.buildUserAgent = buildUserAgent;\n//# sourceMappingURL=http-client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/http-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./http-client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/http-client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./data-api-http-client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/data-api-http-client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./devops-api-http-client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/devops-api-http-client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/constants.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHlGQUFlO0FBQ3BDLGFBQWEsbUJBQU8sQ0FBQywyR0FBd0I7QUFDN0MsYUFBYSxtQkFBTyxDQUFDLCtHQUEwQjtBQUMvQyxhQUFhLG1CQUFPLENBQUMsNkVBQVM7QUFDOUIsYUFBYSxtQkFBTyxDQUFDLHFGQUFhO0FBQ2xDIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFTdGF4LCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9odHRwLWNsaWVudFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGF0YS1hcGktaHR0cC1jbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Rldm9wcy1hcGktaHR0cC1jbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdGFudHNcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TimeoutManager = void 0;\n/**\n * Tracks the remaining time before a timeout occurs. Can be used for both single and multi-call timeout management.\n *\n * The first call to `msRemaining` will start the timer.\n *\n * @internal\n */\nclass TimeoutManager {\n    constructor(ms, mkTimeoutError) {\n        Object.defineProperty(this, \"mkTimeoutError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: mkTimeoutError\n        });\n        Object.defineProperty(this, \"_deadline\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_started\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ms\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.ms = ms || 2147483647;\n        this._started = false;\n    }\n    get msRemaining() {\n        if (!this._started) {\n            this._started = true;\n            this._deadline = Date.now() + this.ms;\n            return this.ms;\n        }\n        return this._deadline - Date.now();\n    }\n}\nexports.TimeoutManager = TimeoutManager;\n//# sourceMappingURL=timeout-managers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL3RpbWVvdXQtbWFuYWdlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9hcGkvdGltZW91dC1tYW5hZ2Vycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UaW1lb3V0TWFuYWdlciA9IHZvaWQgMDtcbi8qKlxuICogVHJhY2tzIHRoZSByZW1haW5pbmcgdGltZSBiZWZvcmUgYSB0aW1lb3V0IG9jY3Vycy4gQ2FuIGJlIHVzZWQgZm9yIGJvdGggc2luZ2xlIGFuZCBtdWx0aS1jYWxsIHRpbWVvdXQgbWFuYWdlbWVudC5cbiAqXG4gKiBUaGUgZmlyc3QgY2FsbCB0byBgbXNSZW1haW5pbmdgIHdpbGwgc3RhcnQgdGhlIHRpbWVyLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBUaW1lb3V0TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IobXMsIG1rVGltZW91dEVycm9yKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1rVGltZW91dEVycm9yXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBta1RpbWVvdXRFcnJvclxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX2RlYWRsaW5lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zdGFydGVkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1zXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubXMgPSBtcyB8fCAyMTQ3NDgzNjQ3O1xuICAgICAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCBtc1JlbWFpbmluZygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2RlYWRsaW5lID0gRGF0ZS5ub3coKSArIHRoaXMubXM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZGVhZGxpbmUgLSBEYXRlLm5vdygpO1xuICAgIH1cbn1cbmV4cG9ydHMuVGltZW91dE1hbmFnZXIgPSBUaW1lb3V0TWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXQtbWFuYWdlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/timeout-managers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/types.js":
/*!**************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/types.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9hcGkvdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toCuratedApiResponse = void 0;\n/**\n * @internal\n */\nfunction toCuratedApiResponse(raw) {\n    return {\n        status: raw.status,\n        headers: Object.fromEntries(raw.headers.entries()),\n        url: raw.url,\n        body: raw.body,\n        httpVersion: raw.httpVersion,\n        statusText: raw.statusText,\n    };\n}\nexports.toCuratedApiResponse = toCuratedApiResponse;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvYXBpL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFTdGF4LCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvQ3VyYXRlZEFwaVJlc3BvbnNlID0gdm9pZCAwO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdG9DdXJhdGVkQXBpUmVzcG9uc2UocmF3KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiByYXcuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiBPYmplY3QuZnJvbUVudHJpZXMocmF3LmhlYWRlcnMuZW50cmllcygpKSxcbiAgICAgICAgdXJsOiByYXcudXJsLFxuICAgICAgICBib2R5OiByYXcuYm9keSxcbiAgICAgICAgaHR0cFZlcnNpb246IHJhdy5odHRwVmVyc2lvbixcbiAgICAgICAgc3RhdHVzVGV4dDogcmF3LnN0YXR1c1RleHQsXG4gICAgfTtcbn1cbmV4cG9ydHMudG9DdXJhdGVkQXBpUmVzcG9uc2UgPSB0b0N1cmF0ZWRBcGlSZXNwb25zZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/data-api-client.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/client/data-api-client.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// noinspection JSDeprecatedSymbols\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _DataAPIClient_options, _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DataAPIClient = exports.DataAPIClientEventEmitterBase = void 0;\nconst db_1 = __webpack_require__(/*! ../data-api/db */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/db.js\");\nconst astra_admin_1 = __webpack_require__(/*! ../devops/astra-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js\");\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"events\"));\nconst utils_1 = __webpack_require__(/*! ../data-api/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\");\nconst fetch_h2_1 = __webpack_require__(/*! fetch-h2 */ \"(rsc)/./node_modules/fetch-h2/dist/index.js\");\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\n/**\n * The base class for the {@link DataAPIClient} event emitter to make it properly typed.\n *\n * Should probably never need to be used directly.\n *\n * @public\n */\nexports.DataAPIClientEventEmitterBase = events_1.default;\n/**\n * The main entrypoint into working with the Data API. It sits at the top of the\n * [conceptual hierarchy](https://github.com/datastax/astra-db-ts/tree/signature-cleanup?tab=readme-ov-file#abstraction-diagram)\n * of the SDK.\n *\n * The client takes in a default token, which can be overridden by a stronger/weaker token when spawning a new\n * {@link Db} or {@link AstraAdmin} instance.\n *\n * It also takes in a set of default options (see {@link DataAPIClientOptions}) that may also be overridden as necessary.\n *\n * @example\n * ```typescript\n * const client = new DataAPIClient('AstraCS:...');\n *\n * const db1 = client.db('https://<db_id>-<region>.apps.astra.datastax.com');\n * const db2 = client.db('my-database', 'us-east1');\n *\n * const coll = await db1.collection('my-collection');\n *\n * const admin1 = client.admin();\n * const admin2 = client.admin({ adminToken: '<stronger_token>' });\n *\n * console.log(await coll.insertOne({ name: 'Lordi' }));\n * console.log(await admin1.listDatabases());\n * ```\n *\n * @public\n */\nclass DataAPIClient extends exports.DataAPIClientEventEmitterBase {\n    /**\n     * Constructs a new instance of the {@link DataAPIClient}.\n     *\n     * @param token - The default token to use when spawning new instances of {@link Db} or {@link AstraAdmin}.\n     * @param options - The default options to use when spawning new instances of {@link Db} or {@link AstraAdmin}.\n     */\n    constructor(token, options) {\n        super();\n        _DataAPIClient_options.set(this, void 0);\n        /**\n         * Allows for the `await using` syntax (if your typescript version \\>= 5.2) to automatically close the client when\n         * it's out of scope.\n         *\n         * Equivalent to wrapping the client usage in a `try`/`finally` block and calling `client.close()` in the `finally`\n         * block.\n         *\n         * @example\n         * ```typescript\n         * async function main() {\n         *   // Will unconditionally close the client when the function exits\n         *   await using client = new DataAPIClient('*TOKEN*');\n         *\n         *   // Using the client as normal\n         *   const db = client.db('*ENDPOINT*');\n         *   console.log(await db.listCollections());\n         *\n         *   // Or pass it to another function to run your app\n         *   app(client);\n         * }\n         * main();\n         * ```\n         *\n         * *This will only be defined if the `Symbol.asyncDispose` symbol is actually defined.*\n         */\n        Object.defineProperty(this, _a, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (!token || typeof token !== 'string') {\n            throw new Error('A valid token is required to use the DataAPIClient');\n        }\n        validateRootOpts(options);\n        const baseCtxOptions = {\n            userAgent: (0, api_1.buildUserAgent)(options?.caller),\n            overwriteUserAgent: true,\n            http1: {\n                keepAlive: options?.httpOptions?.http1?.keepAlive,\n                keepAliveMsecs: options?.httpOptions?.http1?.keepAliveMS,\n                maxSockets: options?.httpOptions?.http1?.maxSockets,\n                maxFreeSockets: options?.httpOptions?.http1?.maxFreeSockets,\n            },\n        };\n        const http1Ctx = (0, fetch_h2_1.context)({\n            ...baseCtxOptions,\n            httpsProtocols: ['http1'],\n        });\n        const preferHttp2 = options?.httpOptions?.preferHttp2 ?? getDeprecatedPrefersHttp2(options) ?? true;\n        const preferredCtx = (preferHttp2)\n            ? (0, fetch_h2_1.context)(baseCtxOptions)\n            : http1Ctx;\n        __classPrivateFieldSet(this, _DataAPIClient_options, {\n            ...options,\n            fetchCtx: {\n                http1: http1Ctx,\n                preferred: preferredCtx,\n                preferredType: (preferHttp2)\n                    ? 'http2'\n                    : 'http1',\n                closed: { ref: false },\n                maxTimeMS: options?.httpOptions?.maxTimeMS,\n            },\n            dbOptions: {\n                monitorCommands: false,\n                token: token,\n                ...options?.dbOptions,\n            },\n            adminOptions: {\n                monitorCommands: false,\n                adminToken: token,\n                ...options?.adminOptions,\n            },\n            emitter: this,\n        }, \"f\");\n        if (Symbol.asyncDispose) {\n            this[Symbol.asyncDispose] = this.close;\n        }\n    }\n    db(endpointOrId, regionOrOptions, maybeOptions) {\n        return (0, db_1.mkDb)(__classPrivateFieldGet(this, _DataAPIClient_options, \"f\"), endpointOrId, regionOrOptions, maybeOptions);\n    }\n    /**\n     * Spawns a new {@link AstraAdmin} instance using the given options to work with the DevOps API (for admin\n     * work such as creating/managing databases).\n     *\n     * **NB. This method is only available for Astra databases.**\n     *\n     * The given options will override any default options set when creating the {@link DataAPIClient} through\n     * a deep merge (i.e. unset properties in the options object will just default to the default options).\n     *\n     * @example\n     * ```typescript\n     * const admin1 = client.admin();\n     * const admin2 = client.admin({ adminToken: '<stronger_token>' });\n     *\n     * const dbs = await admin1.listDatabases();\n     * console.log(dbs);\n     * ```\n     *\n     * @param options - Any options to override the default options set when creating the {@link DataAPIClient}.\n     *\n     * @returns A new {@link AstraAdmin} instance.\n     */\n    admin(options) {\n        return (0, astra_admin_1.mkAdmin)(__classPrivateFieldGet(this, _DataAPIClient_options, \"f\"), options);\n    }\n    /**\n     * Closes the client and disconnects all underlying connections. This should be called when the client is no longer\n     * needed to free up resources.\n     *\n     * The client will be no longer usable after this method is called.\n     *\n     * @remarks\n     * This method is idempotent and can be called multiple times without issue.\n     *\n     * --\n     *\n     * For most users, this method isn't necessary to call, as resources will be freed up when the\n     * server is shut down or the process is killed. However, it's useful in long-running processes or when you want to\n     * free up resources immediately.\n     *\n     * --\n     *\n     * Think of it as using malloc or using a file descriptor. Freeing them isn't always strictly necessary for\n     * long-running usages, but it's there for when you need it.\n     *\n     * @returns A promise that resolves when the client has been closed.\n     */\n    async close() {\n        __classPrivateFieldGet(this, _DataAPIClient_options, \"f\").fetchCtx.closed.ref = true;\n        await __classPrivateFieldGet(this, _DataAPIClient_options, \"f\").fetchCtx.preferred.disconnectAll();\n        await __classPrivateFieldGet(this, _DataAPIClient_options, \"f\").fetchCtx.http1.disconnectAll();\n    }\n}\nexports.DataAPIClient = DataAPIClient;\n_DataAPIClient_options = new WeakMap(), _a = Symbol.asyncDispose;\n// Shuts the linter up about 'preferHttp2' not being deprecated\nfunction getDeprecatedPrefersHttp2(opts) {\n    return opts?.['preferHttp2'];\n}\nfunction validateRootOpts(opts) {\n    (0, utils_1.validateOption)('root client options', opts, 'object');\n    if (!opts) {\n        return;\n    }\n    (0, utils_1.validateOption)('caller', opts.caller, 'object', validateCaller);\n    (0, utils_1.validateOption)('preferHttp2 option', getDeprecatedPrefersHttp2(opts), 'boolean');\n    (0, db_1.validateDbOpts)(opts.dbOptions);\n    (0, astra_admin_1.validateAdminOpts)(opts.adminOptions);\n    validateHttpOpts(opts.httpOptions);\n}\nfunction validateHttpOpts(opts) {\n    (0, utils_1.validateOption)('http options', opts, 'object');\n    if (!opts) {\n        return;\n    }\n    (0, utils_1.validateOption)('preferHttp2 option', opts.preferHttp2, 'boolean');\n    (0, utils_1.validateOption)('maxTimeMS option', opts.maxTimeMS, 'number');\n    (0, utils_1.validateOption)('http1 options', opts.http1, 'object', (http1) => {\n        (0, utils_1.validateOption)('http1.keepAlive option', http1.keepAlive, 'boolean');\n        (0, utils_1.validateOption)('http1.keepAliveMS option', http1.keepAliveMS, 'number');\n        (0, utils_1.validateOption)('http1.maxSockets option', http1.maxSockets, 'number');\n        (0, utils_1.validateOption)('http1.maxFreeSockets option', http1.maxFreeSockets, 'number');\n    });\n}\nfunction validateCaller(caller) {\n    if (!Array.isArray(caller)) {\n        throw new TypeError('Invalid caller; expected an array, or undefined/null');\n    }\n    const isCallerArr = Array.isArray(caller[0]);\n    const callers = ((isCallerArr)\n        ? caller\n        : [caller]);\n    callers.forEach((c, i) => {\n        const idxMessage = (isCallerArr)\n            ? ` at index ${i}`\n            : '';\n        if (!Array.isArray(c)) {\n            throw new TypeError(`Invalid caller; expected [name, version?], or an array of such${idxMessage}`);\n        }\n        if (c.length < 1 || 2 < c.length) {\n            throw new Error(`Invalid caller; expected [name, version?], or an array of such${idxMessage}`);\n        }\n        if (typeof c[0] !== 'string') {\n            throw new Error(`Invalid caller; expected a string name${idxMessage}`);\n        }\n        if (c.length === 2 && typeof c[1] !== 'string') {\n            throw new Error(`Invalid caller; expected a string version${idxMessage}`);\n        }\n    });\n}\n//# sourceMappingURL=data-api-client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/data-api-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/client/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// noinspection DuplicatedCode\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./data-api-client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/data-api-client.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY2xpZW50L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsb0dBQW1CO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY2xpZW50L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFTdGF4LCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vLyBub2luc3BlY3Rpb24gRHVwbGljYXRlZENvZGVcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RhdGEtYXBpLWNsaWVudFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/common/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/types.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLGdGQUFTO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFTdGF4LCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/common/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvY29tbW9uL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9jb21tb24vdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/collection.js":
/*!************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/collection.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Collection = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\");\nconst cursor_1 = __webpack_require__(/*! ../data-api/cursor */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/cursor.js\");\nconst errors_1 = __webpack_require__(/*! ../data-api/errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js\");\nconst object_hash_1 = __importDefault(__webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\"));\nconst types_1 = __webpack_require__(/*! ../data-api/types */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/index.js\");\n/**\n * Represents the interface to a collection in the database.\n *\n * **Shouldn't be directly instantiated, but rather created via {@link Db.createCollection},\n * or connected to using {@link Db.collection}**.\n *\n * Typed as `Collection<Schema>` where `Schema` is the type of the documents in the collection.\n * Operations on the collection will be strongly typed if a specific schema is provided, otherwise\n * remained largely weakly typed if no type is provided, which may be preferred for dynamic data\n * access & operations.\n *\n * @example\n * ```typescript\n * const collection = await db.createCollection<PersonSchema>('my_collection');\n * await collection.insertOne({ _id: '1', name: 'John Doe' });\n * await collection.drop();\n * ```\n *\n * @see SomeDoc\n * @see VectorDoc\n *\n * @public\n */\nclass Collection {\n    /**\n     * Use {@link Db.collection} to obtain an instance of this class.\n     *\n     * @internal\n     */\n    constructor(db, httpClient, name, namespace) {\n        Object.defineProperty(this, \"_httpClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_db\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The name of the collection.\n         */\n        Object.defineProperty(this, \"collectionName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The namespace (aka keyspace) that the collection lives in.\n         */\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, 'collectionName', {\n            value: name,\n            writable: false,\n        });\n        Object.defineProperty(this, 'namespace', {\n            value: namespace ?? db.namespace,\n            writable: false,\n        });\n        Object.defineProperty(this, '_httpClient', {\n            value: httpClient.withCollection(this.namespace, this.collectionName),\n            enumerable: false,\n        });\n        Object.defineProperty(this, '_db', {\n            value: db,\n            enumerable: false,\n        });\n    }\n    /**\n     * Inserts a single document into the collection atomically.\n     *\n     * If the document does not contain an `_id` field, the server will generate an id for the document. The type of the\n     * id may be specified in {@link CollectionOptions.defaultId} at creation, otherwise it'll just be a UUID string. This\n     * generation will not mutate the documents.\n     *\n     * If an `_id` is provided which corresponds to a document that already exists in the collection, an error is raised,\n     * and the insertion fails.\n     *\n     * See {@link InsertOneOptions} for complete information about the options available for this operation.\n     *\n     * @example\n     * ```typescript\n     * // Insert a document with a specific ID\n     * await collection.insertOne({ _id: '1', name: 'John Doe' });\n     *\n     * // Insert a document with an autogenerated ID\n     * await collection.insertOne({ name: 'Jane Doe' });\n     *\n     * // Insert a document with a vector\n     * await collection.insertOne({ name: 'Jane Doe' }, { vector: [.12, .52, .32] });\n     * await collection.insertOne({ name: 'Jane Doe', $vector: [.12, .52, .32] });\n     * ```\n     *\n     * @param document - The document to insert.\n     * @param options - The options for this operation.\n     *\n     * @returns The result of the operation.\n     */\n    async insertOne(document, options) {\n        const command = {\n            insertOne: { document },\n        };\n        if (options?.vector && options?.vectorize) {\n            throw new Error('Cannot set both vector and vectorize options');\n        }\n        if (options?.vector) {\n            command.insertOne.document = { ...command.insertOne.document, $vector: options.vector };\n        }\n        if (options?.vectorize) {\n            command.insertOne.document = { ...command.insertOne.document, $vectorize: options.vectorize };\n        }\n        const resp = await this._httpClient.executeCommand(command, options);\n        return {\n            insertedId: resp.status?.insertedIds[0],\n        };\n    }\n    /**\n     * Inserts many documents into the collection.\n     *\n     * **NB. This function paginates the insertion of documents in chunks to avoid running into insertion limits. This\n     * means multiple requests may be made to the server, and the operation may not be atomic.**\n     *\n     * If any document does not contain an `_id` field, the server will generate an id for the document. The type of the\n     * id may be specified in {@link CollectionOptions.defaultId} at creation, otherwise it'll just be a UUID string. This\n     * generation will not mutate the documents.\n     *\n     * You may set the `ordered` option to `true` to stop the operation after the first error; otherwise all documents\n     * may be parallelized and processed in arbitrary order, improving, perhaps vastly, performance.\n     *\n     * You can set the `concurrency` option to control how many network requests are made in parallel on unordered\n     * insertions. Defaults to `8`.\n     *\n     * If a 2XX insertion error occurs, the operation will throw an {@link InsertManyError} containing the partial result.\n     *\n     * See {@link InsertManyOptions} for complete information about the options available for this operation.\n     *\n     * @example\n     * ```typescript\n     * try {\n     *   await collection.insertMany([\n     *     { _id: '1', name: 'John Doe' },\n     *     { name: 'Jane Doe' },\n     *   ], { ordered: true });\n     *\n     *   await collection.insertMany([\n     *     { _id: '1', name: 'John Doe', $vector: [.12, .52, .32] },\n     *     { name: 'Jane Doe', $vector: [.32, .52, .12] },\n     *   ]);\n     *\n     *   await collection.insertMany([\n     *     { _id: '1', name: 'John Doe' },\n     *     { name: 'Jane Doe' },\n     *   ], {\n     *     vectors: [\n     *       [.12, .52, .32],\n     *       [.32, .52, .12],\n     *     ],\n     *     ordered: true,\n     *   });\n     * } catch (e) {\n     *   if (e instanceof InsertManyError) {\n     *     console.log(e.insertedIds);\n     *   }\n     * }\n     * ```\n     *\n     * @remarks\n     * This operation is not atomic. Depending on the amount of inserted documents, and if it's ordered or not, it can\n     * keep running (in a blocking way) for a macroscopic amount of time. In that case, new documents that are inserted\n     * from another concurrent process/application may be inserted during the execution of this method call, and if there\n     * are duplicate keys, it's not easy to predict which application will win the race.\n     *\n     * --\n     *\n     * *If a thrown exception is not due to an insertion error, e.g. a `5xx` error or network error, the operation will throw the\n     * underlying error.*\n     *\n     * *In case of an unordered request, if the error was a simple insertion error, a `InsertManyError` will be thrown\n     * after every document has been attempted to be inserted. If it was a `5xx` or similar, the error will be thrown\n     * immediately.*\n     *\n     * @param documents - The documents to insert.\n     * @param options - The options for this operation.\n     *\n     * @returns The aggregated result of the operation.\n     *\n     * @throws InsertManyError - If the operation fails.\n     */\n    async insertMany(documents, options) {\n        const chunkSize = options?.chunkSize ?? 20;\n        if (options?.vectors) {\n            if (options.vectors.length !== documents.length) {\n                throw new Error('The number of vectors must match the number of documents');\n            }\n            for (let i = 0, n = documents.length; i < n; i++) {\n                if (options.vectors[i]) {\n                    documents[i] = { ...documents[i], $vector: options.vectors[i] };\n                }\n            }\n        }\n        if (options?.vectorize) {\n            if (options.vectorize.length !== documents.length) {\n                throw new Error('The number of vectors must match the number of documents');\n            }\n            for (let i = 0, n = documents.length; i < n; i++) {\n                if (options.vectorize[i]) {\n                    if (documents[i].$vector) {\n                        throw new Error('Vector and vectorize options cannot overlap');\n                    }\n                    documents[i] = { ...documents[i], $vectorize: options.vectorize[i] };\n                }\n            }\n        }\n        const timeoutManager = this._httpClient.timeoutManager(options?.maxTimeMS);\n        const insertedIds = (options?.ordered)\n            ? await insertManyOrdered(this._httpClient, documents, chunkSize, timeoutManager)\n            : await insertManyUnordered(this._httpClient, documents, options?.concurrency ?? 8, chunkSize, timeoutManager);\n        return {\n            insertedCount: insertedIds.length,\n            insertedIds: insertedIds,\n        };\n    }\n    /**\n     * Atomically updates a single document in the collection.\n     *\n     * If `upsert` is set to true, it will insert the document if no match is found.\n     *\n     * You can also specify a sort option to determine which document to update if multiple documents match the filter.\n     *\n     * See {@link UpdateOneOptions} for complete information about the options available for this operation.\n     *\n     * @example\n     * ```typescript\n     * // Update by ID\n     * await collection.insertOne({ _id: '1', name: 'John Doe' });\n     *\n     * await collection.updateOne(\n     *   { _id: '1' },\n     *   { $set: { name: 'Jane Doe' }\n     * });\n     *\n     * // Update by vector search\n     * await collection.insertOne({ name: 'John Doe', $vector: [.12, .52, .32] });\n     *\n     * await collection.updateOne(\n     *   {},\n     *   { $set: { name: 'Jane Doe' } },\n     *   { vector: [.09, .58, .21] }\n     * );\n     *\n     * await collection.updateOne(\n     *   {},\n     *   { $set: { name: 'Jane Doe' } },\n     *   { sort: { $vector: [.09, .58, .21] } }\n     * );\n     * ```\n     *\n     * @param filter - A filter to select the document to update.\n     * @param update - The update to apply to the selected document.\n     * @param options - The options for this operation.\n     *\n     * @returns The result of the operation.\n     *\n     * @see StrictFilter\n     * @see StrictUpdateFilter\n     */\n    async updateOne(filter, update, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            updateOne: {\n                filter,\n                update,\n                options: {\n                    upsert: options?.upsert,\n                },\n            },\n        };\n        if (options?.sort) {\n            command.updateOne.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        const resp = await this._httpClient.executeCommand(command, options);\n        const commonResult = {\n            modifiedCount: resp.status?.modifiedCount,\n            matchedCount: resp.status?.matchedCount,\n        };\n        return (resp.status?.upsertedId)\n            ? {\n                ...commonResult,\n                upsertedId: resp.status?.upsertedId,\n                upsertedCount: 1,\n            }\n            : {\n                ...commonResult,\n                upsertedCount: 0,\n            };\n    }\n    /**\n     * Updates many documents in the collection.\n     *\n     * **NB. This function paginates the updating of documents in chunks to avoid running into insertion limits. This\n     * means multiple requests may be made to the server, and the operation may not be atomic.**\n     *\n     * If `upsert` is set to true, it will insert a document if no match is found.\n     *\n     * You can also specify a sort option to determine which documents to update if multiple documents match the filter.\n     *\n     * See {@link UpdateManyOptions} for complete information about the options available for this operation.\n     *\n     * @example\n     * ```typescript\n     * await collection.insertMany([\n     *   { _id: '1', name: 'John Doe', car: 'Renault Twizy' },\n     *   { _id: UUID.v4(), name: 'Jane Doe' },\n     *   { name: 'Dane Joe' },\n     * ]);\n     *\n     * // Will give 'Jane' and 'Dane' a car 'unknown'\n     * await collection.updateMany({\n     *   car: { $exists: false },\n     * }, {\n     *   $set: { car: 'unknown' },\n     * });\n     *\n     * // Will upsert a document with name 'Anette' and car 'Volvo v90'\n     * await collection.updateMany({\n     *   name: 'Anette',\n     * }, {\n     *   $set: { car: 'Volvo v90' },\n     * }, {\n     *   upsert: true,\n     * });\n     * ```\n     *\n     * @remarks\n     * This operation is not atomic. Depending on the amount of matching documents, it can keep running (in a blocking\n     * way) for a macroscopic amount of time. In that case, new documents that are inserted from another concurrent process/\n     * application at the same time may be updated during the execution of this method call. In other words, it cannot\n     * easily be predicted whether a given newly-inserted document will be picked up by the updateMany command or not.\n     *\n     * @param filter - A filter to select the documents to update.\n     * @param update - The update to apply to the selected documents.\n     * @param options - The options for this operation.\n     *\n     * @returns The aggregated result of the operation.\n     *\n     * @see StrictFilter\n     * @see StrictUpdateFilter\n     */\n    async updateMany(filter, update, options) {\n        const command = {\n            updateMany: {\n                filter,\n                update,\n                options: {\n                    upsert: options?.upsert,\n                },\n            },\n        };\n        const timeoutManager = this._httpClient.timeoutManager(options?.maxTimeMS);\n        const commonResult = {\n            modifiedCount: 0,\n            matchedCount: 0,\n            upsertedCount: 0,\n        };\n        let resp;\n        try {\n            while (!resp || resp.status?.nextPageState) {\n                resp = await this._httpClient.executeCommand(command, { timeoutManager });\n                command.updateMany.options.pagingState = resp.status?.nextPageState;\n                commonResult.modifiedCount += resp.status?.modifiedCount ?? 0;\n                commonResult.matchedCount += resp.status?.matchedCount ?? 0;\n            }\n        }\n        catch (e) {\n            if (!(e instanceof errors_1.DataAPIResponseError)) {\n                throw e;\n            }\n            const desc = e.detailedErrorDescriptors[0];\n            commonResult.modifiedCount += desc.rawResponse?.status?.modifiedCount ?? 0;\n            commonResult.matchedCount += desc.rawResponse?.status?.matchedCount ?? 0;\n            commonResult.upsertedCount = desc.rawResponse?.status?.upsertedCount ?? 0;\n            throw (0, errors_1.mkRespErrorFromResponse)(errors_1.UpdateManyError, command, desc.rawResponse, commonResult);\n        }\n        return (resp.status?.upsertedId)\n            ? {\n                ...commonResult,\n                upsertedId: resp.status?.upsertedId,\n                upsertedCount: 1,\n            }\n            : commonResult;\n    }\n    /**\n     * Replaces a single document in the collection.\n     *\n     * If `upsert` is set to true, it will insert the replacement regardless of if no match is found.\n     *\n     * See {@link ReplaceOneOptions} for complete information about the options available for this operation.\n     *\n     * @example\n     * ```typescript\n     * await collection.insertOne({\n     *   _id: '1',\n     *   name: 'John Doe',\n     *   $vector: [.12, .52, .32],\n     * });\n     *\n     * // Replace by ID\n     * await collection.replaceOne({ _id: '1' }, { name: 'Jane Doe' });\n     *\n     * // Replace by name\n     * await collection.replaceOne({\n     *   name: 'John Doe',\n     * }, {\n     *   name: 'Jane Doe',\n     * });\n     *\n     * // Replace by vector\n     * await collection.replaceOne({}, {\n     *   name: 'Jane Doe'\n     * }, {\n     *   vector: [.09, .58, .22],\n     * });\n     *\n     * // Upsert if no match\n     * await collection.replaceOne({\n     *   name: 'Lynyrd Skynyrd',\n     * }, {\n     *   name: 'Lenerd Skinerd',\n     * }, {\n     *   upsert: true,\n     * });\n     * ```\n     *\n     * @param filter - A filter to select the document to replace.\n     * @param replacement - The replacement document, which contains no `_id` field.\n     * @param options - The options for this operation.\n     *\n     * @returns The result of the operation.\n     *\n     * @see StrictFilter\n     */\n    async replaceOne(filter, replacement, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            findOneAndReplace: {\n                filter,\n                replacement,\n                options: {\n                    returnDocument: 'before',\n                    upsert: options?.upsert,\n                },\n                // projection: { '*': 0 },\n            },\n        };\n        if (options?.sort) {\n            command.findOneAndReplace.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        const resp = await this._httpClient.executeCommand(command, options);\n        const commonResult = {\n            modifiedCount: resp.status?.modifiedCount,\n            matchedCount: resp.status?.matchedCount,\n        };\n        return (resp.status?.upsertedId)\n            ? {\n                ...commonResult,\n                upsertedId: resp.status?.upsertedId,\n                upsertedCount: 1,\n            }\n            : {\n                ...commonResult,\n                upsertedCount: 0,\n            };\n    }\n    /**\n     * Atomically deletes a single document from the collection.\n     *\n     * You can specify a `sort` option to determine which document to delete if multiple documents match the filter.\n     *\n     * See {@link DeleteOneOptions} for complete information about the options available for this operation.\n     *\n     * @example\n     * ```typescript\n     * // Delete by _id\n     * await collection.insertOne({ _id: '1', name: 'John Doe' });\n     * await collection.deleteOne({ _id: '1' });\n     *\n     * // Delete by name\n     * await collection.insertOne({ name: 'Jane Doe', age: 25 });\n     * await collection.insertOne({ name: 'Jane Doe', age: 33 });\n     * await collection.deleteOne({ name: 'Jane Doe' }, { sort: { age: -1 } });\n     *\n     * // Delete by vector\n     * await collection.insertOne({ name: 'Jane Doe', $vector: [.12, .52, .32] });\n     * await collection.deleteOne({}, { vector: [.09, .58, .42] });\n     * ```\n     *\n     * @param filter - A filter to select the document to delete.\n     * @param options - The options for this operation.\n     *\n     * @returns The result of the operation.\n     *\n     * @see StrictFilter\n     */\n    async deleteOne(filter = {}, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            deleteOne: { filter },\n        };\n        if (options?.sort) {\n            command.deleteOne.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        const deleteOneResp = await this._httpClient.executeCommand(command, options);\n        return {\n            deletedCount: deleteOneResp.status?.deletedCount,\n        };\n    }\n    /**\n     * Deletes many documents from the collection.\n     *\n     * **NB. This function paginates the deletion of documents in chunks to avoid running into insertion limits. This\n     * means multiple requests may be made to the server, and the operation may not be atomic.**\n     *\n     * If an empty filter is passed, an error will be thrown, asking you to use {@link Collection.deleteAll} instead for your safety.\n     *\n     * @example\n     * ```typescript\n     * await collection.insertMany([\n     *   { _id: '1', name: 'John Doe' },\n     *   { name: 'John Doe' },\n     * ]);\n     *\n     * await collection.deleteMany({ name: 'John Doe' });\n     * ```\n     *\n     * @remarks\n     * This operation is not atomic. Depending on the amount of matching documents, it can keep running (in a blocking\n     * way) for a macroscopic amount of time. In that case, new documents that are inserted from another concurrent process/\n     * application at the same time may be deleted during the execution of this method call. In other words, it cannot\n     * easily be predicted whether a given newly-inserted document will be picked up by the deleteMany command or not.\n     *\n     * @param filter - A filter to select the documents to delete.\n     * @param options - The options for this operation.\n     *\n     * @returns The aggregated result of the operation.\n     *\n     * @throws Error - If an empty filter is passed.\n     *\n     * @see StrictFilter\n     */\n    async deleteMany(filter = {}, options) {\n        if (Object.keys(filter).length === 0) {\n            throw new Error('Can\\'t pass an empty filter to deleteMany, use deleteAll instead if you really want to delete everything');\n        }\n        const command = {\n            deleteMany: { filter },\n        };\n        const timeoutManager = this._httpClient.timeoutManager(options?.maxTimeMS);\n        let resp;\n        let numDeleted = 0;\n        try {\n            while (!resp || resp.status?.moreData) {\n                resp = await this._httpClient.executeCommand(command, { timeoutManager });\n                numDeleted += resp.status?.deletedCount ?? 0;\n            }\n        }\n        catch (e) {\n            if (!(e instanceof errors_1.DataAPIResponseError)) {\n                throw e;\n            }\n            const desc = e.detailedErrorDescriptors[0];\n            throw (0, errors_1.mkRespErrorFromResponse)(errors_1.DeleteManyError, command, desc.rawResponse, { deletedCount: numDeleted + (desc.rawResponse?.status?.deletedCount ?? 0) });\n        }\n        return {\n            deletedCount: numDeleted,\n        };\n    }\n    /**\n     * Deletes all documents from the collection.\n     *\n     * Unlike {@link Collection.deleteMany}, this method is atomic and will delete all documents in the collection in one go,\n     * without making multiple network requests to the server.\n     *\n     * @remarks Use with caution. Wear a helmet. Don't say I didn't warn you.\n     *\n     * @param options - The options for this operation.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async deleteAll(options) {\n        const command = {\n            deleteMany: { filter: {} },\n        };\n        await this._httpClient.executeCommand(command, options);\n    }\n    /**\n     * Find documents on the collection, optionally matching the provided filter.\n     *\n     * Also accepts `sort`, `limit`, `skip`, `includeSimilarity`, and `projection` options.\n     *\n     * The method returns a {@link FindCursor} that can then be iterated over.\n     *\n     * **NB. If a *non-vector-sort* `sort` option is provided, the iteration of all documents may not be atomic**—it will\n     * iterate over cursors in an approximate way, exhibiting occasional skipped or duplicate documents, with real-time\n     * collection insertions/mutations being displayed.\n     *\n     * See {@link FindOptions} for complete information about the options available for this operation.\n     *\n     * @example\n     * ```typescript\n     * await collection.insertMany([\n     *   { name: 'John Doe' },\n     *   { name: 'Jane Doe' },\n     *   { name: 'Dane Joe' },\n     * ], {\n     *   vectors: [\n     *     [.12, .52, .32],\n     *     [.32, .52, .12],\n     *     [.52, .32, .12],\n     *   ],\n     * });\n     *\n     * // Find by name\n     * const cursor1 = collection.find({ name: 'John Doe' });\n     *\n     * // Returns ['John Doe']\n     * console.log(await cursor1.toArray());\n     *\n     * // Match all docs, sorting by name\n     * const cursor2 = collection.find({}, {\n     *   sort: { name: 1 },\n     * });\n     *\n     * // Returns 'Dane Joe', 'Jane Doe', 'John Doe'\n     * for await (const doc of cursor2) {\n     *   console.log(doc);\n     * }\n     *\n     * // Find by vector\n     * const cursor3 = collection.find({}, {\n     *   vector: [.12, .52, .32],\n     * });\n     *\n     * // Returns 'John Doe'\n     * console.log(await cursor3.next());\n     * ```\n     *\n     * @remarks\n     * Some combinations of arguments impose an implicit upper bound on the number of documents that are returned by the\n     * Data API. Namely:\n     *\n     * (a) Vector ANN searches cannot return more than a number of documents\n     * that at the time of writing is set to 1000 items.\n     *\n     * (b) When using a sort criterion of the ascending/descending type,\n     * the Data API will return a smaller number of documents, set to 20\n     * at the time of writing, and stop there. The returned documents are\n     * the top results across the whole collection according to the requested\n     * criterion.\n     *\n     * --\n     *\n     * When not specifying sorting criteria at all (by vector or otherwise),\n     * the cursor can scroll through an arbitrary number of documents as\n     * the Data API and the client periodically exchange new chunks of documents.\n     * It should be noted that the behavior of the cursor in the case documents\n     * have been added/removed after the `find` was started depends on database\n     * internals, and it is not guaranteed, nor excluded, that such \"real-time\"\n     * changes in the data would be picked up by the cursor.\n     *\n     * @param filter - A filter to select the documents to find. If not provided, all documents will be returned.\n     * @param options - The options for this operation.\n     *\n     * @returns A FindCursor which can be iterated over.\n     *\n     * @see StrictFilter\n     */\n    find(filter, options) {\n        return new cursor_1.FindCursor(this.namespace, this._httpClient, filter, coalesceVectorSpecialsIntoSort(options));\n    }\n    /**\n     * Return a list of the unique values of `key` across the documents in the collection that match the provided filter.\n     *\n     * **NB. This is a *client-side* operation**—this effectively browses all matching documents (albeit with a\n     * projection) using the logic of the {@link Collection.find} method, and collects the unique value for the\n     * given `key` manually. As such, there may be performance, latency and ultimately billing implications if the\n     * amount of matching documents is large.\n     *\n     * The key may use dot-notation to access nested fields, such as `'field'`, `'field.subfield'`, `'field.3'`,\n     * `'field.3.subfield'`, etc. If lists are encountered and no numeric index is specified, all items in the list are\n     * pulled.\n     *\n     * **Note that on complex extractions, the return type may be not as expected.** In that case, it's on the user to\n     * cast the return type to the correct one.\n     *\n     * Distinct works with arbitrary objects as well, by creating a deterministic hash of the object and comparing it\n     * with the hashes of the objects already seen. This, unsurprisingly, may not be great for performance if you have\n     * a lot of records that match, so it's recommended to use distinct on simple values whenever performance or number\n     * of records is a concern.\n     *\n     * For details on the behaviour of \"distinct\" in conjunction with real-time changes in the collection contents, see\n     * the remarks on the `find` command.\n     *\n     * @example\n     * ```typescript\n     * await collection.insertMany([\n     *   { letter: { value: 'a' }, car: [1] },\n     *   { letter: { value: 'b' }, car: [2, 3] },\n     *   { letter: { value: 'a' }, car: [2], bus: 'no' },\n     * ]);\n     *\n     * // ['a', 'b']\n     * const distinct = await collection.distinct('letter.value');\n     *\n     * await collection.insertOne({\n     *   x: [{ y: 'Y', 0: 'ZERO' }],\n     * });\n     *\n     * // ['Y']\n     * await collection.distinct('x.y');\n     *\n     * // [{ y: 'Y', 0: 'ZERO' }]\n     * await collection.distinct('x.0');\n     *\n     * // ['Y']\n     * await collection.distinct('x.0.y');\n     *\n     * // ['ZERO']\n     * await collection.distinct('x.0.0');\n     * ```\n     *\n     * @param key - The dot-notation key to pick which values to retrieve unique\n     * @param filter - A filter to select the documents to find. If not provided, all documents will be matched.\n     *\n     * @returns A list of all the unique values selected by the given `key`\n     *\n     * @see StrictFilter\n     */\n    async distinct(key, filter = {}) {\n        assertPathSafe4Distinct(key);\n        const projection = pullSafeProjection4Distinct(key);\n        const cursor = this.find(filter, { projection: { _id: 0, [projection]: 1 } });\n        const seen = new Set();\n        const ret = [];\n        const extract = mkDistinctPathExtractor(key);\n        for await (const doc of cursor) {\n            const values = extract(doc);\n            for (let i = 0, n = values.length; i < n; i++) {\n                if (typeof values[i] === 'object') {\n                    const hash = (0, object_hash_1.default)(values[i]);\n                    if (!seen.has(hash)) {\n                        seen.add(hash);\n                        ret.push(values[i]);\n                    }\n                }\n                else {\n                    if (!seen.has(values[i])) {\n                        seen.add(values[i]);\n                        ret.push(values[i]);\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n    /**\n     * Finds a single document in the collection, if it exists.\n     *\n     * You can specify a `sort` option to determine which document to find if multiple documents match the filter.\n     *\n     * You can also specify a `projection` option to determine which fields to include in the returned document.\n     *\n     * If performing a vector search, you can set the `includeSimilarity` option to `true` to include the similarity score\n     * in the returned document as `$similarity: number`.\n     *\n     * See {@link FindOneOptions} for complete information about the options available for this operation.\n     *\n     * @example\n     * ```typescript\n     * const doc1 = await collection.findOne({\n     *   name: 'John Doe',\n     * });\n     *\n     * // Will be undefined\n     * console.log(doc1?.$similarity);\n     *\n     * const doc2 = await collection.findOne({}, {\n     *   sort: {\n     *     $vector: [.12, .52, .32],\n     *   },\n     *   includeSimilarity: true,\n     * });\n     *\n     * // Will be a number\n     * console.log(doc2?.$similarity);\n     * ```\n     *\n     * @remarks\n     * If you really need `limit` or `skip`, prefer using the {@link Collection.find} method instead.\n     *\n     * @param filter - A filter to select the document to find.\n     * @param options - The options for this operation.\n     *\n     * @returns The found document, or `null` if no document was found.\n     *\n     * @see StrictFilter\n     */\n    async findOne(filter, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            findOne: {\n                filter,\n                options: {\n                    includeSimilarity: options?.includeSimilarity,\n                }\n            },\n        };\n        if (options?.sort) {\n            command.findOne.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        if (options?.projection && Object.keys(options.projection).length > 0) {\n            command.findOne.projection = options.projection;\n        }\n        const resp = await this._httpClient.executeCommand(command, options);\n        return resp.data?.document;\n    }\n    /**\n     * Counts the number of documents in the collection, optionally with a filter.\n     *\n     * Takes in a `limit` option which dictates the maximum number of documents that may be present before a\n     * {@link TooManyDocumentsToCountError} is thrown. If the limit is higher than the highest limit accepted by the\n     * Data API, a {@link TooManyDocumentsToCountError} will be thrown anyway (i.e. `1000`).\n     *\n     * @example\n     * ```typescript\n     * await collection.insertMany([\n     *   { _id: '1', name: 'John Doe' },\n     *   { name: 'Jane Doe' },\n     * ]);\n     *\n     * const count = await collection.countDocuments({ name: 'John Doe' }, 1000);\n     * console.log(count); // 1\n     *\n     * // Will throw a TooManyDocumentsToCountError as it counts 1, but the limit is 0\n     * const count = await collection.countDocuments({ name: 'John Doe' }, 0);\n     * ```\n     *\n     * @remarks\n     * Count operations are expensive: for this reason, the best practice is to provide a reasonable `upperBound`\n     * according to the caller expectations. Moreover, indiscriminate usage of count operations for sizeable amounts\n     * of documents (i.e. in the thousands and more) is discouraged in favor of alternative application-specific\n     * solutions. Keep in mind that the Data API has a hard upper limit on the amount of documents it will count,\n     * and that an exception will be thrown by this method if this limit is encountered.\n     *\n     * @param filter - A filter to select the documents to count. If not provided, all documents will be counted.\n     * @param upperBound - The maximum number of documents to count.\n     * @param options - The options for this operation.\n     *\n     * @returns The number of counted documents, if below the provided limit\n     *\n     * @throws TooManyDocumentsToCountError - If the number of documents counted exceeds the provided limit.\n     *\n     * @see StrictFilter\n     */\n    async countDocuments(filter, upperBound, options) {\n        const command = {\n            countDocuments: { filter },\n        };\n        if (!upperBound) {\n            throw new Error('options.limit is required');\n        }\n        const resp = await this._httpClient.executeCommand(command, options);\n        if (resp.status?.moreData) {\n            throw new errors_1.TooManyDocumentsToCountError(resp.status.count, true);\n        }\n        if (resp.status?.count > upperBound) {\n            throw new errors_1.TooManyDocumentsToCountError(upperBound, false);\n        }\n        return resp.status?.count;\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection.\n     *\n     * This operation is faster than {@link Collection.countDocuments} but may not be as accurate, and doesn't\n     * accept a filter. Unlike the former, **It can handle more than 1000 documents.**\n     *\n     * @remarks\n     * This gives a very rough estimate of the number of documents in the collection. It is not guaranteed to be\n     * accurate, and should not be used as a source of truth for the number of documents in the collection.\n     *\n     * @param options - The options for this operation.\n     *\n     * @returns The estimated number of documents in the collection\n     */\n    async estimatedDocumentCount(options) {\n        const command = {\n            estimatedDocumentCount: {},\n        };\n        const resp = await this._httpClient.executeCommand(command, options);\n        return resp.status?.count;\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            findOneAndReplace: {\n                filter,\n                replacement,\n                options: {\n                    returnDocument: options.returnDocument,\n                    upsert: options.upsert,\n                },\n            },\n        };\n        if (options?.sort) {\n            command.findOneAndReplace.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        if (options?.projection && Object.keys(options.projection).length > 0) {\n            command.findOneAndReplace.projection = options.projection;\n        }\n        const resp = await this._httpClient.executeCommand(command, options);\n        const document = resp.data?.document || null;\n        return (options.includeResultMetadata)\n            ? {\n                value: document,\n                ok: 1,\n            }\n            : document;\n    }\n    async findOneAndDelete(filter, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            findOneAndDelete: { filter },\n        };\n        if (options?.sort) {\n            command.findOneAndDelete.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        if (options?.projection && Object.keys(options.projection).length > 0) {\n            command.findOneAndDelete.projection = options.projection;\n        }\n        const resp = await this._httpClient.executeCommand(command, options);\n        const document = resp.data?.document || null;\n        return (options?.includeResultMetadata)\n            ? {\n                value: document,\n                ok: 1,\n            }\n            : document;\n    }\n    async findOneAndUpdate(filter, update, options) {\n        options = coalesceVectorSpecialsIntoSort(options);\n        const command = {\n            findOneAndUpdate: {\n                filter,\n                update,\n                options: {\n                    returnDocument: options.returnDocument,\n                    upsert: options.upsert,\n                },\n            },\n        };\n        if (options?.sort) {\n            command.findOneAndUpdate.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n        if (options?.projection && Object.keys(options.projection).length > 0) {\n            command.findOneAndUpdate.projection = options.projection;\n        }\n        const resp = await this._httpClient.executeCommand(command, options);\n        const document = resp.data?.document || null;\n        return (options.includeResultMetadata)\n            ? {\n                value: document,\n                ok: 1,\n            }\n            : document;\n    }\n    /**\n     * Execute arbitrary operations sequentially/concurrently on the collection, such as insertions, updates, replaces,\n     * & deletions, **non-atomically**\n     *\n     * Each operation is treated as a separate, unrelated request to the server; it is not performed in a transaction.\n     *\n     * You can set the `ordered` option to `true` to stop the operations after the first error, otherwise all operations\n     * may be parallelized and processed in arbitrary order, improving, perhaps vastly, performance.\n     *\n     * *Note that the bulkWrite being ordered has nothing to do with if the operations themselves are ordered or not.*\n     *\n     * If an operational error occurs, the operation will throw a {@link BulkWriteError} containing the partial result.\n     *\n     * *If the exception is not due to a soft `2XX` error, e.g. a `5xx` error or network error, the operation will throw\n     * the underlying error.*\n     *\n     * *In case of an unordered request, if the error was a simple operational error, a `BulkWriteError` will be thrown\n     * after every operation has been attempted. If it was a `5xx` or similar, the error will be thrown immediately.*\n     *\n     * You can set the `parallel` option to control how many network requests are made in parallel on unordered\n     * insertions. Defaults to `8`.\n     *\n     * @example\n     * ```typescript\n     * try {\n     *   // Insert a document, then delete it\n     *   await collection.bulkWrite([\n     *     { insertOne: { document: { _id: '1', name: 'John Doe' } } },\n     *     { deleteOne: { filter: { name: 'John Doe' } } },\n     *   ]);\n     *\n     *   // Insert and delete operations, will cause a data race\n     *   await collection.bulkWrite([\n     *     { insertOne: { document: { _id: '1', name: 'John Doe' } } },\n     *     { deleteOne: { filter: { name: 'John Doe' } } },\n     *   ]);\n     * } catch (e) {\n     *   if (e instanceof BulkWriteError) {\n     *     console.log(e.insertedCount);\n     *     console.log(e.deletedCount);\n     *   }\n     * }\n     * ```\n     *\n     * @param operations - The operations to perform.\n     * @param options - The options for this operation.\n     *\n     * @returns The aggregated result of the operations.\n     *\n     * @throws BulkWriteError - If the operation fails\n     */\n    async bulkWrite(operations, options) {\n        const timeoutManager = this._httpClient.timeoutManager(options?.maxTimeMS);\n        return (options?.ordered)\n            ? await bulkWriteOrdered(this._httpClient, operations, timeoutManager)\n            : await bulkWriteUnordered(this._httpClient, operations, options?.concurrency ?? 8, timeoutManager);\n    }\n    /**\n     * Get the collection options, i.e. its configuration as read from the database.\n     *\n     * The method issues a request to the Data API each time it is invoked, without caching mechanisms;\n     * this ensures up-to-date information for usages such as real-time collection validation by the application.\n     *\n     * @example\n     * ```typescript\n     * const options = await collection.info();\n     * console.log(options.vector);\n     * ```\n     *\n     * @param options - The options for this operation.\n     *\n     * @returns The options that the collection was created with (i.e. the `vector` and `indexing` operations).\n     */\n    async options(options) {\n        const results = await this._db.listCollections({ nameOnly: false, maxTimeMS: options?.maxTimeMS });\n        const collection = results.find((c) => c.name === this.collectionName);\n        if (!collection) {\n            throw new errors_1.CollectionNotFoundError(this.namespace, this.collectionName);\n        }\n        return collection.options ?? {};\n    }\n    /**\n     * Drops the collection from the database, including all the documents it contains.\n     *\n     * Once the collection is dropped, this object is still technically \"usable\", but any further operations on it\n     * will fail at the Data API level; thus, it's the user's responsibility to make sure that the collection object\n     * is no longer used.\n     *\n     * @example\n     * ```typescript\n     * const collection = await db.createCollection('my_collection');\n     * await collection.drop();\n     * ```\n     *\n     * @param options - The options for this operation.\n     *\n     * @returns `true` if the collection was dropped okay.\n     *\n     * @remarks Use with caution. Wear your safety goggles. Don't say I didn't warn you.\n     */\n    async drop(options) {\n        return await this._db.dropCollection(this.collectionName, options);\n    }\n}\nexports.Collection = Collection;\nconst coalesceVectorSpecialsIntoSort = (options) => {\n    if (options?.vector && options?.vectorize) {\n        throw new Error('Cannot set both vectors and vectorize options');\n    }\n    if (options?.vector) {\n        if (options.sort) {\n            throw new Error('Can\\'t use both `sort` and `vector` options at once; if you need both, include a $vector key in the sort object');\n        }\n        return { ...options, sort: { $vector: options.vector } };\n    }\n    if (options?.vectorize) {\n        if (options.sort) {\n            throw new Error('Can\\'t use both `sort` and `vectorize` options at once; if you need both, include a $vectorize key in the sort object');\n        }\n        return { ...options, sort: { $vectorize: options.vectorize } };\n    }\n    return options;\n};\n// -- Insert Many ------------------------------------------------------------------------------------------\nconst insertManyOrdered = async (httpClient, documents, chunkSize, timeoutManager) => {\n    const insertedIds = [];\n    for (let i = 0, n = documents.length; i < n; i += chunkSize) {\n        const slice = documents.slice(i, i + chunkSize);\n        try {\n            const inserted = await insertMany(httpClient, slice, true, timeoutManager);\n            insertedIds.push(...inserted);\n        }\n        catch (e) {\n            if (!(e instanceof errors_1.DataAPIResponseError)) {\n                throw e;\n            }\n            const desc = e.detailedErrorDescriptors[0];\n            insertedIds.push(...desc.rawResponse.status?.insertedIds ?? []);\n            throw (0, errors_1.mkRespErrorFromResponse)(errors_1.InsertManyError, desc.command, desc.rawResponse, { insertedIds: insertedIds, insertedCount: insertedIds.length });\n        }\n    }\n    return insertedIds;\n};\nconst insertManyUnordered = async (httpClient, documents, concurrency, chunkSize, timeoutManager) => {\n    const insertedIds = [];\n    let masterIndex = 0;\n    const failCommands = [];\n    const failRaw = [];\n    const workers = Array.from({ length: concurrency }, async () => {\n        while (masterIndex < documents.length) {\n            const localI = masterIndex;\n            const endIdx = Math.min(localI + chunkSize, documents.length);\n            masterIndex += chunkSize;\n            if (localI >= endIdx) {\n                break;\n            }\n            const slice = documents.slice(localI, endIdx);\n            try {\n                const inserted = await insertMany(httpClient, slice, false, timeoutManager);\n                insertedIds.push(...inserted);\n            }\n            catch (e) {\n                if (!(e instanceof errors_1.DataAPIResponseError)) {\n                    throw e;\n                }\n                const desc = e.detailedErrorDescriptors[0];\n                const justInserted = desc.rawResponse.status?.insertedIds ?? [];\n                insertedIds.push(...justInserted);\n                failCommands.push(desc.command);\n                failRaw.push(desc.rawResponse);\n            }\n        }\n    });\n    await Promise.all(workers);\n    if (failCommands.length > 0) {\n        throw (0, errors_1.mkRespErrorFromResponses)(errors_1.InsertManyError, failCommands, failRaw, { insertedIds: insertedIds, insertedCount: insertedIds.length });\n    }\n    return insertedIds;\n};\nconst insertMany = async (httpClient, documents, ordered, timeoutManager) => {\n    const command = {\n        insertMany: {\n            documents,\n            options: { ordered },\n        }\n    };\n    const resp = await httpClient.executeCommand(command, { timeoutManager });\n    return resp.status?.insertedIds ?? [];\n};\n// -- Bulk Write ------------------------------------------------------------------------------------------\nconst bulkWriteOrdered = async (httpClient, operations, timeoutManager) => {\n    const results = new types_1.BulkWriteResult();\n    let i = 0;\n    try {\n        for (let n = operations.length; i < n; i++) {\n            await bulkWrite(httpClient, operations[i], results, i, timeoutManager);\n        }\n    }\n    catch (e) {\n        if (!(e instanceof errors_1.DataAPIResponseError)) {\n            throw e;\n        }\n        const desc = e.detailedErrorDescriptors[0];\n        if (desc.rawResponse.status) {\n            addToBulkWriteResult(results, desc.rawResponse.status, i);\n        }\n        throw (0, errors_1.mkRespErrorFromResponse)(errors_1.BulkWriteError, desc.command, desc.rawResponse, results);\n    }\n    return results;\n};\nconst bulkWriteUnordered = async (httpClient, operations, concurrency, timeoutManager) => {\n    const results = new types_1.BulkWriteResult();\n    let masterIndex = 0;\n    const failCommands = [];\n    const failRaw = [];\n    const workers = Array.from({ length: concurrency }, async () => {\n        while (masterIndex < operations.length) {\n            const localI = masterIndex;\n            masterIndex++;\n            try {\n                await bulkWrite(httpClient, operations[localI], results, localI, timeoutManager);\n            }\n            catch (e) {\n                if (!(e instanceof errors_1.DataAPIResponseError)) {\n                    throw e;\n                }\n                const desc = e.detailedErrorDescriptors[0];\n                if (desc.rawResponse.status) {\n                    addToBulkWriteResult(results, desc.rawResponse.status, localI);\n                }\n                failCommands.push(desc.command);\n                failRaw.push(desc.rawResponse);\n            }\n        }\n    });\n    await Promise.all(workers);\n    if (failCommands.length > 0) {\n        throw (0, errors_1.mkRespErrorFromResponses)(errors_1.BulkWriteError, failCommands, failRaw, results);\n    }\n    return results;\n};\nconst bulkWrite = async (httpClient, operation, results, i, timeoutManager) => {\n    const command = buildBulkWriteCommand(operation);\n    const resp = await httpClient.executeCommand(command, { timeoutManager });\n    addToBulkWriteResult(results, resp.status, i);\n};\nconst buildBulkWriteCommand = (operation) => {\n    switch (true) {\n        case 'insertOne' in operation:\n            return { insertOne: { document: operation.insertOne.document } };\n        case 'updateOne' in operation:\n            return { updateOne: { filter: operation.updateOne.filter, update: operation.updateOne.update, options: { upsert: operation.updateOne.upsert ?? false } } };\n        case 'updateMany' in operation:\n            return { updateMany: { filter: operation.updateMany.filter, update: operation.updateMany.update, options: { upsert: operation.updateMany.upsert ?? false } } };\n        case 'replaceOne' in operation:\n            return { findOneAndReplace: { filter: operation.replaceOne.filter, replacement: operation.replaceOne.replacement, options: { upsert: operation.replaceOne.upsert ?? false } } };\n        case 'deleteOne' in operation:\n            return { deleteOne: { filter: operation.deleteOne.filter } };\n        case 'deleteMany' in operation:\n            return { deleteMany: { filter: operation.deleteMany.filter } };\n        default:\n            throw new Error(`Unknown bulk write operation: ${JSON.stringify(operation)}`);\n    }\n};\nconst addToBulkWriteResult = (result, resp, i) => {\n    const asMutable = result;\n    asMutable.insertedCount += resp.insertedIds?.length ?? 0;\n    asMutable.modifiedCount += resp.modifiedCount ?? 0;\n    asMutable.matchedCount += resp.matchedCount ?? 0;\n    asMutable.deletedCount += resp.deletedCount ?? 0;\n    if (resp.upsertedId) {\n        asMutable.upsertedCount++;\n        asMutable.upsertedIds[i] = resp.upsertedId;\n    }\n    asMutable.getRawResponse().push(resp);\n};\n// -- Distinct --------------------------------------------------------------------------------------------\nconst assertPathSafe4Distinct = (path) => {\n    const split = path.split('.');\n    if (split.some(p => !p)) {\n        throw new Error('Path cannot contain empty segments');\n    }\n};\nconst pullSafeProjection4Distinct = (path) => {\n    return (0, utils_1.takeWhile)(path.split('.'), p => isNaN(p)).join('.');\n};\nconst mkDistinctPathExtractor = (path) => {\n    const values = [];\n    const extract = (path, index, value) => {\n        if (value === undefined) {\n            return;\n        }\n        if (index === path.length) {\n            if (Array.isArray(value)) {\n                values.push(...value);\n            }\n            else {\n                values.push(value);\n            }\n            return;\n        }\n        const prop = path[index];\n        if (Array.isArray(value)) {\n            const asInt = parseInt(prop, 10);\n            if (isNaN(asInt)) {\n                for (let i = 0, n = value.length; i < n; i++) {\n                    extract(path, index, value[i]);\n                }\n            }\n            else if (asInt < value.length) {\n                extract(path, index + 1, value[asInt]);\n            }\n        }\n        else if (value && typeof value === 'object') {\n            extract(path, index + 1, value[prop]);\n        }\n    };\n    return (doc) => {\n        extract(path.split('.'), 0, doc);\n        return values;\n    };\n};\n//# sourceMappingURL=collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/collection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/cursor.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/cursor.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindCursor = void 0;\nconst data_api_1 = __webpack_require__(/*! ../data-api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js\");\nconst utils_1 = __webpack_require__(/*! ../data-api/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\");\n/**\n * Lazily iterates over the document results of a query.\n *\n * **Shouldn't be directly instantiated, but rather created via {@link Collection.find}**.\n *\n * Typed as `FindCursor<T, TRaw>` where `T` is the type of the mapped documents and `TRaw` is the type of the raw\n * documents before any mapping. If no mapping function is provided, `T` and `TRaw` will be the same type. Mapping\n * is done using the {@link FindCursor.map} method.\n *\n * @example\n * ```typescript\n * interface Person {\n *   firstName: string;\n *   lastName: string;\n *   age: number;\n * }\n *\n * const collection = db.collection<Person>('people');\n * let cursor = collection.find().filter({ firstName: 'John' });\n *\n * // Lazily iterate all documents matching the filter\n * for await (const doc of cursor) {\n *   console.log(doc);\n * }\n *\n * // Rewind the cursor to be able to iterate again\n * cursor.rewind();\n *\n * // Get all documents matching the filter as an array\n * const docs = await cursor.toArray();\n *\n * cursor.rewind();\n *\n * // Set options & map as needed\n * cursor: Cursor<string> = cursor\n *   .project<Omit<Person, 'age'>>({ firstName: 1, lastName: 1 })\n *   .map(doc => doc.firstName + ' ' + doc.lastName);\n *\n * // Get next document from cursor\n * const doc = await cursor.next();\n * ```\n *\n * @public\n */\nclass FindCursor {\n    /**\n     * Should not be instantiated directly.\n     *\n     * @internal\n     */\n    constructor(namespace, httpClient, filter, options) {\n        Object.defineProperty(this, \"_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_httpClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_filter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_mapping\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_buffer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"_nextPageState\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0 /* CursorStatus.Uninitialized */\n        });\n        this._namespace = namespace;\n        this._httpClient = httpClient;\n        this._filter = filter;\n        this._options = { ...options };\n        if (options?.sort) {\n            this._options.sort = (0, utils_1.normalizeSort)(options.sort);\n        }\n    }\n    /**\n     * The namespace (aka keyspace) of the collection that's being iterated over.\n     *\n     * @returns The namespace of the collection that's being iterated over.\n     */\n    get namespace() {\n        return this._namespace;\n    }\n    /**\n     * Whether the cursor is closed, whether it be manually, or because the cursor is exhausted.\n     *\n     * @returns Whether or not the cursor is closed.\n     */\n    get closed() {\n        return this._state === 2 /* CursorStatus.Closed */;\n    }\n    /**\n     * Returns the number of documents in the buffer. If the cursor is unused, it'll return 0.\n     *\n     * @returns The number of documents in the buffer.\n     */\n    bufferedCount() {\n        return this._buffer.length;\n    }\n    /**\n     * Sets the filter for the cursor, overwriting any previous filter. Note that this filter is weakly typed. Prefer\n     * to pass in a filter through the constructor instead, if strongly typed filters are desired.\n     *\n     * **NB. This method acts on the original documents, before any mapping.**\n     *\n     * *This method mutates the cursor, and the cursor MUST be uninitialized when calling this method.*\n     *\n     * @param filter - A filter to select which documents to return.\n     *\n     * @returns The cursor.\n     */\n    filter(filter) {\n        this._assertUninitialized();\n        this._filter = filter;\n        return this;\n    }\n    /**\n     * Sets the sort criteria for prioritizing documents. Note that this sort is weakly typed. Prefer to pass in a sort\n     * through the constructor instead, if strongly typed sorts are desired.\n     *\n     * **NB. This method acts on the original documents, before any mapping.**\n     *\n     * *This method mutates the cursor, and the cursor MUST be uninitialized when calling this method.*\n     *\n     * @param sort - The sort order to prioritize which documents are returned.\n     *\n     * @returns The cursor.\n     */\n    sort(sort) {\n        this._assertUninitialized();\n        this._options.sort = (0, utils_1.normalizeSort)(sort);\n        return this;\n    }\n    /**\n     * Sets the maximum number of documents to return.\n     *\n     * If `limit == 0`, there will be no limit on the number of documents returned.\n     *\n     * *This method mutates the cursor, and the cursor MUST be uninitialized when calling this method.*\n     *\n     * @param limit - The limit for this cursor.\n     *\n     * @returns The cursor.\n     */\n    limit(limit) {\n        this._assertUninitialized();\n        this._options.limit = limit || Infinity;\n        return this;\n    }\n    /**\n     * Sets the number of documents to skip before returning.\n     *\n     * *This method mutates the cursor, and the cursor MUST be uninitialized when calling this method.*\n     *\n     * @param skip - The skip for the cursor query.\n     *\n     * @returns The cursor.\n     */\n    skip(skip) {\n        this._assertUninitialized();\n        this._options.skip = skip;\n        return this;\n    }\n    /**\n     * Sets the projection for the cursor, overwriting any previous projection.\n     *\n     * **NB. This method acts on the original documents, before any mapping.**\n     *\n     * *This method mutates the cursor, and the cursor MUST be uninitialized when calling this method.*\n     *\n     * **To properly type this method, you should provide a type argument for `T` to specify the shape of the projected\n     * documents, *with mapping applied*.**\n     *\n     * @example\n     * ```typescript\n     * const cursor = collection.find({ name: 'John' });\n     *\n     * // T is `any` because the type is not specified\n     * const rawProjected = cursor.project({ _id: 0, name: 1 });\n     *\n     * // T is { name: string }\n     * const projected = cursor.project<{ name: string }>({ _id: 0, name: 1 });\n     *\n     * // You can also chain instead of using intermediate variables\n     * const fluentlyProjected = collection\n     *   .find({ name: 'John' })\n     *   .project<{ name: string }>({ _id: 0, name: 1 });\n     *\n     * // It's important to keep mapping in mind\n     * const mapProjected = collection\n     *   .find({ name: 'John' })\n     *   .map(doc => doc.name);\n     *   .project<string>({ _id: 0, name: 1 });\n     * ```\n     *\n     * @param projection - Specifies which fields should be included/excluded in the returned documents.\n     *\n     * @returns The cursor.\n     */\n    project(projection) {\n        this._assertUninitialized();\n        this._options.projection = projection;\n        return this;\n    }\n    /**\n     * Sets whether similarity scores should be included in the cursor's results.\n     *\n     * *This method mutates the cursor, and the cursor MUST be uninitialized when calling this method.*\n     *\n     * @param includeSimilarity - Whether similarity scores should be included.\n     *\n     * @returns The cursor.\n     */\n    includeSimilarity(includeSimilarity = true) {\n        this._assertUninitialized();\n        this._options.includeSimilarity = includeSimilarity;\n        return this;\n    }\n    /**\n     * Map all documents using the provided mapping function. Previous mapping functions will be composed with the new\n     * mapping function (new ∘ old).\n     *\n     * **NB. Unlike Mongo, it is okay to map a cursor to `null`.**\n     *\n     * *This method mutates the cursor, and the cursor MUST be uninitialized when calling this method.*\n     *\n     * @param mapping - The mapping function to apply to all documents.\n     *\n     * @returns The cursor.\n     */\n    map(mapping) {\n        this._assertUninitialized();\n        if (this._mapping) {\n            const oldMapping = this._mapping;\n            this._mapping = (doc) => mapping(oldMapping(doc));\n        }\n        else {\n            this._mapping = mapping;\n        }\n        return this;\n    }\n    /**\n     * Returns a new, uninitialized cursor with the same filter and options set on this cursor. No state is shared between\n     * the two cursors; only the configuration.\n     *\n     * Like mongo, mapping functions are *not* cloned.\n     *\n     * @example\n     * ```typescript\n     * const cursor = collection.find({ name: 'John' });\n     * ```\n     *\n     * @returns A behavioral clone of this cursor.\n     */\n    clone() {\n        return new FindCursor(this._namespace, this._httpClient, this._filter, this._options);\n    }\n    /**\n     * Pulls up to `max` documents from the buffer, or all documents if `max` is not provided.\n     *\n     * **Note that this actually consumes the buffer; it doesn't just peek at it.**\n     *\n     * @param max - The maximum number of documents to read from the buffer. If not provided, all documents will be read.\n     *\n     * @returns The documents read from the buffer.\n     */\n    readBufferedDocuments(max) {\n        const toRead = Math.min(max ?? this._buffer.length, this._buffer.length);\n        return this._buffer.splice(0, toRead);\n    }\n    /**\n     * Rewinds the cursor to its uninitialized state, clearing the buffer and any state. Any configuration set on the\n     * cursor will remain, but iteration will start from the beginning, sending new queries to the server, even if the\n     * resultant data was already fetched by this cursor.\n     */\n    rewind() {\n        this._buffer.length = 0;\n        this._nextPageState = undefined;\n        this._state = 0 /* CursorStatus.Uninitialized */;\n    }\n    /**\n     * Fetches the next document from the cursor. Returns `null` if there are no more documents to fetch.\n     *\n     * If the cursor is uninitialized, it will be initialized. If the cursor is closed, this method will return `null`.\n     *\n     * @returns The next document, or `null` if there are no more documents.\n     */\n    async next() {\n        return this._next(false);\n    }\n    /**\n     * Tests if there is a next document in the cursor.\n     *\n     * If the cursor is uninitialized, it will be initialized. If the cursor is closed, this method will return `false`.\n     *\n     * @returns Whether or not there is a next document.\n     */\n    async hasNext() {\n        if (this._buffer.length > 0) {\n            return true;\n        }\n        const doc = await this._next(true);\n        if (doc !== null) {\n            this._buffer.push(doc);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * An async iterator that lazily iterates over all documents in the cursor.\n     *\n     * **Note that there'll only be partial results if the cursor has been previously iterated over. You may use {@link FindCursor.rewind}\n     * to reset the cursor.**\n     *\n     * If the cursor is uninitialized, it will be initialized. If the cursor is closed, this method will return immediately.\n     *\n     * It will close the cursor when iteration is complete, even if it was broken early.\n     *\n     * @example\n     * ```typescript\n     * for await (const doc of cursor) {\n     *   console.log(doc);\n     * }\n     * ```\n     */\n    async *[Symbol.asyncIterator]() {\n        try {\n            while (true) {\n                const doc = await this.next();\n                if (doc === null) {\n                    break;\n                }\n                yield doc;\n            }\n        }\n        finally {\n            this.close();\n        }\n    }\n    /**\n     * Iterates over all documents in the cursor, calling the provided consumer for each document.\n     *\n     * If the consumer returns `false`, iteration will stop.\n     *\n     * Note that there'll only be partial results if the cursor has been previously iterated over. You may use {@link FindCursor.rewind}\n     * to reset the cursor.\n     *\n     * If the cursor is uninitialized, it will be initialized. If the cursor is closed, this method will return immediately.\n     *\n     * It will close the cursor when iteration is complete, even if it was stopped early.\n     *\n     * @param consumer - The consumer to call for each document.\n     *\n     * @returns A promise that resolves when iteration is complete.\n     *\n     * @deprecated - Prefer the `for await (const doc of cursor) { ... }` syntax instead.\n     */\n    async forEach(consumer) {\n        for await (const doc of this) {\n            if (consumer(doc) === false) {\n                break;\n            }\n        }\n    }\n    /**\n     * Returns an array of all matching documents in the cursor. The user should ensure that there is enough memory to\n     * store all documents in the cursor.\n     *\n     * Note that there'll only be partial results if the cursor has been previously iterated over. You may use {@link FindCursor.rewind}\n     * to reset the cursor.\n     *\n     * If the cursor is uninitialized, it will be initialized. If the cursor is closed, this method will return an empty array.\n     *\n     * @returns An array of all documents in the cursor.\n     */\n    async toArray() {\n        const docs = [];\n        for await (const doc of this) {\n            docs.push(doc);\n        }\n        return docs;\n    }\n    /**\n     * Closes the cursor. The cursor will be unusable after this method is called, or until {@link FindCursor.rewind} is called.\n     */\n    close() {\n        this._state = 2 /* CursorStatus.Closed */;\n        this._buffer = [];\n    }\n    _assertUninitialized() {\n        if (this._state !== 0 /* CursorStatus.Uninitialized */) {\n            throw new data_api_1.CursorIsStartedError('Cursor is already initialized/in use; cannot perform options modification. Rewind or clone the cursor.');\n        }\n    }\n    async _next(raw) {\n        if (this._state === 2 /* CursorStatus.Closed */) {\n            return null;\n        }\n        do {\n            if (this._buffer.length > 0) {\n                const doc = this._buffer.shift();\n                try {\n                    return (!raw && this._mapping)\n                        ? this._mapping(doc)\n                        : doc;\n                }\n                catch (err) {\n                    this.close();\n                    throw err;\n                }\n            }\n            if (this._nextPageState === null) {\n                return null;\n            }\n            try {\n                await this._getMore();\n            }\n            catch (err) {\n                this.close();\n                throw err;\n            }\n        } while (this._buffer.length !== 0);\n        return null;\n    }\n    async _getMore() {\n        this._state = 1 /* CursorStatus.Initialized */;\n        const options = {};\n        if (this._options.limit !== Infinity) {\n            options.limit = this._options.limit;\n        }\n        if (this._nextPageState) {\n            options.pagingState = this._nextPageState;\n        }\n        if (this._options.skip) {\n            options.skip = this._options.skip;\n        }\n        if (this._options.includeSimilarity) {\n            options.includeSimilarity = this._options.includeSimilarity;\n        }\n        const command = {\n            find: { filter: this._filter }\n        };\n        if (this._options.sort) {\n            command.find.sort = this._options.sort;\n        }\n        if (this._options.projection) {\n            command.find.projection = this._options.projection;\n        }\n        if (Object.keys(options).length > 0) {\n            command.find.options = options;\n        }\n        const resp = await this._httpClient.executeCommand(command, {});\n        this._nextPageState = resp.data.nextPageState || null;\n        this._buffer = resp.data.documents;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceMappingURL=cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/cursor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/db.js":
/*!****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/db.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Db_defaultOpts;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateDbOpts = exports.mkDb = exports.Db = void 0;\nconst data_api_1 = __webpack_require__(/*! ../data-api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js\");\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nconst astra_db_admin_1 = __webpack_require__(/*! ../devops/astra-db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-db-admin.js\");\nconst utils_1 = __webpack_require__(/*! ../data-api/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\");\n/**\n * Represents an interface to some Astra database instance. This is the entrypoint for database-level DML, such as\n * creating/deleting collections, connecting to collections, and executing arbitrary commands.\n *\n * **Shouldn't be instantiated directly; use {@link DataAPIClient.db} to obtain an instance of this class.**\n *\n * Note that creating an instance of a `Db` doesn't trigger actual database creation; the database must have already\n * existed beforehand. If you need to create a new database, use the {@link AstraAdmin} class.\n *\n * Db spawning methods let you pass in the default namespace for the database, which is used for all subsequent db\n * operations in that object, but each method lets you override the namespace if necessary in its options.\n *\n * @example\n * ```typescript\n * const client = new DataAPIClient('AstraCS:...');\n *\n * // Connect to a database using a direct endpoint\n * const db1 = client.db('https://<db_id>-<region>.apps.astra.datastax.com');\n *\n * // Overrides default options from the DataAPIClient\n * const db2 = client.db('https://<db_id>-<region>.apps.astra.datastax.com', {\n *   namespace: 'my_namespace',\n *   useHttp2: false,\n * });\n *\n * // Lets you connect using a database ID and region\n * const db3 = client.db('a6a1d8d6-31bc-4af8-be57-377566f345bf', 'us-east1');\n * ```\n *\n * @see DataAPIClient.db\n * @see AstraAdmin.db\n *\n * @public\n */\nclass Db {\n    /**\n     * Use {@link DataAPIClient.db} to obtain an instance of this class.\n     *\n     * @internal\n     */\n    constructor(endpoint, options) {\n        _Db_defaultOpts.set(this, void 0);\n        Object.defineProperty(this, \"_httpClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The default namespace to use for all operations in this database, unless overridden in a method call.\n         *\n         * @example\n         * ```typescript\n         *\n         * // Uses 'default_keyspace' as the default namespace for all future db spawns\n         * const client1 = new DataAPIClient('*TOKEN*');\n         *\n         * // Overrides the default namespace for all future db spawns\n         * const client2 = new DataAPIClient('*TOKEN*', {\n         *   dbOptions: { namespace: 'my_namespace' }\n         * });\n         *\n         * // Created with 'default_keyspace' as the default namespace\n         * const db1 = client1.db('*ENDPOINT*');\n         *\n         * // Created with 'my_namespace' as the default namespace\n         * const db2 = client1.db('*ENDPOINT*', {\n         *   namespace: 'my_namespace'\n         * });\n         *\n         * // Uses 'default_keyspace'\n         * const coll1 = db1.collection('users');\n         *\n         * // Uses 'my_namespace'\n         * const coll2 = db1.collection('users', {\n         *   namespace: 'my_namespace'\n         * });\n         * ```\n         */\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const dbOpts = options.dbOptions;\n        Object.defineProperty(this, 'namespace', {\n            value: dbOpts.namespace ?? api_1.DEFAULT_NAMESPACE,\n            writable: false,\n        });\n        __classPrivateFieldSet(this, _Db_defaultOpts, options, \"f\");\n        Object.defineProperty(this, '_httpClient', {\n            value: new api_1.DataAPIHttpClient({\n                baseUrl: endpoint,\n                applicationToken: dbOpts.token,\n                baseApiPath: dbOpts?.dataApiPath || api_1.DEFAULT_DATA_API_PATH,\n                emitter: options.emitter,\n                monitorCommands: dbOpts.monitorCommands,\n                fetchCtx: options.fetchCtx,\n                namespace: this.namespace,\n            }),\n            enumerable: false,\n        });\n        Object.defineProperty(this, '_id', {\n            value: (0, utils_1.extractDbIdFromUrl)(endpoint),\n            enumerable: false,\n        });\n    }\n    /**\n     * The ID of the database, if it's an Astra database. If it's not an Astra database, this will throw an error.\n     *\n     * @throws Error - if the database is not an Astra database.\n     */\n    get id() {\n        if (!this._id) {\n            throw new Error('Non-Astra databases do not have an appropriate ID');\n        }\n        return this._id;\n    }\n    /**\n     * Spawns a new {@link AstraDbAdmin} instance for this database, used for performing administrative operations\n     * on the database, such as managing namespaces, or getting database information.\n     *\n     * **NB. Only available for Astra databases.**\n     *\n     * The given options will override any default options set when creating the {@link DataAPIClient} through\n     * a deep merge (i.e. unset properties in the options object will just default to the default options).\n     *\n     * @example\n     * ```typescript\n     * const admin1 = db.admin();\n     * const admin2 = db.admin({ adminToken: '<stronger-token>' });\n     *\n     * const namespaces = await admin1.listNamespaces();\n     * console.log(namespaces);\n     * ```\n     *\n     * @param options - Any options to override the default options set when creating the {@link DataAPIClient}.\n     *\n     * @returns A new {@link AstraDbAdmin} instance for this database instance.\n     *\n     * @throws Error - if the database is not an Astra database.\n     */\n    admin(options) {\n        if (!this._id) {\n            throw new Error('Admin operations are only supported on Astra databases');\n        }\n        return (0, astra_db_admin_1.mkDbAdmin)(this, __classPrivateFieldGet(this, _Db_defaultOpts, \"f\"), options);\n    }\n    /**\n     * Fetches information about the database, such as the database name, region, and other metadata.\n     *\n     * **NB. Only available for Astra databases.**\n     *\n     * For the full, complete, information, see {@link AstraDbAdmin.info}.\n     *\n     * The method issues a request to the DevOps API each time it is invoked, without caching mechanisms;\n     * this ensures up-to-date information for usages such as real-time collection validation by the application.\n     *\n     * @example\n     * ```typescript\n     * const info = await db.info();\n     * console.log(info.name);\n     * ```\n     *\n     * @returns A promise that resolves to the database information.\n     *\n     * @throws Error - if the database is not an Astra database.\n     */\n    async info(options) {\n        return await this.admin().info(options).then(i => i.info);\n    }\n    /**\n     * Establishes a reference to a collection in the database. This method does not perform any I/O.\n     *\n     * **NB. This method does not validate the existence of the collection—it simply creates a reference.**\n     *\n     * **Unlike the MongoDB driver, this method does not create a collection if it doesn't exist.**\n     *\n     * Use {@link Db.createCollection} to create a new collection instead.\n     *\n     * Typed as `Collection<SomeDoc>` by default, but you can specify a schema type to get a typed collection. If left\n     * as `SomeDoc`, the collection will be untyped.\n     *\n     * You can also specify a namespace in the options parameter, which will override the default namespace for this database.\n     *\n     * @example\n     * ```typescript\n     * interface User {\n     *   name: string,\n     *   age?: number,\n     * }\n     *\n     * const users1 = db.collection<User>(\"users\");\n     * users1.insertOne({ name: \"John\" });\n     *\n     * // Untyped collection from different namespace\n     * const users2 = db.collection(\"users\", {\n     *   namespace: \"my_namespace\"\n     * });\n     * users2.insertOne({ nam3: \"John\" });\n     * ```\n     *\n     * @param name - The name of the collection.\n     * @param options - Options for the connection.\n     *\n     * @returns A new, unvalidated, reference to the collection.\n     *\n     * @see SomeDoc\n     * @see VectorDoc\n     */\n    collection(name, options) {\n        return new data_api_1.Collection(this, this._httpClient, name, options?.namespace);\n    }\n    /**\n     * Establishes references to all the collections in the working/given namespace.\n     *\n     * You can specify a namespace in the options parameter, which will override the default namespace for this `Db` instance.\n     *\n     * @example\n     * ```typescript\n     * // Uses db's default namespace\n     * const collections1 = await db.collections();\n     * console.log(collections1); // [Collection<SomeDoc>, Collection<SomeDoc>]\n     *\n     * // Overrides db's default namespace\n     * const collections2 = await db.collections({ namespace: 'my_namespace' });\n     * console.log(collections2); // [Collection<SomeDoc>]\n     * ```\n     *\n     * @param options - Options for this operation.\n     *\n     * @returns A promise that resolves to an array of references to the working Db's collections.\n     */\n    async collections(options) {\n        const collections = await this.listCollections({\n            namespace: options?.namespace,\n            maxTimeMS: options?.maxTimeMS,\n            nameOnly: true,\n        });\n        return collections.map(c => this.collection(c, options));\n    }\n    /**\n     * Creates a new collection in the database, and establishes a reference to it.\n     *\n     * **NB. You are limited in the amount of collections you can create, so be wary when using this command.**\n     *\n     * This is a blocking command which performs actual I/O unlike {@link Db.collection}, which simply creates an\n     * unvalidated reference to a collection.\n     *\n     * If `checkExists: false`, creation is idempotent, so if the collection already exists with the same options,\n     * this method will not throw an error. If the options mismatch, it will throw a {@link DataAPIResponseError}.\n     *\n     * Typed as `Collection<SomeDoc>` by default, but you can specify a schema type to get a typed collection. If left\n     * as `SomeDoc`, the collection will be untyped.\n     *\n     * *If vector options are not specified, the collection will not support vector search.*\n     *\n     * You can also specify a namespace in the options parameter, which will override the default namespace for this database.\n     *\n     * See {@link CreateCollectionOptions} for *much* more information on the options available.\n     *\n     * @example\n     * ```typescript\n     * interface User {\n     *   name: string,\n     *   age?: number,\n     * }\n     *\n     * const users = await db.createCollection<User>(\"users\");\n     * users.insertOne({ name: \"John\" });\n     *\n     * // Untyped collection with custom options in a different namespace\n     * const users2 = await db.createCollection(\"users\", {\n     *   namespace: \"my_namespace\",\n     *   defaultId: {\n     *     type: \"objectId\",\n     *   },\n     *   checkExists: false,\n     * });\n     * ```\n     *\n     * @param collectionName - The name of the collection to create.\n     * @param options - Options for the collection.\n     *\n     * @returns A promised reference to the newly created collection.\n     *\n     * @throws CollectionAlreadyExistsError - if the collection already exists and `checkExists` is `true` or unset.\n     *\n     * @see SomeDoc\n     * @see VectorDoc\n     */\n    async createCollection(collectionName, options) {\n        const command = {\n            createCollection: {\n                name: collectionName,\n                options: {\n                    defaultId: options?.defaultId,\n                    indexing: options?.indexing,\n                    vector: options?.vector,\n                },\n            },\n        };\n        const timeoutManager = this._httpClient.timeoutManager(options?.maxTimeMS);\n        const namespace = options?.namespace ?? this.namespace;\n        if (options?.checkExists !== false) {\n            const collections = await this.listCollections({ namespace, maxTimeMS: timeoutManager.msRemaining });\n            if (collections.some(c => c.name === collectionName)) {\n                throw new data_api_1.CollectionAlreadyExistsError(options?.namespace ?? this.namespace, collectionName);\n            }\n        }\n        await this._httpClient.executeCommand(command, { namespace, timeoutManager });\n        return this.collection(collectionName, options);\n    }\n    /**\n     * Drops a collection from the database, including all the contained documents.\n     *\n     * You can also specify a namespace in the options parameter, which will override the default namespace for this database.\n     *\n     * @example\n     * ```typescript\n     * // Uses db's default namespace\n     * const success1 = await db.dropCollection(\"users\");\n     * console.log(success1); // true\n     *\n     * // Overrides db's default namespace\n     * const success2 = await db.dropCollection(\"users\", {\n     *   namespace: \"my_namespace\"\n     * });\n     * console.log(success2); // true\n     * ```\n     *\n     * @param name - The name of the collection to drop.\n     * @param options - Options for this operation.\n     *\n     * @returns A promise that resolves to `true` if the collection was dropped successfully.\n     *\n     * @remarks Use with caution. Have steel-toe boots on. Don't say I didn't warn you.\n     */\n    async dropCollection(name, options) {\n        const command = {\n            deleteCollection: { name },\n        };\n        const resp = await this._httpClient.executeCommand(command, options);\n        return resp.status?.ok === 1 && !resp.errors;\n    }\n    async listCollections(options) {\n        const command = {\n            findCollections: {\n                options: {\n                    // Is 'nameOnly' instead of 'explain' for Mongo-compatibility reasons\n                    explain: options?.nameOnly !== true,\n                },\n            },\n        };\n        const resp = await this._httpClient.executeCommand(command, options);\n        return resp.status.collections;\n    }\n    /**\n     * Send a POST request to the Data API for this database with an arbitrary, caller-provided payload.\n     *\n     * You can specify a collection to target in the options parameter, thereby allowing you to perform\n     * arbitrary collection-level operations as well.\n     *\n     * You're also able to specify a namespace in the options parameter, which will override the default namespace\n     * for this database.\n     *\n     * If no collection is specified, the command will be executed at the database level.\n     *\n     * @example\n     * ```typescript\n     * const colls = await db.command({ findCollections: {} });\n     * console.log(colls); // { status: { collections: [] } }\n     *\n     * const users = await db.command({ findOne: {} }, { collection: 'users' });\n     * console.log(users); // { data: { document: null } }\n     * ```\n     *\n     * @param command - The command to send to the Data API.\n     * @param options - Options for this operation.\n     *\n     * @returns A promise that resolves to the raw response from the Data API.\n     */\n    async command(command, options) {\n        return await this._httpClient.executeCommand(command, options);\n    }\n}\nexports.Db = Db;\n_Db_defaultOpts = new WeakMap();\n/**\n * @internal\n */\nfunction mkDb(rootOpts, endpointOrId, regionOrOptions, maybeOptions) {\n    const options = (typeof regionOrOptions === 'string')\n        ? maybeOptions\n        : regionOrOptions;\n    validateDbOpts(options);\n    const endpoint = (typeof regionOrOptions === 'string')\n        ? 'https://' + endpointOrId + '-' + regionOrOptions + '.apps.astra.datastax.com'\n        : endpointOrId;\n    return new Db(endpoint, {\n        ...rootOpts,\n        dbOptions: {\n            ...rootOpts?.dbOptions,\n            ...options,\n        },\n    });\n}\nexports.mkDb = mkDb;\n/**\n * @internal\n */\nfunction validateDbOpts(opts) {\n    (0, utils_1.validateOption)('db options', opts, 'object');\n    if (!opts) {\n        return;\n    }\n    (0, utils_1.validateOption)('namespace option', opts.namespace, 'string', (namespace) => {\n        if (!namespace.match(/^\\w{1,48}$/)) {\n            throw new Error('Invalid namespace option; expected a string of 1-48 alphanumeric characters');\n        }\n    });\n    (0, utils_1.validateOption)('monitorCommands option', opts.monitorCommands, 'boolean');\n    (0, utils_1.validateOption)('token option', opts.token, 'string');\n    (0, utils_1.validateOption)('dataApiPath option', opts.dataApiPath, 'string');\n}\nexports.validateDbOpts = validateDbOpts;\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvZGIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxZQUFZLEdBQUcsVUFBVTtBQUNsRCxtQkFBbUIsbUJBQU8sQ0FBQyxzRkFBYTtBQUN4QyxjQUFjLG1CQUFPLENBQUMsNEVBQVE7QUFDOUIseUJBQXlCLG1CQUFPLENBQUMsMEdBQTBCO0FBQzNELGdCQUFnQixtQkFBTyxDQUFDLDRGQUFtQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxLQUFLLHdCQUF3QjtBQUN0RTtBQUNBLHNGQUFzRjtBQUN0RixzRUFBc0Usa0JBQWtCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0YscUJBQXFCO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0NBQWdDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRkFBMkYsb0JBQW9CO0FBQy9HO0FBQ0EsdUJBQXVCLG9CQUFvQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELHdCQUF3QjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDJCQUEyQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLG1EQUFtRCwyQkFBMkI7QUFDOUUsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0Usb0JBQW9CO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRiwyQkFBMkI7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0JBQStCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixjQUFjO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxrREFBa0Q7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsMkJBQTJCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsTUFBTTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxxQkFBcUI7QUFDN0QsMkJBQTJCLEtBQUssVUFBVTtBQUMxQztBQUNBLHdDQUF3QyxhQUFhLElBQUkscUJBQXFCO0FBQzlFLDJCQUEyQixLQUFLLFFBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsS0FBSztBQUN2Qyx1REFBdUQ7QUFDdkQ7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kYXRhLWFwaS9kYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9EYl9kZWZhdWx0T3B0cztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVEYk9wdHMgPSBleHBvcnRzLm1rRGIgPSBleHBvcnRzLkRiID0gdm9pZCAwO1xuY29uc3QgZGF0YV9hcGlfMSA9IHJlcXVpcmUoXCIuLi9kYXRhLWFwaVwiKTtcbmNvbnN0IGFwaV8xID0gcmVxdWlyZShcIi4uL2FwaVwiKTtcbmNvbnN0IGFzdHJhX2RiX2FkbWluXzEgPSByZXF1aXJlKFwiLi4vZGV2b3BzL2FzdHJhLWRiLWFkbWluXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi9kYXRhLWFwaS91dGlsc1wiKTtcbi8qKlxuICogUmVwcmVzZW50cyBhbiBpbnRlcmZhY2UgdG8gc29tZSBBc3RyYSBkYXRhYmFzZSBpbnN0YW5jZS4gVGhpcyBpcyB0aGUgZW50cnlwb2ludCBmb3IgZGF0YWJhc2UtbGV2ZWwgRE1MLCBzdWNoIGFzXG4gKiBjcmVhdGluZy9kZWxldGluZyBjb2xsZWN0aW9ucywgY29ubmVjdGluZyB0byBjb2xsZWN0aW9ucywgYW5kIGV4ZWN1dGluZyBhcmJpdHJhcnkgY29tbWFuZHMuXG4gKlxuICogKipTaG91bGRuJ3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5OyB1c2Uge0BsaW5rIERhdGFBUElDbGllbnQuZGJ9IHRvIG9idGFpbiBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLioqXG4gKlxuICogTm90ZSB0aGF0IGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIGEgYERiYCBkb2Vzbid0IHRyaWdnZXIgYWN0dWFsIGRhdGFiYXNlIGNyZWF0aW9uOyB0aGUgZGF0YWJhc2UgbXVzdCBoYXZlIGFscmVhZHlcbiAqIGV4aXN0ZWQgYmVmb3JlaGFuZC4gSWYgeW91IG5lZWQgdG8gY3JlYXRlIGEgbmV3IGRhdGFiYXNlLCB1c2UgdGhlIHtAbGluayBBc3RyYUFkbWlufSBjbGFzcy5cbiAqXG4gKiBEYiBzcGF3bmluZyBtZXRob2RzIGxldCB5b3UgcGFzcyBpbiB0aGUgZGVmYXVsdCBuYW1lc3BhY2UgZm9yIHRoZSBkYXRhYmFzZSwgd2hpY2ggaXMgdXNlZCBmb3IgYWxsIHN1YnNlcXVlbnQgZGJcbiAqIG9wZXJhdGlvbnMgaW4gdGhhdCBvYmplY3QsIGJ1dCBlYWNoIG1ldGhvZCBsZXRzIHlvdSBvdmVycmlkZSB0aGUgbmFtZXNwYWNlIGlmIG5lY2Vzc2FyeSBpbiBpdHMgb3B0aW9ucy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgY2xpZW50ID0gbmV3IERhdGFBUElDbGllbnQoJ0FzdHJhQ1M6Li4uJyk7XG4gKlxuICogLy8gQ29ubmVjdCB0byBhIGRhdGFiYXNlIHVzaW5nIGEgZGlyZWN0IGVuZHBvaW50XG4gKiBjb25zdCBkYjEgPSBjbGllbnQuZGIoJ2h0dHBzOi8vPGRiX2lkPi08cmVnaW9uPi5hcHBzLmFzdHJhLmRhdGFzdGF4LmNvbScpO1xuICpcbiAqIC8vIE92ZXJyaWRlcyBkZWZhdWx0IG9wdGlvbnMgZnJvbSB0aGUgRGF0YUFQSUNsaWVudFxuICogY29uc3QgZGIyID0gY2xpZW50LmRiKCdodHRwczovLzxkYl9pZD4tPHJlZ2lvbj4uYXBwcy5hc3RyYS5kYXRhc3RheC5jb20nLCB7XG4gKiDCoCBuYW1lc3BhY2U6ICdteV9uYW1lc3BhY2UnLFxuICogwqAgdXNlSHR0cDI6IGZhbHNlLFxuICogfSk7XG4gKlxuICogLy8gTGV0cyB5b3UgY29ubmVjdCB1c2luZyBhIGRhdGFiYXNlIElEIGFuZCByZWdpb25cbiAqIGNvbnN0IGRiMyA9IGNsaWVudC5kYignYTZhMWQ4ZDYtMzFiYy00YWY4LWJlNTctMzc3NTY2ZjM0NWJmJywgJ3VzLWVhc3QxJyk7XG4gKiBgYGBcbiAqXG4gKiBAc2VlIERhdGFBUElDbGllbnQuZGJcbiAqIEBzZWUgQXN0cmFBZG1pbi5kYlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgRGIge1xuICAgIC8qKlxuICAgICAqIFVzZSB7QGxpbmsgRGF0YUFQSUNsaWVudC5kYn0gdG8gb2J0YWluIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbmRwb2ludCwgb3B0aW9ucykge1xuICAgICAgICBfRGJfZGVmYXVsdE9wdHMuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9odHRwQ2xpZW50XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9pZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRlZmF1bHQgbmFtZXNwYWNlIHRvIHVzZSBmb3IgYWxsIG9wZXJhdGlvbnMgaW4gdGhpcyBkYXRhYmFzZSwgdW5sZXNzIG92ZXJyaWRkZW4gaW4gYSBtZXRob2QgY2FsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBVc2VzICdkZWZhdWx0X2tleXNwYWNlJyBhcyB0aGUgZGVmYXVsdCBuYW1lc3BhY2UgZm9yIGFsbCBmdXR1cmUgZGIgc3Bhd25zXG4gICAgICAgICAqIGNvbnN0IGNsaWVudDEgPSBuZXcgRGF0YUFQSUNsaWVudCgnKlRPS0VOKicpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBPdmVycmlkZXMgdGhlIGRlZmF1bHQgbmFtZXNwYWNlIGZvciBhbGwgZnV0dXJlIGRiIHNwYXduc1xuICAgICAgICAgKiBjb25zdCBjbGllbnQyID0gbmV3IERhdGFBUElDbGllbnQoJypUT0tFTionLCB7XG4gICAgICAgICAqIMKgIGRiT3B0aW9uczogeyBuYW1lc3BhY2U6ICdteV9uYW1lc3BhY2UnIH1cbiAgICAgICAgICogfSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIENyZWF0ZWQgd2l0aCAnZGVmYXVsdF9rZXlzcGFjZScgYXMgdGhlIGRlZmF1bHQgbmFtZXNwYWNlXG4gICAgICAgICAqIGNvbnN0IGRiMSA9IGNsaWVudDEuZGIoJypFTkRQT0lOVConKTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8gQ3JlYXRlZCB3aXRoICdteV9uYW1lc3BhY2UnIGFzIHRoZSBkZWZhdWx0IG5hbWVzcGFjZVxuICAgICAgICAgKiBjb25zdCBkYjIgPSBjbGllbnQxLmRiKCcqRU5EUE9JTlQqJywge1xuICAgICAgICAgKiDCoCBuYW1lc3BhY2U6ICdteV9uYW1lc3BhY2UnXG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBVc2VzICdkZWZhdWx0X2tleXNwYWNlJ1xuICAgICAgICAgKiBjb25zdCBjb2xsMSA9IGRiMS5jb2xsZWN0aW9uKCd1c2VycycpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBVc2VzICdteV9uYW1lc3BhY2UnXG4gICAgICAgICAqIGNvbnN0IGNvbGwyID0gZGIxLmNvbGxlY3Rpb24oJ3VzZXJzJywge1xuICAgICAgICAgKiDCoCBuYW1lc3BhY2U6ICdteV9uYW1lc3BhY2UnXG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBkYk9wdHMgPSBvcHRpb25zLmRiT3B0aW9ucztcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICduYW1lc3BhY2UnLCB7XG4gICAgICAgICAgICB2YWx1ZTogZGJPcHRzLm5hbWVzcGFjZSA/PyBhcGlfMS5ERUZBVUxUX05BTUVTUEFDRSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0RiX2RlZmF1bHRPcHRzLCBvcHRpb25zLCBcImZcIik7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2h0dHBDbGllbnQnLCB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IGFwaV8xLkRhdGFBUElIdHRwQ2xpZW50KHtcbiAgICAgICAgICAgICAgICBiYXNlVXJsOiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvblRva2VuOiBkYk9wdHMudG9rZW4sXG4gICAgICAgICAgICAgICAgYmFzZUFwaVBhdGg6IGRiT3B0cz8uZGF0YUFwaVBhdGggfHwgYXBpXzEuREVGQVVMVF9EQVRBX0FQSV9QQVRILFxuICAgICAgICAgICAgICAgIGVtaXR0ZXI6IG9wdGlvbnMuZW1pdHRlcixcbiAgICAgICAgICAgICAgICBtb25pdG9yQ29tbWFuZHM6IGRiT3B0cy5tb25pdG9yQ29tbWFuZHMsXG4gICAgICAgICAgICAgICAgZmV0Y2hDdHg6IG9wdGlvbnMuZmV0Y2hDdHgsXG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlOiB0aGlzLm5hbWVzcGFjZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ19pZCcsIHtcbiAgICAgICAgICAgIHZhbHVlOiAoMCwgdXRpbHNfMS5leHRyYWN0RGJJZEZyb21VcmwpKGVuZHBvaW50KSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBkYXRhYmFzZSwgaWYgaXQncyBhbiBBc3RyYSBkYXRhYmFzZS4gSWYgaXQncyBub3QgYW4gQXN0cmEgZGF0YWJhc2UsIHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAgKlxuICAgICAqIEB0aHJvd3MgRXJyb3IgLSBpZiB0aGUgZGF0YWJhc2UgaXMgbm90IGFuIEFzdHJhIGRhdGFiYXNlLlxuICAgICAqL1xuICAgIGdldCBpZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb24tQXN0cmEgZGF0YWJhc2VzIGRvIG5vdCBoYXZlIGFuIGFwcHJvcHJpYXRlIElEJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGF3bnMgYSBuZXcge0BsaW5rIEFzdHJhRGJBZG1pbn0gaW5zdGFuY2UgZm9yIHRoaXMgZGF0YWJhc2UsIHVzZWQgZm9yIHBlcmZvcm1pbmcgYWRtaW5pc3RyYXRpdmUgb3BlcmF0aW9uc1xuICAgICAqIG9uIHRoZSBkYXRhYmFzZSwgc3VjaCBhcyBtYW5hZ2luZyBuYW1lc3BhY2VzLCBvciBnZXR0aW5nIGRhdGFiYXNlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogKipOQi4gT25seSBhdmFpbGFibGUgZm9yIEFzdHJhIGRhdGFiYXNlcy4qKlxuICAgICAqXG4gICAgICogVGhlIGdpdmVuIG9wdGlvbnMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdCBvcHRpb25zIHNldCB3aGVuIGNyZWF0aW5nIHRoZSB7QGxpbmsgRGF0YUFQSUNsaWVudH0gdGhyb3VnaFxuICAgICAqIGEgZGVlcCBtZXJnZSAoaS5lLiB1bnNldCBwcm9wZXJ0aWVzIGluIHRoZSBvcHRpb25zIG9iamVjdCB3aWxsIGp1c3QgZGVmYXVsdCB0byB0aGUgZGVmYXVsdCBvcHRpb25zKS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkbWluMSA9IGRiLmFkbWluKCk7XG4gICAgICogY29uc3QgYWRtaW4yID0gZGIuYWRtaW4oeyBhZG1pblRva2VuOiAnPHN0cm9uZ2VyLXRva2VuPicgfSk7XG4gICAgICpcbiAgICAgKiBjb25zdCBuYW1lc3BhY2VzID0gYXdhaXQgYWRtaW4xLmxpc3ROYW1lc3BhY2VzKCk7XG4gICAgICogY29uc29sZS5sb2cobmFtZXNwYWNlcyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFueSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMgc2V0IHdoZW4gY3JlYXRpbmcgdGhlIHtAbGluayBEYXRhQVBJQ2xpZW50fS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgbmV3IHtAbGluayBBc3RyYURiQWRtaW59IGluc3RhbmNlIGZvciB0aGlzIGRhdGFiYXNlIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHRocm93cyBFcnJvciAtIGlmIHRoZSBkYXRhYmFzZSBpcyBub3QgYW4gQXN0cmEgZGF0YWJhc2UuXG4gICAgICovXG4gICAgYWRtaW4ob3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuX2lkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FkbWluIG9wZXJhdGlvbnMgYXJlIG9ubHkgc3VwcG9ydGVkIG9uIEFzdHJhIGRhdGFiYXNlcycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgYXN0cmFfZGJfYWRtaW5fMS5ta0RiQWRtaW4pKHRoaXMsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0RiX2RlZmF1bHRPcHRzLCBcImZcIiksIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkYXRhYmFzZSwgc3VjaCBhcyB0aGUgZGF0YWJhc2UgbmFtZSwgcmVnaW9uLCBhbmQgb3RoZXIgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKiAqKk5CLiBPbmx5IGF2YWlsYWJsZSBmb3IgQXN0cmEgZGF0YWJhc2VzLioqXG4gICAgICpcbiAgICAgKiBGb3IgdGhlIGZ1bGwsIGNvbXBsZXRlLCBpbmZvcm1hdGlvbiwgc2VlIHtAbGluayBBc3RyYURiQWRtaW4uaW5mb30uXG4gICAgICpcbiAgICAgKiBUaGUgbWV0aG9kIGlzc3VlcyBhIHJlcXVlc3QgdG8gdGhlIERldk9wcyBBUEkgZWFjaCB0aW1lIGl0IGlzIGludm9rZWQsIHdpdGhvdXQgY2FjaGluZyBtZWNoYW5pc21zO1xuICAgICAqIHRoaXMgZW5zdXJlcyB1cC10by1kYXRlIGluZm9ybWF0aW9uIGZvciB1c2FnZXMgc3VjaCBhcyByZWFsLXRpbWUgY29sbGVjdGlvbiB2YWxpZGF0aW9uIGJ5IHRoZSBhcHBsaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGluZm8gPSBhd2FpdCBkYi5pbmZvKCk7XG4gICAgICogY29uc29sZS5sb2coaW5mby5uYW1lKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBkYXRhYmFzZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEB0aHJvd3MgRXJyb3IgLSBpZiB0aGUgZGF0YWJhc2UgaXMgbm90IGFuIEFzdHJhIGRhdGFiYXNlLlxuICAgICAqL1xuICAgIGFzeW5jIGluZm8ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5hZG1pbigpLmluZm8ob3B0aW9ucykudGhlbihpID0+IGkuaW5mbyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVzdGFibGlzaGVzIGEgcmVmZXJlbmNlIHRvIGEgY29sbGVjdGlvbiBpbiB0aGUgZGF0YWJhc2UuIFRoaXMgbWV0aG9kIGRvZXMgbm90IHBlcmZvcm0gYW55IEkvTy5cbiAgICAgKlxuICAgICAqICoqTkIuIFRoaXMgbWV0aG9kIGRvZXMgbm90IHZhbGlkYXRlIHRoZSBleGlzdGVuY2Ugb2YgdGhlIGNvbGxlY3Rpb27igJRpdCBzaW1wbHkgY3JlYXRlcyBhIHJlZmVyZW5jZS4qKlxuICAgICAqXG4gICAgICogKipVbmxpa2UgdGhlIE1vbmdvREIgZHJpdmVyLCB0aGlzIG1ldGhvZCBkb2VzIG5vdCBjcmVhdGUgYSBjb2xsZWN0aW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3QuKipcbiAgICAgKlxuICAgICAqIFVzZSB7QGxpbmsgRGIuY3JlYXRlQ29sbGVjdGlvbn0gdG8gY3JlYXRlIGEgbmV3IGNvbGxlY3Rpb24gaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIFR5cGVkIGFzIGBDb2xsZWN0aW9uPFNvbWVEb2M+YCBieSBkZWZhdWx0LCBidXQgeW91IGNhbiBzcGVjaWZ5IGEgc2NoZW1hIHR5cGUgdG8gZ2V0IGEgdHlwZWQgY29sbGVjdGlvbi4gSWYgbGVmdFxuICAgICAqIGFzIGBTb21lRG9jYCwgdGhlIGNvbGxlY3Rpb24gd2lsbCBiZSB1bnR5cGVkLlxuICAgICAqXG4gICAgICogWW91IGNhbiBhbHNvIHNwZWNpZnkgYSBuYW1lc3BhY2UgaW4gdGhlIG9wdGlvbnMgcGFyYW1ldGVyLCB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG5hbWVzcGFjZSBmb3IgdGhpcyBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGludGVyZmFjZSBVc2VyIHtcbiAgICAgKiDCoCBuYW1lOiBzdHJpbmcsXG4gICAgICogwqAgYWdlPzogbnVtYmVyLFxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGNvbnN0IHVzZXJzMSA9IGRiLmNvbGxlY3Rpb248VXNlcj4oXCJ1c2Vyc1wiKTtcbiAgICAgKiB1c2VyczEuaW5zZXJ0T25lKHsgbmFtZTogXCJKb2huXCIgfSk7XG4gICAgICpcbiAgICAgKiAvLyBVbnR5cGVkIGNvbGxlY3Rpb24gZnJvbSBkaWZmZXJlbnQgbmFtZXNwYWNlXG4gICAgICogY29uc3QgdXNlcnMyID0gZGIuY29sbGVjdGlvbihcInVzZXJzXCIsIHtcbiAgICAgKiDCoCBuYW1lc3BhY2U6IFwibXlfbmFtZXNwYWNlXCJcbiAgICAgKiB9KTtcbiAgICAgKiB1c2VyczIuaW5zZXJ0T25lKHsgbmFtMzogXCJKb2huXCIgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGNvbm5lY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIG5ldywgdW52YWxpZGF0ZWQsIHJlZmVyZW5jZSB0byB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBzZWUgU29tZURvY1xuICAgICAqIEBzZWUgVmVjdG9yRG9jXG4gICAgICovXG4gICAgY29sbGVjdGlvbihuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgZGF0YV9hcGlfMS5Db2xsZWN0aW9uKHRoaXMsIHRoaXMuX2h0dHBDbGllbnQsIG5hbWUsIG9wdGlvbnM/Lm5hbWVzcGFjZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVzdGFibGlzaGVzIHJlZmVyZW5jZXMgdG8gYWxsIHRoZSBjb2xsZWN0aW9ucyBpbiB0aGUgd29ya2luZy9naXZlbiBuYW1lc3BhY2UuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIHNwZWNpZnkgYSBuYW1lc3BhY2UgaW4gdGhlIG9wdGlvbnMgcGFyYW1ldGVyLCB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG5hbWVzcGFjZSBmb3IgdGhpcyBgRGJgIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogLy8gVXNlcyBkYidzIGRlZmF1bHQgbmFtZXNwYWNlXG4gICAgICogY29uc3QgY29sbGVjdGlvbnMxID0gYXdhaXQgZGIuY29sbGVjdGlvbnMoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhjb2xsZWN0aW9uczEpOyAvLyBbQ29sbGVjdGlvbjxTb21lRG9jPiwgQ29sbGVjdGlvbjxTb21lRG9jPl1cbiAgICAgKlxuICAgICAqIC8vIE92ZXJyaWRlcyBkYidzIGRlZmF1bHQgbmFtZXNwYWNlXG4gICAgICogY29uc3QgY29sbGVjdGlvbnMyID0gYXdhaXQgZGIuY29sbGVjdGlvbnMoeyBuYW1lc3BhY2U6ICdteV9uYW1lc3BhY2UnIH0pO1xuICAgICAqIGNvbnNvbGUubG9nKGNvbGxlY3Rpb25zMik7IC8vIFtDb2xsZWN0aW9uPFNvbWVEb2M+XVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGlzIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGFycmF5IG9mIHJlZmVyZW5jZXMgdG8gdGhlIHdvcmtpbmcgRGIncyBjb2xsZWN0aW9ucy5cbiAgICAgKi9cbiAgICBhc3luYyBjb2xsZWN0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gYXdhaXQgdGhpcy5saXN0Q29sbGVjdGlvbnMoe1xuICAgICAgICAgICAgbmFtZXNwYWNlOiBvcHRpb25zPy5uYW1lc3BhY2UsXG4gICAgICAgICAgICBtYXhUaW1lTVM6IG9wdGlvbnM/Lm1heFRpbWVNUyxcbiAgICAgICAgICAgIG5hbWVPbmx5OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25zLm1hcChjID0+IHRoaXMuY29sbGVjdGlvbihjLCBvcHRpb25zKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29sbGVjdGlvbiBpbiB0aGUgZGF0YWJhc2UsIGFuZCBlc3RhYmxpc2hlcyBhIHJlZmVyZW5jZSB0byBpdC5cbiAgICAgKlxuICAgICAqICoqTkIuIFlvdSBhcmUgbGltaXRlZCBpbiB0aGUgYW1vdW50IG9mIGNvbGxlY3Rpb25zIHlvdSBjYW4gY3JlYXRlLCBzbyBiZSB3YXJ5IHdoZW4gdXNpbmcgdGhpcyBjb21tYW5kLioqXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIGEgYmxvY2tpbmcgY29tbWFuZCB3aGljaCBwZXJmb3JtcyBhY3R1YWwgSS9PIHVubGlrZSB7QGxpbmsgRGIuY29sbGVjdGlvbn0sIHdoaWNoIHNpbXBseSBjcmVhdGVzIGFuXG4gICAgICogdW52YWxpZGF0ZWQgcmVmZXJlbmNlIHRvIGEgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIElmIGBjaGVja0V4aXN0czogZmFsc2VgLCBjcmVhdGlvbiBpcyBpZGVtcG90ZW50LCBzbyBpZiB0aGUgY29sbGVjdGlvbiBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoZSBzYW1lIG9wdGlvbnMsXG4gICAgICogdGhpcyBtZXRob2Qgd2lsbCBub3QgdGhyb3cgYW4gZXJyb3IuIElmIHRoZSBvcHRpb25zIG1pc21hdGNoLCBpdCB3aWxsIHRocm93IGEge0BsaW5rIERhdGFBUElSZXNwb25zZUVycm9yfS5cbiAgICAgKlxuICAgICAqIFR5cGVkIGFzIGBDb2xsZWN0aW9uPFNvbWVEb2M+YCBieSBkZWZhdWx0LCBidXQgeW91IGNhbiBzcGVjaWZ5IGEgc2NoZW1hIHR5cGUgdG8gZ2V0IGEgdHlwZWQgY29sbGVjdGlvbi4gSWYgbGVmdFxuICAgICAqIGFzIGBTb21lRG9jYCwgdGhlIGNvbGxlY3Rpb24gd2lsbCBiZSB1bnR5cGVkLlxuICAgICAqXG4gICAgICogKklmIHZlY3RvciBvcHRpb25zIGFyZSBub3Qgc3BlY2lmaWVkLCB0aGUgY29sbGVjdGlvbiB3aWxsIG5vdCBzdXBwb3J0IHZlY3RvciBzZWFyY2guKlxuICAgICAqXG4gICAgICogWW91IGNhbiBhbHNvIHNwZWNpZnkgYSBuYW1lc3BhY2UgaW4gdGhlIG9wdGlvbnMgcGFyYW1ldGVyLCB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG5hbWVzcGFjZSBmb3IgdGhpcyBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIFNlZSB7QGxpbmsgQ3JlYXRlQ29sbGVjdGlvbk9wdGlvbnN9IGZvciAqbXVjaCogbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGUgb3B0aW9ucyBhdmFpbGFibGUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBpbnRlcmZhY2UgVXNlciB7XG4gICAgICogwqAgbmFtZTogc3RyaW5nLFxuICAgICAqIMKgIGFnZT86IG51bWJlcixcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBjb25zdCB1c2VycyA9IGF3YWl0IGRiLmNyZWF0ZUNvbGxlY3Rpb248VXNlcj4oXCJ1c2Vyc1wiKTtcbiAgICAgKiB1c2Vycy5pbnNlcnRPbmUoeyBuYW1lOiBcIkpvaG5cIiB9KTtcbiAgICAgKlxuICAgICAqIC8vIFVudHlwZWQgY29sbGVjdGlvbiB3aXRoIGN1c3RvbSBvcHRpb25zIGluIGEgZGlmZmVyZW50IG5hbWVzcGFjZVxuICAgICAqIGNvbnN0IHVzZXJzMiA9IGF3YWl0IGRiLmNyZWF0ZUNvbGxlY3Rpb24oXCJ1c2Vyc1wiLCB7XG4gICAgICogwqAgbmFtZXNwYWNlOiBcIm15X25hbWVzcGFjZVwiLFxuICAgICAqIMKgIGRlZmF1bHRJZDoge1xuICAgICAqIMKgICAgdHlwZTogXCJvYmplY3RJZFwiLFxuICAgICAqIMKgIH0sXG4gICAgICogwqAgY2hlY2tFeGlzdHM6IGZhbHNlLFxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25OYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNvbGxlY3Rpb24gdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2VkIHJlZmVyZW5jZSB0byB0aGUgbmV3bHkgY3JlYXRlZCBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHRocm93cyBDb2xsZWN0aW9uQWxyZWFkeUV4aXN0c0Vycm9yIC0gaWYgdGhlIGNvbGxlY3Rpb24gYWxyZWFkeSBleGlzdHMgYW5kIGBjaGVja0V4aXN0c2AgaXMgYHRydWVgIG9yIHVuc2V0LlxuICAgICAqXG4gICAgICogQHNlZSBTb21lRG9jXG4gICAgICogQHNlZSBWZWN0b3JEb2NcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVDb2xsZWN0aW9uKGNvbGxlY3Rpb25OYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBjcmVhdGVDb2xsZWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogY29sbGVjdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0SWQ6IG9wdGlvbnM/LmRlZmF1bHRJZCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhpbmc6IG9wdGlvbnM/LmluZGV4aW5nLFxuICAgICAgICAgICAgICAgICAgICB2ZWN0b3I6IG9wdGlvbnM/LnZlY3RvcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdGltZW91dE1hbmFnZXIgPSB0aGlzLl9odHRwQ2xpZW50LnRpbWVvdXRNYW5hZ2VyKG9wdGlvbnM/Lm1heFRpbWVNUyk7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IG9wdGlvbnM/Lm5hbWVzcGFjZSA/PyB0aGlzLm5hbWVzcGFjZTtcbiAgICAgICAgaWYgKG9wdGlvbnM/LmNoZWNrRXhpc3RzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLmxpc3RDb2xsZWN0aW9ucyh7IG5hbWVzcGFjZSwgbWF4VGltZU1TOiB0aW1lb3V0TWFuYWdlci5tc1JlbWFpbmluZyB9KTtcbiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9ucy5zb21lKGMgPT4gYy5uYW1lID09PSBjb2xsZWN0aW9uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZGF0YV9hcGlfMS5Db2xsZWN0aW9uQWxyZWFkeUV4aXN0c0Vycm9yKG9wdGlvbnM/Lm5hbWVzcGFjZSA/PyB0aGlzLm5hbWVzcGFjZSwgY29sbGVjdGlvbk5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuX2h0dHBDbGllbnQuZXhlY3V0ZUNvbW1hbmQoY29tbWFuZCwgeyBuYW1lc3BhY2UsIHRpbWVvdXRNYW5hZ2VyIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uKGNvbGxlY3Rpb25OYW1lLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRHJvcHMgYSBjb2xsZWN0aW9uIGZyb20gdGhlIGRhdGFiYXNlLCBpbmNsdWRpbmcgYWxsIHRoZSBjb250YWluZWQgZG9jdW1lbnRzLlxuICAgICAqXG4gICAgICogWW91IGNhbiBhbHNvIHNwZWNpZnkgYSBuYW1lc3BhY2UgaW4gdGhlIG9wdGlvbnMgcGFyYW1ldGVyLCB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG5hbWVzcGFjZSBmb3IgdGhpcyBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIC8vIFVzZXMgZGIncyBkZWZhdWx0IG5hbWVzcGFjZVxuICAgICAqIGNvbnN0IHN1Y2Nlc3MxID0gYXdhaXQgZGIuZHJvcENvbGxlY3Rpb24oXCJ1c2Vyc1wiKTtcbiAgICAgKiBjb25zb2xlLmxvZyhzdWNjZXNzMSk7IC8vIHRydWVcbiAgICAgKlxuICAgICAqIC8vIE92ZXJyaWRlcyBkYidzIGRlZmF1bHQgbmFtZXNwYWNlXG4gICAgICogY29uc3Qgc3VjY2VzczIgPSBhd2FpdCBkYi5kcm9wQ29sbGVjdGlvbihcInVzZXJzXCIsIHtcbiAgICAgKiDCoCBuYW1lc3BhY2U6IFwibXlfbmFtZXNwYWNlXCJcbiAgICAgKiB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhzdWNjZXNzMik7IC8vIHRydWVcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNvbGxlY3Rpb24gdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoaXMgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYHRydWVgIGlmIHRoZSBjb2xsZWN0aW9uIHdhcyBkcm9wcGVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzIFVzZSB3aXRoIGNhdXRpb24uIEhhdmUgc3RlZWwtdG9lIGJvb3RzIG9uLiBEb24ndCBzYXkgSSBkaWRuJ3Qgd2FybiB5b3UuXG4gICAgICovXG4gICAgYXN5bmMgZHJvcENvbGxlY3Rpb24obmFtZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgZGVsZXRlQ29sbGVjdGlvbjogeyBuYW1lIH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLl9odHRwQ2xpZW50LmV4ZWN1dGVDb21tYW5kKGNvbW1hbmQsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVzcC5zdGF0dXM/Lm9rID09PSAxICYmICFyZXNwLmVycm9ycztcbiAgICB9XG4gICAgYXN5bmMgbGlzdENvbGxlY3Rpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGZpbmRDb2xsZWN0aW9uczoge1xuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXMgJ25hbWVPbmx5JyBpbnN0ZWFkIG9mICdleHBsYWluJyBmb3IgTW9uZ28tY29tcGF0aWJpbGl0eSByZWFzb25zXG4gICAgICAgICAgICAgICAgICAgIGV4cGxhaW46IG9wdGlvbnM/Lm5hbWVPbmx5ICE9PSB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5faHR0cENsaWVudC5leGVjdXRlQ29tbWFuZChjb21tYW5kLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHJlc3Auc3RhdHVzLmNvbGxlY3Rpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgUE9TVCByZXF1ZXN0IHRvIHRoZSBEYXRhIEFQSSBmb3IgdGhpcyBkYXRhYmFzZSB3aXRoIGFuIGFyYml0cmFyeSwgY2FsbGVyLXByb3ZpZGVkIHBheWxvYWQuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIHNwZWNpZnkgYSBjb2xsZWN0aW9uIHRvIHRhcmdldCBpbiB0aGUgb3B0aW9ucyBwYXJhbWV0ZXIsIHRoZXJlYnkgYWxsb3dpbmcgeW91IHRvIHBlcmZvcm1cbiAgICAgKiBhcmJpdHJhcnkgY29sbGVjdGlvbi1sZXZlbCBvcGVyYXRpb25zIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiBZb3UncmUgYWxzbyBhYmxlIHRvIHNwZWNpZnkgYSBuYW1lc3BhY2UgaW4gdGhlIG9wdGlvbnMgcGFyYW1ldGVyLCB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG5hbWVzcGFjZVxuICAgICAqIGZvciB0aGlzIGRhdGFiYXNlLlxuICAgICAqXG4gICAgICogSWYgbm8gY29sbGVjdGlvbiBpcyBzcGVjaWZpZWQsIHRoZSBjb21tYW5kIHdpbGwgYmUgZXhlY3V0ZWQgYXQgdGhlIGRhdGFiYXNlIGxldmVsLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgY29sbHMgPSBhd2FpdCBkYi5jb21tYW5kKHsgZmluZENvbGxlY3Rpb25zOiB7fSB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhjb2xscyk7IC8vIHsgc3RhdHVzOiB7IGNvbGxlY3Rpb25zOiBbXSB9IH1cbiAgICAgKlxuICAgICAqIGNvbnN0IHVzZXJzID0gYXdhaXQgZGIuY29tbWFuZCh7IGZpbmRPbmU6IHt9IH0sIHsgY29sbGVjdGlvbjogJ3VzZXJzJyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyh1c2Vycyk7IC8vIHsgZGF0YTogeyBkb2N1bWVudDogbnVsbCB9IH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb21tYW5kIC0gVGhlIGNvbW1hbmQgdG8gc2VuZCB0byB0aGUgRGF0YSBBUEkuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGlzIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSByYXcgcmVzcG9uc2UgZnJvbSB0aGUgRGF0YSBBUEkuXG4gICAgICovXG4gICAgYXN5bmMgY29tbWFuZChjb21tYW5kLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9odHRwQ2xpZW50LmV4ZWN1dGVDb21tYW5kKGNvbW1hbmQsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuRGIgPSBEYjtcbl9EYl9kZWZhdWx0T3B0cyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBta0RiKHJvb3RPcHRzLCBlbmRwb2ludE9ySWQsIHJlZ2lvbk9yT3B0aW9ucywgbWF5YmVPcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9ICh0eXBlb2YgcmVnaW9uT3JPcHRpb25zID09PSAnc3RyaW5nJylcbiAgICAgICAgPyBtYXliZU9wdGlvbnNcbiAgICAgICAgOiByZWdpb25Pck9wdGlvbnM7XG4gICAgdmFsaWRhdGVEYk9wdHMob3B0aW9ucyk7XG4gICAgY29uc3QgZW5kcG9pbnQgPSAodHlwZW9mIHJlZ2lvbk9yT3B0aW9ucyA9PT0gJ3N0cmluZycpXG4gICAgICAgID8gJ2h0dHBzOi8vJyArIGVuZHBvaW50T3JJZCArICctJyArIHJlZ2lvbk9yT3B0aW9ucyArICcuYXBwcy5hc3RyYS5kYXRhc3RheC5jb20nXG4gICAgICAgIDogZW5kcG9pbnRPcklkO1xuICAgIHJldHVybiBuZXcgRGIoZW5kcG9pbnQsIHtcbiAgICAgICAgLi4ucm9vdE9wdHMsXG4gICAgICAgIGRiT3B0aW9uczoge1xuICAgICAgICAgICAgLi4ucm9vdE9wdHM/LmRiT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5leHBvcnRzLm1rRGIgPSBta0RiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVEYk9wdHMob3B0cykge1xuICAgICgwLCB1dGlsc18xLnZhbGlkYXRlT3B0aW9uKSgnZGIgb3B0aW9ucycsIG9wdHMsICdvYmplY3QnKTtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAoMCwgdXRpbHNfMS52YWxpZGF0ZU9wdGlvbikoJ25hbWVzcGFjZSBvcHRpb24nLCBvcHRzLm5hbWVzcGFjZSwgJ3N0cmluZycsIChuYW1lc3BhY2UpID0+IHtcbiAgICAgICAgaWYgKCFuYW1lc3BhY2UubWF0Y2goL15cXHd7MSw0OH0kLykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBuYW1lc3BhY2Ugb3B0aW9uOyBleHBlY3RlZCBhIHN0cmluZyBvZiAxLTQ4IGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAoMCwgdXRpbHNfMS52YWxpZGF0ZU9wdGlvbikoJ21vbml0b3JDb21tYW5kcyBvcHRpb24nLCBvcHRzLm1vbml0b3JDb21tYW5kcywgJ2Jvb2xlYW4nKTtcbiAgICAoMCwgdXRpbHNfMS52YWxpZGF0ZU9wdGlvbikoJ3Rva2VuIG9wdGlvbicsIG9wdHMudG9rZW4sICdzdHJpbmcnKTtcbiAgICAoMCwgdXRpbHNfMS52YWxpZGF0ZU9wdGlvbikoJ2RhdGFBcGlQYXRoIG9wdGlvbicsIG9wdHMuZGF0YUFwaVBhdGgsICdzdHJpbmcnKTtcbn1cbmV4cG9ydHMudmFsaWRhdGVEYk9wdHMgPSB2YWxpZGF0ZURiT3B0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRiLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/db.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/document.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/document.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=document.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvZG9jdW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2RhdGEtYXBpL2RvY3VtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFTdGF4LCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb2N1bWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mkRespErrorFromResponses = exports.mkRespErrorFromResponse = exports.BulkWriteError = exports.UpdateManyError = exports.DeleteManyError = exports.InsertManyError = exports.CumulativeDataAPIError = exports.DataAPIResponseError = exports.CollectionAlreadyExistsError = exports.CollectionNotFoundError = exports.CursorIsStartedError = exports.TooManyDocumentsToCountError = exports.DataAPITimeoutError = exports.DataAPIHttpError = exports.DataAPIError = void 0;\nconst utils_1 = __webpack_require__(/*! ../api/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/utils.js\");\n/**\n * An abstract class representing *some* exception that occurred related to the Data API. This is the base class for all\n * Data API errors, and will never be thrown directly.\n *\n * Useful for `instanceof` checks.\n *\n * This is *only* for Data API related errors, such as a non-existent collection, or a duplicate key error. It\n * is *not*, however, for errors such as an HTTP network error, or a malformed request. The exception being timeouts,\n * which are represented by the {@link DataAPITimeoutError} class.\n *\n * @public\n */\nclass DataAPIError extends Error {\n}\nexports.DataAPIError = DataAPIError;\n/**\n * An error thrown on non-2XX status codes from the Data API, such as 4XX or 5XX errors.\n */\nclass DataAPIHttpError extends DataAPIError {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(resp) {\n        super(`HTTP error: ${resp.status}`);\n        /**\n         * The error descriptors returned by the API to describe what went wrong.\n         */\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The HTTP status code of the response, if available.\n         */\n        Object.defineProperty(this, \"body\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The \"raw\", errored response from the API.\n         */\n        Object.defineProperty(this, \"raw\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.status = resp.status;\n        this.body = resp.body;\n        this.raw = (0, utils_1.toCuratedApiResponse)(resp);\n        this.name = 'DataAPIHttpError';\n    }\n}\nexports.DataAPIHttpError = DataAPIHttpError;\n/**\n * An error thrown when a Data API operation timed out.\n *\n * Depending on the method, this may be a request timeout occurring during a specific HTTP request, or can happen over\n * the course of a method involving several requests in a row, such as a paginated `insertMany`.\n *\n * @public\n */\nclass DataAPITimeoutError extends DataAPIError {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(timeout) {\n        super(`Command timed out after ${timeout}ms`);\n        /**\n         * The timeout that was set for the operation, in milliseconds.\n         */\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.timeout = timeout;\n        this.name = 'DataAPITimeoutError';\n    }\n}\nexports.DataAPITimeoutError = DataAPITimeoutError;\n/**\n * Caused by a `countDocuments` operation that failed because the resulting number of documents exceeded *either*\n * the upper bound set by the caller, or the hard limit imposed by the Data API.\n *\n * @example\n * ```typescript\n * await collection.insertMany('<100_length_array>');\n *\n * try {\n *   await collection.countDocuments({}, 50);\n * } catch (e) {\n *   if (e instanceof TooManyDocumentsToCountError) {\n *     console.log(e.limit); // 50\n *     console.log(e.hitServerLimit); // false\n *   }\n * }\n * ```\n *\n * @field limit - The limit that was set by the caller\n * @field hitServerLimit - Whether the server-imposed limit was hit\n *\n * @public\n */\nclass TooManyDocumentsToCountError extends DataAPIError {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(limit, hitServerLimit) {\n        const message = (hitServerLimit)\n            ? `Too many documents to count (server limit of ${limit} reached)`\n            : `Too many documents to count (provided limit is ${limit})`;\n        super(message);\n        /**\n         * The limit that was specified by the caller, or the server-imposed limit if the caller's limit was too high.\n         */\n        Object.defineProperty(this, \"limit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Specifies if the server-imposed limit was hit. If this is `true`, the `limit` field will contain the server's\n         * limit; otherwise it will contain the caller's limit.\n         */\n        Object.defineProperty(this, \"hitServerLimit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.limit = limit;\n        this.hitServerLimit = hitServerLimit;\n        this.name = 'TooManyDocumentsToCountError';\n    }\n}\nexports.TooManyDocumentsToCountError = TooManyDocumentsToCountError;\n/**\n * Caused by trying to perform an operation on an already-initialized {@link FindCursor} that requires it to be\n * uninitialized.\n *\n * If you run into this error, and you really do need to change an option on the cursor, you can rewind the cursor\n * using {@link FindCursor.rewind}, or clone it using {@link FindCursor.clone}.\n *\n * @example\n * ```typescript\n * await collection.find({}).toArray();\n *\n * try {\n *   await cursor.limit(10);\n * } catch (e) {\n *   if (e instanceof CursorAlreadyInitializedError) {\n *     console.log(e.message); // \"Cursor is already initialized...\"\n *   }\n * }\n * ```\n *\n * @public\n */\nclass CursorIsStartedError extends DataAPIError {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(message) {\n        super(message);\n        this.name = 'CursorAlreadyInitializedError';\n    }\n}\nexports.CursorIsStartedError = CursorIsStartedError;\n/**\n * An exception thrown when certain operations are attempted on a collection that does not exist.\n *\n * @field namespace - The namespace that the collection was not found in\n * @field collectionName - The name of the collection that was not found\n *\n * @public\n */\nclass CollectionNotFoundError extends DataAPIError {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(namespace, collectionName) {\n        super(`Collection '${namespace}.${collectionName}' not found`);\n        /**\n         * The namespace where the collection already exists\n         */\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The name of the collection that already exists\n         */\n        Object.defineProperty(this, \"collectionName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.namespace = namespace;\n        this.collectionName = collectionName;\n        this.name = 'CollectionNotFoundError';\n    }\n}\nexports.CollectionNotFoundError = CollectionNotFoundError;\n/**\n * An exception thrown when an operation that expects a collection not to exist is attempted on a collection that\n * already exists.\n *\n * @field namespace - The namespace where the collection already exists\n * @field collectionName - The name of the collection that already exists\n *\n * @public\n */\nclass CollectionAlreadyExistsError extends DataAPIError {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(namespace, collectionName) {\n        super(`Collection '${namespace}.${collectionName}' already exists`);\n        /**\n         * The namespace where the collection already exists\n         */\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The name of the collection that already exists\n         */\n        Object.defineProperty(this, \"collectionName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.namespace = namespace;\n        this.collectionName = collectionName;\n        this.name = 'CollectionAlreadyExistsError';\n    }\n}\nexports.CollectionAlreadyExistsError = CollectionAlreadyExistsError;\n/**\n * An error representing the *complete* errors for an operation. This is a cohesive error that represents all the\n * errors that occurred during a single operation, and should not be thought of as *always* 1:1 with the number of\n * API requests—rather it's 1:1 with the number of *logical* operations performed by the user (i.e. the methods\n * on the {@link Collection} class).\n *\n * This is *not* used for \"hard\" (4XX, 5XX) errors, which are rarer and would be thrown directly by the underlying\n * code.\n *\n * @field message - A human-readable message describing the *first* error\n * @field errorDescriptors - A list of error descriptors representing the individual errors returned by the API\n * @field detailedErrorDescriptors - A list of errors 1:1 with the number of errorful API requests made to the server.\n *\n * @public\n */\nclass DataAPIResponseError extends DataAPIError {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(message, errorDescriptors, detailedErrorDescriptors) {\n        super(message);\n        /**\n         * A human-readable message describing the *first* error.\n         *\n         * This is *always* equal to `errorDescriptors[0]?.message` if it exists, otherwise it's given a generic\n         * default message.\n         */\n        Object.defineProperty(this, \"message\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * A list of error descriptors representing the individual errors returned by the API.\n         *\n         * This is *always* equal to `detailedErrorDescriptors.flatMap(d => d.errorDescriptors)`, for the user's\n         * convenience.\n         */\n        Object.defineProperty(this, \"errorDescriptors\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * A list of errors 1:1 with the number of errorful API requests made to the server. Each element contains the\n         * original command, the raw response, and the error descriptors for that request.\n         *\n         * For operations that only make one request, this will be a singleton list (i.e. `insertOne`).\n         */\n        Object.defineProperty(this, \"detailedErrorDescriptors\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.message = message;\n        this.errorDescriptors = errorDescriptors;\n        this.detailedErrorDescriptors = detailedErrorDescriptors;\n        this.name = 'DataAPIResponseError';\n    }\n}\nexports.DataAPIResponseError = DataAPIResponseError;\n/**\n * An abstract class representing an exception that occurred due to a *cumulative* operation on the Data API. This is\n * the base class for all Data API errors that represent a paginated operation, such as `insertMany`, `deleteMany`,\n * `updateMany`, and `bulkWrite`, and will never be thrown directly.\n *\n * Useful for `instanceof` checks.\n *\n * This is *only* for Data API related errors, such as a non-existent collection, or a duplicate key error. It\n * is *not*, however, for errors such as an HTTP network error, or a malformed request. The exception being timeouts,\n * which are represented by the {@link DataAPITimeoutError} class.\n *\n * @field message - A human-readable message describing the *first* error\n * @field errorDescriptors - A list of error descriptors representing the individual errors returned by the API\n * @field detailedErrorDescriptors - A list of errors 1:1 with the number of errorful API requests made to the server.\n * @field partialResult - The partial result of the operation that was performed\n *\n * @public\n */\nclass CumulativeDataAPIError extends DataAPIResponseError {\n    constructor() {\n        super(...arguments);\n        /**\n         * The partial result of the operation that was performed. This is *always* defined, and is\n         * the result of the operation up to the point of the first error. For example, if you're inserting 100 documents\n         * ordered and the 50th document fails, the `partialResult` will contain the first 49 documents that were\n         * successfully inserted.\n         */\n        Object.defineProperty(this, \"partialResult\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n}\nexports.CumulativeDataAPIError = CumulativeDataAPIError;\n/**\n * Represents an error that occurred during an `insertMany` operation (which is, generally, paginated).\n *\n * Contains the inserted IDs of the documents that were successfully inserted, as well as the cumulative errors\n * that occurred during the operation.\n *\n * If the operation was ordered, the `insertedIds` will be in the same order as the documents that were attempted to\n * be inserted.\n *\n * @field message - A human-readable message describing the *first* error\n * @field errorDescriptors - A list of error descriptors representing the individual errors returned by the API\n * @field detailedErrorDescriptors - A list of errors 1:1 with the number of errorful API requests made to the server.\n * @field partialResult - The partial result of the `InsertMany` operation that was performed\n *\n * @public\n */\nclass InsertManyError extends CumulativeDataAPIError {\n    constructor() {\n        super(...arguments);\n        /**\n         * The name of the error. This is always 'InsertManyError'.\n         */\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InsertManyError'\n        });\n    }\n}\nexports.InsertManyError = InsertManyError;\n/**\n * Represents an error that occurred during a `deleteMany` operation (which is, generally, paginated).\n *\n * Contains the number of documents that were successfully deleted, as well as the cumulative errors that occurred\n * during the operation.\n *\n * @field message - A human-readable message describing the *first* error\n * @field errorDescriptors - A list of error descriptors representing the individual errors returned by the API\n * @field detailedErrorDescriptors - A list of errors 1:1 with the number of errorful API requests made to the server.\n * @field partialResult - The partial result of the `DeleteMany` operation that was performed\n *\n * @public\n */\nclass DeleteManyError extends CumulativeDataAPIError {\n    constructor() {\n        super(...arguments);\n        /**\n         * The name of the error. This is always 'DeleteManyError'.\n         */\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'DeleteManyError'\n        });\n    }\n}\nexports.DeleteManyError = DeleteManyError;\n/**\n * Represents an error that occurred during an `updateMany` operation (which is, generally, paginated).\n *\n * Contains the number of documents that were successfully matched and/or modified, as well as the cumulative errors\n * that occurred during the operation.\n *\n * @field message - A human-readable message describing the *first* error\n * @field errorDescriptors - A list of error descriptors representing the individual errors returned by the API\n * @field detailedErrorDescriptors - A list of errors 1:1 with the number of errorful API requests made to the server.\n * @field partialResult - The partial result of the `UpdateMany` operation that was performed\n *\n * @public\n */\nclass UpdateManyError extends CumulativeDataAPIError {\n    constructor() {\n        super(...arguments);\n        /**\n         * The name of the error. This is always 'UpdateManyError'.\n         */\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'UpdateManyError'\n        });\n    }\n}\nexports.UpdateManyError = UpdateManyError;\n/**\n * Represents an error that occurred during a `bulkWrite` operation (which is, generally, paginated).\n *\n * Contains the number of documents that were successfully inserted, updated, deleted, etc., as well as the cumulative\n * errors that occurred during the operation.\n *\n * If the operation was ordered, the results will be in the same order as the operations that were attempted to be\n * performed.\n *\n * @field message - A human-readable message describing the *first* error\n * @field errorDescriptors - A list of error descriptors representing the individual errors returned by the API\n * @field detailedErrorDescriptors - A list of errors 1:1 with the number of errorful API requests made to the server.\n * @field partialResult - The partial result of the `BulkWrite` operation that was performed\n *\n * @public\n */\nclass BulkWriteError extends CumulativeDataAPIError {\n    constructor() {\n        super(...arguments);\n        /**\n         * The name of the error. This is always 'BulkWriteError'.\n         */\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'BulkWriteError'\n        });\n    }\n}\nexports.BulkWriteError = BulkWriteError;\n/**\n * @internal\n */\nconst mkRespErrorFromResponse = (err, command, raw, partialResult) => {\n    return (0, exports.mkRespErrorFromResponses)(err, [command], [raw], partialResult);\n};\nexports.mkRespErrorFromResponse = mkRespErrorFromResponse;\n/**\n * @internal\n */\nconst mkRespErrorFromResponses = (err, commands, raw, partialResult) => {\n    const detailedDescriptors = [];\n    for (let i = 0, n = commands.length; i < n; i++) {\n        const command = commands[i], response = raw[i];\n        if (response.errors) {\n            const descriptors = response.errors.map((error) => {\n                const attributes = { ...error };\n                delete attributes.message;\n                delete attributes.errorCode;\n                return { errorCode: error.errorCode, message: error.message, attributes };\n            });\n            const detailedDescriptor = { errorDescriptors: descriptors, command, rawResponse: response };\n            detailedDescriptors.push(detailedDescriptor);\n        }\n    }\n    const errorDescriptors = detailedDescriptors.flatMap(d => d.errorDescriptors);\n    const message = errorDescriptors[0]?.message || 'Something unexpected occurred';\n    const instance = new err(message, errorDescriptors, detailedDescriptors);\n    if (partialResult) {\n        // @ts-expect-error - If the lord wants a partialResult, the lord will get a partialResult.\n        instance.partialResult = partialResult;\n    }\n    return instance;\n};\nexports.mkRespErrorFromResponses = mkRespErrorFromResponses;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/events.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/events.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandEvent = void 0;\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\n/**\n * Common base class for all command events.\n *\n * **Note that these emit *real* commands, not any abstracted commands like \"bulkWrite\", \"insertMany\", or \"deleteAll\",\n * which have to be translated into appropriate Data API commands.**\n *\n * @public\n */\nclass CommandEvent {\n    /**\n     * Should not be instantiated directly.\n     *\n     * @internal\n     */\n    constructor(info) {\n        /**\n         * The command object. Equal to the response body of the HTTP request.\n         *\n         * Note that this is the actual raw command object; it's not necessarily 1:1 with methods called on the collection/db.\n         *\n         * For example, a `deleteAll` method on a collection will be translated into a `deleteMany` command, and a `bulkWrite`\n         * method will be translated into a series of `insertOne`, `updateOne`, etc. commands.\n         *\n         * @example\n         * ```typescript\n         * {\n         *   insertOne: { document: { name: 'John' } }\n         * }\n         * ```\n         */\n        Object.defineProperty(this, \"command\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The namespace the command is being run in.\n         */\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The collection the command is being run on, if applicable.\n         */\n        Object.defineProperty(this, \"collection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The command name.\n         *\n         * This is the key of the command object. For example, if the command object is\n         * `{ insertOne: { document: { name: 'John' } } }`, the command name is `insertOne`.\n         *\n         * Meaning, abstracted commands like `bulkWrite`, or `deleteAll` will be shown as their actual command equivalents.\n         */\n        Object.defineProperty(this, \"commandName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The URL the command is being sent to.\n         */\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.command = info.command;\n        this.namespace = info.namespace || api_1.DEFAULT_NAMESPACE;\n        this.collection = info.collection;\n        this.commandName = Object.keys(info.command)[0];\n        this.url = info.url;\n    }\n}\nexports.CommandEvent = CommandEvent;\n/**\n * Emitted when a command is started, before the initial HTTP request is made.\n *\n * **Note that these emit *real* commands, not any abstracted commands like \"bulkWrite\", \"insertMany\", or \"deleteAll\",\n * which have to be translated into appropriate Data API commands.**\n *\n * See {@link CommandEvent} for more information about all the common properties available on this event.\n *\n * @public\n */\nclass CommandStartedEvent extends CommandEvent {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(info) {\n        super(info);\n        /**\n         * The timeout for the command, in milliseconds.\n         */\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.timeout = info.timeoutManager.ms;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * Emitted when a command has succeeded.\n *\n * **Note that these emit *real* commands, not any abstracted commands like \"bulkWrite\", \"insertMany\", or \"deleteAll\",\n * which have to be translated into appropriate Data API commands.**\n *\n * See {@link CommandEvent} for more information about all the common properties available on this event.\n *\n * @public\n */\nclass CommandSucceededEvent extends CommandEvent {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(info, reply, started) {\n        super(info);\n        /**\n         * The duration of the command, in milliseconds. Starts counting from the moment of the initial HTTP request.\n         */\n        Object.defineProperty(this, \"duration\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The response object from the Data API.\n         */\n        Object.defineProperty(this, \"resp\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.duration = (0, api_1.hrTimeMs)() - started;\n        this.resp = reply;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * Emitted when a command has errored.\n *\n * **Note that these emit *real* commands, not any abstracted commands like \"bulkWrite\", \"insertMany\", or \"deleteAll\",\n * which have to be translated into appropriate Data API commands.**\n *\n * See {@link CommandEvent} for more information about all the common properties available on this event.\n *\n * @public\n */\nclass CommandFailedEvent extends CommandEvent {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(info, error, started) {\n        super(info);\n        /**\n         * The duration of the command, in milliseconds.\n         */\n        Object.defineProperty(this, \"duration\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The error that caused the command to fail.\n         *\n         * Typically, some {@link DataAPIError}, commonly a {@link DataAPIResponseError} or one of its subclasses.\n         */\n        Object.defineProperty(this, \"error\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.duration = (0, api_1.hrTimeMs)() - started;\n        this.error = error;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/ids.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/ids.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ObjectId = exports.UUID = void 0;\nconst uuidv7_1 = __webpack_require__(/*! uuidv7 */ \"(rsc)/./node_modules/uuidv7/dist/index.cjs\");\nconst bson_objectid_1 = __importDefault(__webpack_require__(/*! bson-objectid */ \"(rsc)/./node_modules/bson-objectid/objectid.js\"));\nconst uuidRegex = new RegExp('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$');\n/**\n * Represents a UUID that can be used as an _id in the DataAPI.\n *\n * Provides methods for creating v4 and v7 UUIDs, and for parsing timestamps from v7 UUIDs.\n *\n * @example\n * ```typescript\n * const collection = await db.createCollection('myCollection'. {\n *   defaultId: {\n *     type: 'uuidv7',\n *   },\n * });\n *\n * await collection.insertOne({ album: 'Jomsviking' });\n *\n * const doc = await collection.findOne({ album: 'Jomsviking' });\n *\n * // Prints the UUID of the document\n * console.log(doc._id.toString());\n *\n * // Prints the timestamp when the document was created (server time)\n * console.log(doc._id.getTimestamp());\n * ```\n *\n * @example\n * ```typescript\n * await collection.insertOne({ _id: UUID.v4(), album: 'Berserker' });\n *\n * const doc = await collection.findOne({ album: 'Berserker' });\n *\n * // Prints the UUID of the document\n * console.log(doc._id.toString());\n *\n * // Undefined, as the document was created with a v4 UUID\n * console.log(doc._id.getTimestamp());\n * ```\n *\n * @see ObjectId\n *\n * @public\n */\nclass UUID {\n    /**\n     * Creates a new UUID instance.\n     *\n     * Use `UUID.v4()` or `UUID.v7()` to generate random new UUIDs.\n     *\n     * @param uuid - The UUID string.\n     * @param validate - Whether to validate the UUID string. Defaults to `true`.\n     */\n    constructor(uuid, validate) {\n        /**\n         * The version of the UUID.\n         */\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_uuid\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (validate !== false) {\n            if (typeof uuid !== 'string') {\n                throw new Error('UUID must be a string');\n            }\n            if (uuid.length !== 36 || !uuidRegex.test(uuid)) {\n                throw new Error('UUID must be a 36-character hex string');\n            }\n        }\n        this._uuid = uuid.toLowerCase();\n        Object.defineProperty(this, 'version', {\n            value: parseInt(this._uuid[14], 16),\n            writable: false,\n        });\n    }\n    /**\n     * Compares this UUID to another UUID.\n     *\n     * **The other UUID can be a UUID instance or a string.**\n     *\n     * A UUID is considered equal to another UUID if their lowercase string representations are equal.\n     *\n     * @param other - The UUID to compare to.\n     *\n     * @returns `true` if the UUIDs are equal, `false` otherwise.\n     */\n    equals(other) {\n        if (typeof other === 'string') {\n            return this._uuid === other;\n        }\n        if (other instanceof UUID) {\n            return this._uuid === other._uuid;\n        }\n        return false;\n    }\n    /**\n     * Returns the timestamp of a v7 UUID. If the UUID is not a v7 UUID, this method returns `undefined`.\n     *\n     * @returns The timestamp of the UUID, or `undefined` if the UUID is not a v7 UUID.\n     */\n    getTimestamp() {\n        return timestampFromUUID(this);\n    }\n    /**\n     * Returns the string representation of the UUID in lowercase.\n     */\n    toString() {\n        return this._uuid;\n    }\n    /**\n     * Creates a new v4 UUID.\n     */\n    static v4() {\n        return new UUID((0, uuidv7_1.uuidv4)(), false);\n    }\n    /**\n     * Creates a new v7 UUID.\n     */\n    static v7() {\n        return new UUID((0, uuidv7_1.uuidv7)(), false);\n    }\n    /**\n     * Inspects the UUID.\n     */\n    inspect() {\n        return `UUID(\"${this.toString()}\")`;\n    }\n    /**\n     * Converts the UUID to a JSON representation.\n     *\n     * Serializes to `{ $uuid: 'uuid' }`.\n     */\n    toJSON() {\n        return { $uuid: this.toString() };\n    }\n}\nexports.UUID = UUID;\nconst objectIdRegex = new RegExp('^[0-9a-fA-F]{24}$');\n/**\n * Represents an ObjectId that can be used as an _id in the DataAPI.\n *\n * Provides methods for generating ObjectIds and getting the timestamp of an ObjectId.\n *\n * @example\n * ```typescript\n * const collection = await db.createCollection('myCollection'. {\n *   defaultId: {\n *     type: 'objectId',\n *   },\n * });\n *\n * await collection.insertOne({ album: 'Inhuman Rampage' });\n *\n * const doc = await collection.findOne({ album: 'Inhuman Rampage' });\n *\n * // Prints the ObjectId of the document\n * console.log(doc._id.toString());\n *\n * // Prints the timestamp when the document was created (server time)\n * console.log(doc._id.getTimestamp());\n * ```\n *\n * @example\n * ```typescript\n * await collection.insertOne({ _id: new ObjectId(), album: 'Sacrificium' });\n *\n * const doc = await collection.findOne({ album: 'Sacrificium' });\n *\n * // Prints the ObjectId of the document\n * console.log(doc._id.toString());\n *\n * // Prints the timestamp when the document was created (server time)\n * console.log(doc._id.getTimestamp());\n * ```\n *\n * @public\n */\nclass ObjectId {\n    /**\n     * Creates a new ObjectId instance.\n     *\n     * If `id` is provided, it must be a 24-character hex string. Otherwise, a new ObjectId is generated.\n     *\n     * @param id - The ObjectId string.\n     * @param validate - Whether to validate the ObjectId string. Defaults to `true`.\n     */\n    constructor(id, validate = true) {\n        Object.defineProperty(this, \"_objectId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (validate) {\n            if (typeof id === 'string') {\n                if (id.length !== 24 || !objectIdRegex.test(id)) {\n                    throw new Error('ObjectId must be a 24-character hex string');\n                }\n            }\n            else if (id !== undefined && id !== null) {\n                throw new Error('ObjectId must be a string');\n            }\n        }\n        this._objectId = (id) ? (0, bson_objectid_1.default)(id) : (0, bson_objectid_1.default)();\n    }\n    /**\n     * Compares this ObjectId to another ObjectId.\n     *\n     * **The other ObjectId can be an ObjectId instance or a string.**\n     *\n     * An ObjectId is considered equal to another ObjectId if their string representations are equal.\n     *\n     * @param other - The ObjectId to compare to.\n     *\n     * @returns `true` if the ObjectIds are equal, `false` otherwise.\n     */\n    equals(other) {\n        return this._objectId.equals((other && typeof other === 'object' && '_objectId' in other ? other._objectId : other));\n    }\n    /**\n     * Returns the timestamp of the ObjectId.\n     *\n     * @returns The timestamp of the ObjectId.\n     */\n    getTimestamp() {\n        return this._objectId.getTimestamp();\n    }\n    /**\n     * Returns the string representation of the ObjectId.\n     */\n    toString() {\n        return this._objectId.toString();\n    }\n    /**\n     * Inspects the ObjectId.\n     */\n    inspect() {\n        return `ObjectId(\"${this.toString()}\")`;\n    }\n    /**\n     * Converts the ObjectId to a JSON representation.\n     *\n     * Serializes to `{ $objectId: 'objectId' }`.\n     */\n    toJSON() {\n        return { $objectId: this.toString() };\n    }\n}\nexports.ObjectId = ObjectId;\nfunction timestampFromUUID(uuid) {\n    if (uuid.version !== 7) {\n        return undefined;\n    }\n    const timestampBytes = new Uint8Array(8);\n    timestampBytes.set(new Uint8Array(uuidv7_1.UUID.parse(uuid.toString()).bytes.buffer.slice(0, 6)), 2);\n    const timestampMs = new DataView(timestampBytes.buffer).getBigUint64(0);\n    return new Date(Number(timestampMs));\n}\n//# sourceMappingURL=ids.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/ids.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// noinspection DuplicatedCode\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UpdateManyError = exports.CursorIsStartedError = exports.BulkWriteError = exports.InsertManyError = exports.TooManyDocumentsToCountError = exports.DeleteManyError = exports.CollectionAlreadyExistsError = exports.DataAPIError = exports.CumulativeDataAPIError = exports.DataAPIResponseError = exports.DataAPITimeoutError = exports.Db = void 0;\n__exportStar(__webpack_require__(/*! ./collection */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/collection.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cursor */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/cursor.js\"), exports);\n__exportStar(__webpack_require__(/*! ./document */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/document.js\"), exports);\nvar db_1 = __webpack_require__(/*! ./db */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/db.js\");\nObject.defineProperty(exports, \"Db\", ({ enumerable: true, get: function () { return db_1.Db; } }));\nvar errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/errors.js\");\nObject.defineProperty(exports, \"DataAPITimeoutError\", ({ enumerable: true, get: function () { return errors_1.DataAPITimeoutError; } }));\nObject.defineProperty(exports, \"DataAPIResponseError\", ({ enumerable: true, get: function () { return errors_1.DataAPIResponseError; } }));\nObject.defineProperty(exports, \"CumulativeDataAPIError\", ({ enumerable: true, get: function () { return errors_1.CumulativeDataAPIError; } }));\nObject.defineProperty(exports, \"DataAPIError\", ({ enumerable: true, get: function () { return errors_1.DataAPIError; } }));\nObject.defineProperty(exports, \"CollectionAlreadyExistsError\", ({ enumerable: true, get: function () { return errors_1.CollectionAlreadyExistsError; } }));\nObject.defineProperty(exports, \"DeleteManyError\", ({ enumerable: true, get: function () { return errors_1.DeleteManyError; } }));\nObject.defineProperty(exports, \"TooManyDocumentsToCountError\", ({ enumerable: true, get: function () { return errors_1.TooManyDocumentsToCountError; } }));\nObject.defineProperty(exports, \"InsertManyError\", ({ enumerable: true, get: function () { return errors_1.InsertManyError; } }));\nObject.defineProperty(exports, \"BulkWriteError\", ({ enumerable: true, get: function () { return errors_1.BulkWriteError; } }));\nObject.defineProperty(exports, \"CursorIsStartedError\", ({ enumerable: true, get: function () { return errors_1.CursorIsStartedError; } }));\nObject.defineProperty(exports, \"UpdateManyError\", ({ enumerable: true, get: function () { return errors_1.UpdateManyError; } }));\n__exportStar(__webpack_require__(/*! ./events */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/events.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ids */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/ids.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixHQUFHLDRCQUE0QixHQUFHLHNCQUFzQixHQUFHLHVCQUF1QixHQUFHLG9DQUFvQyxHQUFHLHVCQUF1QixHQUFHLG9DQUFvQyxHQUFHLG9CQUFvQixHQUFHLDhCQUE4QixHQUFHLDRCQUE0QixHQUFHLDJCQUEyQixHQUFHLFVBQVU7QUFDblYsYUFBYSxtQkFBTyxDQUFDLDRGQUFjO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyxvRkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsd0ZBQVk7QUFDakMsV0FBVyxtQkFBTyxDQUFDLDRFQUFNO0FBQ3pCLHNDQUFxQyxFQUFFLHFDQUFxQyxtQkFBbUIsRUFBQztBQUNoRyxlQUFlLG1CQUFPLENBQUMsb0ZBQVU7QUFDakMsdURBQXNELEVBQUUscUNBQXFDLHdDQUF3QyxFQUFDO0FBQ3RJLHdEQUF1RCxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUN4SSwwREFBeUQsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDNUksZ0RBQStDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3hILGdFQUErRCxFQUFFLHFDQUFxQyxpREFBaUQsRUFBQztBQUN4SixtREFBa0QsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDOUgsZ0VBQStELEVBQUUscUNBQXFDLGlEQUFpRCxFQUFDO0FBQ3hKLG1EQUFrRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUM5SCxrREFBaUQsRUFBRSxxQ0FBcUMsbUNBQW1DLEVBQUM7QUFDNUgsd0RBQXVELEVBQUUscUNBQXFDLHlDQUF5QyxFQUFDO0FBQ3hJLG1EQUFrRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUM5SCxhQUFhLG1CQUFPLENBQUMsb0ZBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLDhFQUFPO0FBQzVCLGFBQWEsbUJBQU8sQ0FBQyx3RkFBUztBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2RhdGEtYXBpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFTdGF4LCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vLyBub2luc3BlY3Rpb24gRHVwbGljYXRlZENvZGVcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VcGRhdGVNYW55RXJyb3IgPSBleHBvcnRzLkN1cnNvcklzU3RhcnRlZEVycm9yID0gZXhwb3J0cy5CdWxrV3JpdGVFcnJvciA9IGV4cG9ydHMuSW5zZXJ0TWFueUVycm9yID0gZXhwb3J0cy5Ub29NYW55RG9jdW1lbnRzVG9Db3VudEVycm9yID0gZXhwb3J0cy5EZWxldGVNYW55RXJyb3IgPSBleHBvcnRzLkNvbGxlY3Rpb25BbHJlYWR5RXhpc3RzRXJyb3IgPSBleHBvcnRzLkRhdGFBUElFcnJvciA9IGV4cG9ydHMuQ3VtdWxhdGl2ZURhdGFBUElFcnJvciA9IGV4cG9ydHMuRGF0YUFQSVJlc3BvbnNlRXJyb3IgPSBleHBvcnRzLkRhdGFBUElUaW1lb3V0RXJyb3IgPSBleHBvcnRzLkRiID0gdm9pZCAwO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2N1cnNvclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZG9jdW1lbnRcIiksIGV4cG9ydHMpO1xudmFyIGRiXzEgPSByZXF1aXJlKFwiLi9kYlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRiXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkYl8xLkRiOyB9IH0pO1xudmFyIGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGF0YUFQSVRpbWVvdXRFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JzXzEuRGF0YUFQSVRpbWVvdXRFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRhdGFBUElSZXNwb25zZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5EYXRhQVBJUmVzcG9uc2VFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkN1bXVsYXRpdmVEYXRhQVBJRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLkN1bXVsYXRpdmVEYXRhQVBJRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRhQVBJRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLkRhdGFBUElFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbGxlY3Rpb25BbHJlYWR5RXhpc3RzRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLkNvbGxlY3Rpb25BbHJlYWR5RXhpc3RzRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWxldGVNYW55RXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLkRlbGV0ZU1hbnlFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRvb01hbnlEb2N1bWVudHNUb0NvdW50RXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLlRvb01hbnlEb2N1bWVudHNUb0NvdW50RXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbnNlcnRNYW55RXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLkluc2VydE1hbnlFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJ1bGtXcml0ZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5CdWxrV3JpdGVFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkN1cnNvcklzU3RhcnRlZEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5DdXJzb3JJc1N0YXJ0ZWRFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlVwZGF0ZU1hbnlFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JzXzEuVXBkYXRlTWFueUVycm9yOyB9IH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2V2ZW50c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaWRzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/collection-options.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/collection-options.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=collection-options.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvY29sbGVjdGlvbnMvY29sbGVjdGlvbi1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kYXRhLWFwaS90eXBlcy9jb2xsZWN0aW9ucy9jb2xsZWN0aW9uLW9wdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbGxlY3Rpb24tb3B0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/collection-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/collections-common.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/collections-common.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=collections-common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvY29sbGVjdGlvbnMvY29sbGVjdGlvbnMtY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kYXRhLWFwaS90eXBlcy9jb2xsZWN0aW9ucy9jb2xsZWN0aW9ucy1jb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbGxlY3Rpb25zLWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/collections-common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/command.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/command.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvY29sbGVjdGlvbnMvY29tbWFuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvY29sbGVjdGlvbnMvY29tbWFuZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbWFuZC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/command.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/drop-collection.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/drop-collection.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=drop-collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvY29sbGVjdGlvbnMvZHJvcC1jb2xsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kYXRhLWFwaS90eXBlcy9jb2xsZWN0aW9ucy9kcm9wLWNvbGxlY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyb3AtY29sbGVjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/drop-collection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/common.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/common.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kYXRhLWFwaS90eXBlcy9jb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/dot-notation.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/dot-notation.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=dot-notation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvZG90LW5vdGF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kYXRhLWFwaS90eXBlcy9kb3Qtbm90YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvdC1ub3RhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/dot-notation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/filter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/filter.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvZmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kYXRhLWFwaS90eXBlcy9maWx0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/filter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/find/find-common.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/find/find-common.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=find-common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvZmluZC9maW5kLWNvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvZmluZC9maW5kLWNvbW1vbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZC1jb21tb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/find/find-common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/index.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./collections/collections-common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/collections-common.js\"), exports);\n__exportStar(__webpack_require__(/*! ./collections/collection-options */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/collection-options.js\"), exports);\n__exportStar(__webpack_require__(/*! ./collections/drop-collection */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/drop-collection.js\"), exports);\n__exportStar(__webpack_require__(/*! ./collections/command */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/collections/command.js\"), exports);\n__exportStar(__webpack_require__(/*! ./find/find-common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/find/find-common.js\"), exports);\n__exportStar(__webpack_require__(/*! ./misc/bulk-write */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/misc/bulk-write.js\"), exports);\n__exportStar(__webpack_require__(/*! ./update/update-common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/update/update-common.js\"), exports);\n__exportStar(__webpack_require__(/*! ./update/replace-one */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/update/replace-one.js\"), exports);\n__exportStar(__webpack_require__(/*! ./common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/common.js\"), exports);\n__exportStar(__webpack_require__(/*! ./dot-notation */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/dot-notation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./filter */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/filter.js\"), exports);\n__exportStar(__webpack_require__(/*! ./update-filter */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/update-filter.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsMElBQWtDO0FBQ3ZELGFBQWEsbUJBQU8sQ0FBQywwSUFBa0M7QUFDdkQsYUFBYSxtQkFBTyxDQUFDLG9JQUErQjtBQUNwRCxhQUFhLG1CQUFPLENBQUMsb0hBQXVCO0FBQzVDLGFBQWEsbUJBQU8sQ0FBQyw4R0FBb0I7QUFDekMsYUFBYSxtQkFBTyxDQUFDLDRHQUFtQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMsc0hBQXdCO0FBQzdDLGFBQWEsbUJBQU8sQ0FBQyxrSEFBc0I7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLDBGQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxzR0FBZ0I7QUFDckMsYUFBYSxtQkFBTyxDQUFDLDBGQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyx3R0FBaUI7QUFDdEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kYXRhLWFwaS90eXBlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29sbGVjdGlvbnMvY29sbGVjdGlvbnMtY29tbW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2xsZWN0aW9ucy9jb2xsZWN0aW9uLW9wdGlvbnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25zL2Ryb3AtY29sbGVjdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29sbGVjdGlvbnMvY29tbWFuZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZmluZC9maW5kLWNvbW1vblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWlzYy9idWxrLXdyaXRlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91cGRhdGUvdXBkYXRlLWNvbW1vblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXBkYXRlL3JlcGxhY2Utb25lXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb21tb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RvdC1ub3RhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZmlsdGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91cGRhdGUtZmlsdGVyXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/misc/bulk-write.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/misc/bulk-write.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// noinspection DuplicatedCode\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkWriteResult = void 0;\n/**\n * Represents the result of a bulk write operation.\n *\n * @public\n */\nclass BulkWriteResult {\n    /**\n     * Should not be instantiated directly.\n     *\n     * @internal\n     */\n    constructor(\n    /**\n     * The number of documents deleted.\n     */\n    deletedCount = 0, \n    /**\n     * The number of documents inserted.\n     */\n    insertedCount = 0, \n    /**\n     * The number of documents matched by an update operation.\n     */\n    matchedCount = 0, \n    /**\n     * The number of documents modified.\n     */\n    modifiedCount = 0, \n    /**\n     * The number of documents upserted.\n     */\n    upsertedCount = 0, \n    /**\n     * Upserted document generated ids. Sparse array, indexed by the position of the upserted operation in the bulk\n     * write request.\n     */\n    upsertedIds = {}, _raw = []) {\n        Object.defineProperty(this, \"deletedCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: deletedCount\n        });\n        Object.defineProperty(this, \"insertedCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: insertedCount\n        });\n        Object.defineProperty(this, \"matchedCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: matchedCount\n        });\n        Object.defineProperty(this, \"modifiedCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: modifiedCount\n        });\n        Object.defineProperty(this, \"upsertedCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: upsertedCount\n        });\n        Object.defineProperty(this, \"upsertedIds\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: upsertedIds\n        });\n        Object.defineProperty(this, \"_raw\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _raw\n        });\n    }\n    /**\n     * Returns the raw, internal result.\n     *\n     * @returns The raw, internal result.\n     */\n    getRawResponse() {\n        return this._raw;\n    }\n    /**\n     * Returns the upserted id at the given index.\n     *\n     * @param index - The index of the upserted id to retrieve.\n     *\n     * @returns The upserted id at the given index, or `undefined` if there is no upserted id at that index.\n     */\n    getUpsertedIdAt(index) {\n        return this.upsertedIds[index];\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n//# sourceMappingURL=bulk-write.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvbWlzYy9idWxrLXdyaXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2RhdGEtYXBpL3R5cGVzL21pc2MvYnVsay13cml0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLy8gbm9pbnNwZWN0aW9uIER1cGxpY2F0ZWRDb2RlXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1bGtXcml0ZVJlc3VsdCA9IHZvaWQgMDtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgcmVzdWx0IG9mIGEgYnVsayB3cml0ZSBvcGVyYXRpb24uXG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBCdWxrV3JpdGVSZXN1bHQge1xuICAgIC8qKlxuICAgICAqIFNob3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBkb2N1bWVudHMgZGVsZXRlZC5cbiAgICAgKi9cbiAgICBkZWxldGVkQ291bnQgPSAwLCBcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGRvY3VtZW50cyBpbnNlcnRlZC5cbiAgICAgKi9cbiAgICBpbnNlcnRlZENvdW50ID0gMCwgXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBkb2N1bWVudHMgbWF0Y2hlZCBieSBhbiB1cGRhdGUgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIG1hdGNoZWRDb3VudCA9IDAsIFxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIG1vZGlmaWVkLlxuICAgICAqL1xuICAgIG1vZGlmaWVkQ291bnQgPSAwLCBcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGRvY3VtZW50cyB1cHNlcnRlZC5cbiAgICAgKi9cbiAgICB1cHNlcnRlZENvdW50ID0gMCwgXG4gICAgLyoqXG4gICAgICogVXBzZXJ0ZWQgZG9jdW1lbnQgZ2VuZXJhdGVkIGlkcy4gU3BhcnNlIGFycmF5LCBpbmRleGVkIGJ5IHRoZSBwb3NpdGlvbiBvZiB0aGUgdXBzZXJ0ZWQgb3BlcmF0aW9uIGluIHRoZSBidWxrXG4gICAgICogd3JpdGUgcmVxdWVzdC5cbiAgICAgKi9cbiAgICB1cHNlcnRlZElkcyA9IHt9LCBfcmF3ID0gW10pIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGVsZXRlZENvdW50XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBkZWxldGVkQ291bnRcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluc2VydGVkQ291bnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGluc2VydGVkQ291bnRcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1hdGNoZWRDb3VudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbWF0Y2hlZENvdW50XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtb2RpZmllZENvdW50XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBtb2RpZmllZENvdW50XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1cHNlcnRlZENvdW50XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB1cHNlcnRlZENvdW50XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1cHNlcnRlZElkc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdXBzZXJ0ZWRJZHNcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9yYXdcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IF9yYXdcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJhdywgaW50ZXJuYWwgcmVzdWx0LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHJhdywgaW50ZXJuYWwgcmVzdWx0LlxuICAgICAqL1xuICAgIGdldFJhd1Jlc3BvbnNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1cHNlcnRlZCBpZCBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIHVwc2VydGVkIGlkIHRvIHJldHJpZXZlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHVwc2VydGVkIGlkIGF0IHRoZSBnaXZlbiBpbmRleCwgb3IgYHVuZGVmaW5lZGAgaWYgdGhlcmUgaXMgbm8gdXBzZXJ0ZWQgaWQgYXQgdGhhdCBpbmRleC5cbiAgICAgKi9cbiAgICBnZXRVcHNlcnRlZElkQXQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBzZXJ0ZWRJZHNbaW5kZXhdO1xuICAgIH1cbn1cbmV4cG9ydHMuQnVsa1dyaXRlUmVzdWx0ID0gQnVsa1dyaXRlUmVzdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVsay13cml0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/misc/bulk-write.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/update-filter.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/update-filter.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=update-filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvdXBkYXRlLWZpbHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvdXBkYXRlLWZpbHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBkYXRlLWZpbHRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/update-filter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/update/replace-one.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/update/replace-one.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=replace-one.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvdXBkYXRlL3JlcGxhY2Utb25lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kYXRhLWFwaS90eXBlcy91cGRhdGUvcmVwbGFjZS1vbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGxhY2Utb25lLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/update/replace-one.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/update/update-common.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/types/update/update-common.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=update-common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdHlwZXMvdXBkYXRlL3VwZGF0ZS1jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2RhdGEtYXBpL3R5cGVzL3VwZGF0ZS91cGRhdGUtY29tbW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFTdGF4LCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGRhdGUtY29tbW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/types/update/update-common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.normalizeSort = exports.validateOption = exports.replaceAstraUrlIdAndRegion = exports.extractDbIdFromUrl = exports.takeWhile = void 0;\n/**\n * @internal\n */\nfunction takeWhile(arr, pred) {\n    const result = [];\n    for (let i = 0, n = arr.length; i < n && pred(arr[i]); i++) {\n        result.push(arr[i]);\n    }\n    return result;\n}\nexports.takeWhile = takeWhile;\n/**\n * @internal\n */\nfunction extractDbIdFromUrl(uri) {\n    return new URL(uri).hostname.match(/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/)?.[0];\n}\nexports.extractDbIdFromUrl = extractDbIdFromUrl;\n/**\n * @internal\n */\nfunction replaceAstraUrlIdAndRegion(uri, id, region) {\n    const url = new URL(uri);\n    const parts = url.hostname.split('.');\n    parts[0] = id + '-' + region;\n    url.hostname = parts.join('.');\n    return url.toString().slice(0, -1);\n}\nexports.replaceAstraUrlIdAndRegion = replaceAstraUrlIdAndRegion;\n/**\n * @internal\n */\nfunction validateOption(name, obj, type, test) {\n    if (obj === null || obj === undefined) {\n        return;\n    }\n    if (typeof obj !== type) {\n        throw new TypeError(`Invalid ${name}; expected a ${type} value, or undefined/null`);\n    }\n    test?.(obj);\n}\nexports.validateOption = validateOption;\n/**\n * @internal\n */\nconst normalizeSort = (sort) => {\n    const ret = {};\n    for (const key in sort) {\n        switch (sort[key]) {\n            case 1:\n            case 'asc':\n            case 'ascending':\n                ret[key] = 1;\n                break;\n            case -1:\n            case 'desc':\n            case 'descending':\n                ret[key] = -1;\n                break;\n            default:\n                ret[key] = sort[key];\n        }\n    }\n    return ret;\n};\nexports.normalizeSort = normalizeSort;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxzQkFBc0IsR0FBRyxrQ0FBa0MsR0FBRywwQkFBMEIsR0FBRyxpQkFBaUI7QUFDcEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyx1QkFBdUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLFNBQVMsR0FBRztBQUNsRjtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLE9BQU8sYUFBYSxNQUFNO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGF0YS1hcGkvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubm9ybWFsaXplU29ydCA9IGV4cG9ydHMudmFsaWRhdGVPcHRpb24gPSBleHBvcnRzLnJlcGxhY2VBc3RyYVVybElkQW5kUmVnaW9uID0gZXhwb3J0cy5leHRyYWN0RGJJZEZyb21VcmwgPSBleHBvcnRzLnRha2VXaGlsZSA9IHZvaWQgMDtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHRha2VXaGlsZShhcnIsIHByZWQpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbiA9IGFyci5sZW5ndGg7IGkgPCBuICYmIHByZWQoYXJyW2ldKTsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGFycltpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnRha2VXaGlsZSA9IHRha2VXaGlsZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3REYklkRnJvbVVybCh1cmkpIHtcbiAgICByZXR1cm4gbmV3IFVSTCh1cmkpLmhvc3RuYW1lLm1hdGNoKC9eWzAtOWEtZl17OH0tKFswLTlhLWZdezR9LSl7M31bMC05YS1mXXsxMn0vKT8uWzBdO1xufVxuZXhwb3J0cy5leHRyYWN0RGJJZEZyb21VcmwgPSBleHRyYWN0RGJJZEZyb21Vcmw7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiByZXBsYWNlQXN0cmFVcmxJZEFuZFJlZ2lvbih1cmksIGlkLCByZWdpb24pIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHVyaSk7XG4gICAgY29uc3QgcGFydHMgPSB1cmwuaG9zdG5hbWUuc3BsaXQoJy4nKTtcbiAgICBwYXJ0c1swXSA9IGlkICsgJy0nICsgcmVnaW9uO1xuICAgIHVybC5ob3N0bmFtZSA9IHBhcnRzLmpvaW4oJy4nKTtcbiAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCkuc2xpY2UoMCwgLTEpO1xufVxuZXhwb3J0cy5yZXBsYWNlQXN0cmFVcmxJZEFuZFJlZ2lvbiA9IHJlcGxhY2VBc3RyYVVybElkQW5kUmVnaW9uO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVPcHRpb24obmFtZSwgb2JqLCB0eXBlLCB0ZXN0KSB7XG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSB0eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgJHtuYW1lfTsgZXhwZWN0ZWQgYSAke3R5cGV9IHZhbHVlLCBvciB1bmRlZmluZWQvbnVsbGApO1xuICAgIH1cbiAgICB0ZXN0Py4ob2JqKTtcbn1cbmV4cG9ydHMudmFsaWRhdGVPcHRpb24gPSB2YWxpZGF0ZU9wdGlvbjtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZVNvcnQgPSAoc29ydCkgPT4ge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNvcnQpIHtcbiAgICAgICAgc3dpdGNoIChzb3J0W2tleV0pIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhc2UgJ2FzYyc6XG4gICAgICAgICAgICBjYXNlICdhc2NlbmRpbmcnOlxuICAgICAgICAgICAgICAgIHJldFtrZXldID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgLTE6XG4gICAgICAgICAgICBjYXNlICdkZXNjJzpcbiAgICAgICAgICAgIGNhc2UgJ2Rlc2NlbmRpbmcnOlxuICAgICAgICAgICAgICAgIHJldFtrZXldID0gLTE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldFtrZXldID0gc29ydFtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuZXhwb3J0cy5ub3JtYWxpemVTb3J0ID0gbm9ybWFsaXplU29ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AstraAdmin_defaultOpts;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateAdminOpts = exports.mkAdmin = exports.AstraAdmin = void 0;\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nconst utils_1 = __webpack_require__(/*! ../data-api/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/utils.js\");\nconst db_1 = __webpack_require__(/*! ../data-api/db */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/db.js\");\n/**\n * An administrative class for managing Astra databases, including creating, listing, and deleting databases.\n *\n * **Shouldn't be instantiated directly; use {@link DataAPIClient.admin} to obtain an instance of this class.**\n *\n * To perform admin tasks on a per-database basis, see the {@link AstraDbAdmin} class.\n *\n * @example\n * ```typescript\n * const client = new DataAPIClient('token');\n *\n * // Create an admin instance with the default token\n * const admin1 = client.admin();\n *\n * // Create an admin instance with a custom token\n * const admin2 = client.admin({ adminToken: 'stronger-token' });\n *\n * const dbs = await admin1.listDatabases();\n * console.log(dbs);\n * ```\n *\n * @see DataAPIClient.admin\n * @see AstraDbAdmin\n *\n * @public\n */\nclass AstraAdmin {\n    /**\n     * Use {@link DataAPIClient.admin} to obtain an instance of this class.\n     *\n     * @internal\n     */\n    constructor(options) {\n        _AstraAdmin_defaultOpts.set(this, void 0);\n        Object.defineProperty(this, \"_httpClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const adminOpts = options.adminOptions ?? {};\n        __classPrivateFieldSet(this, _AstraAdmin_defaultOpts, options, \"f\");\n        Object.defineProperty(this, '_httpClient', {\n            value: new api_1.DevOpsAPIHttpClient({\n                baseUrl: adminOpts.endpointUrl || api_1.DEFAULT_DEVOPS_API_ENDPOINT,\n                applicationToken: adminOpts.adminToken,\n                monitorCommands: adminOpts.monitorCommands,\n                emitter: options.emitter,\n                fetchCtx: options.fetchCtx,\n            }),\n            enumerable: false,\n        });\n    }\n    db(endpointOrId, regionOrOptions, maybeOptions) {\n        return (0, db_1.mkDb)(__classPrivateFieldGet(this, _AstraAdmin_defaultOpts, \"f\"), endpointOrId, regionOrOptions, maybeOptions);\n    }\n    dbAdmin(endpointOrId, regionOrOptions, maybeOptions) {\n        // @ts-expect-error - calls internal representation of method\n        return this.db(endpointOrId, regionOrOptions, maybeOptions).admin(__classPrivateFieldGet(this, _AstraAdmin_defaultOpts, \"f\").adminOptions);\n    }\n    /**\n     * Fetches the complete information about the database, such as the database name, IDs, region, status, actions, and\n     * other metadata.\n     *\n     * @example\n     * ```typescript\n     * const info = await admin.info('<db_id>');\n     * console.log(info.info.name, info.creationTime);\n     * ```\n     *\n     * @returns A promise that resolves to the complete database information.\n     */\n    async dbInfo(id, options) {\n        const resp = await this._httpClient.request({\n            method: api_1.HttpMethods.Get,\n            path: `/databases/${id}`,\n        }, options);\n        return resp.data;\n    }\n    /**\n     * Lists all databases in the current org/account, matching the optionally provided filter.\n     *\n     * Note that this method is paginated, but the page size is high enough that most users won't need to worry about it.\n     * However, you can use the `limit` and `skip` options to control the number of results returned and the starting point\n     * for the results, as needed.\n     *\n     * You can also filter by the database status using the `include` option, and by the database provider using the\n     * `provider` option.\n     *\n     * See {@link ListDatabasesOptions} for complete information about the options available for this operation.\n     *\n     * @example\n     * ```typescript\n     * const admin = new DataAPIClient('AstraCS:...').admin();\n     *\n     * const activeDbs = await admin.listDatabases({ include: 'ACTIVE' });\n     *\n     * for (const db of activeDbs) {\n     *   console.log(`Database ${db.name} is active`);\n     * }\n     * ```\n     *\n     * @param options - The options to filter the databases by.\n     * @returns A list of the complete information for all the databases matching the given filter.\n     */\n    async listDatabases(options) {\n        const resp = await this._httpClient.request({\n            method: api_1.HttpMethods.Get,\n            path: `/databases`,\n            params: {\n                include: options?.include,\n                provider: options?.provider,\n                limit: options?.limit,\n                starting_after: options?.skip,\n            },\n        }, options);\n        return resp.data;\n    }\n    /**\n     * Creates a new database with the given configuration.\n     *\n     * **NB. this is a long-running operation. See {@link AdminBlockingOptions} about such blocking operations.** The\n     * default polling interval is 10 seconds. Expect it to take roughly 2 min to complete.\n     *\n     * Note that **the `name` field is non-unique** and thus creating a database, even with the same options, is **not\n     * idempotent**.\n     *\n     * You may also provide options for the implicit {@link Db} instance that will be created with the database, which\n     * will override any default options set when creating the {@link DataAPIClient} through a deep merge (i.e. unset\n     * properties in the options object will just default to the default options).\n     *\n     * See {@link CreateDatabaseOptions} for complete information about the options available for this operation.\n     *\n     * @example\n     * ```typescript\n     * const newDbAdmin1 = await admin.createDatabase({\n     *   name: 'my_database_1',\n     *   cloudProvider: 'GCP',\n     *   region: 'us-east1',\n     * });\n     *\n     * // Prints '[]' as there are no collections in the database yet\n     * console.log(newDbAdmin1.db().listCollections());\n     *\n     * const newDbAdmin2 = await admin.createDatabase({\n     *   name: 'my_database_2',\n     *   cloudProvider: 'GCP',\n     *   region: 'us-east1',\n     *   namespace: 'my_namespace',\n     * }, {\n     *   blocking: false,\n     *   dbOptions: {\n     *     useHttp2: false,\n     *     token: '<weaker-token>',\n     *   },\n     * });\n     *\n     * // Can't do much else as the database is still initializing\n     * console.log(newDbAdmin2.db().id);\n     * ```\n     *\n     * @remarks\n     * Note that if you choose not to block, the returned {@link AstraDbAdmin} object will not be very useful until the\n     * operation completes, which is up to the caller to determine.\n     *\n     * @param config - The configuration for the new database.\n     * @param options - The options for the blocking behavior of the operation.\n     *\n     * @returns The AstraDbAdmin instance for the newly created database.\n     */\n    async createDatabase(config, options) {\n        const definition = {\n            capacityUnits: 1,\n            tier: 'serverless',\n            dbType: 'vector',\n            keyspace: config.namespace || api_1.DEFAULT_NAMESPACE,\n            ...config,\n        };\n        const resp = await this._httpClient.requestLongRunning({\n            method: api_1.HttpMethods.Post,\n            path: '/databases',\n            data: definition,\n        }, {\n            id: (resp) => resp.headers.get('location'),\n            target: 'ACTIVE',\n            legalStates: ['INITIALIZING', 'PENDING'],\n            defaultPollInterval: 10000,\n            options,\n        });\n        const db = (0, db_1.mkDb)(__classPrivateFieldGet(this, _AstraAdmin_defaultOpts, \"f\"), resp.headers.get('location'), definition.region, { ...options?.dbOptions, namespace: definition.keyspace });\n        return db.admin(__classPrivateFieldGet(this, _AstraAdmin_defaultOpts, \"f\").adminOptions);\n    }\n    /**\n     * Terminates a database by ID or by a given {@link Db} instance.\n     *\n     * **NB. this is a long-running operation. See {@link AdminBlockingOptions} about such blocking operations.** The\n     * default polling interval is 10 seconds. Expect it to take roughly 6-7 min to complete.\n     *\n     * The database info will still be accessible by ID, or by using the {@link AstraAdmin.listDatabases} method with the filter\n     * set to `'ALL'` or `'TERMINATED'`. However, all of its data will very much be lost.\n     *\n     * @example\n     * ```typescript\n     * const db = client.db('https://<db_id>-<region>.apps.astra.datastax.com');\n     * await admin.dropDatabase(db);\n     *\n     * // Or just\n     * await admin.dropDatabase('a6a1d8d6-31bc-4af8-be57-377566f345bf');\n     * ```\n     *\n     * @param db - The database to drop, either by ID or by instance.\n     * @param options - The options for the blocking behavior of the operation.\n     *\n     * @returns A promise that resolves when the operation completes.\n     *\n     * @remarks Use with caution. Wear a harness. Don't say I didn't warn you.\n     */\n    async dropDatabase(db, options) {\n        const id = typeof db === 'string' ? db : db.id;\n        await this._httpClient.requestLongRunning({\n            method: api_1.HttpMethods.Post,\n            path: `/databases/${id}/terminate`,\n        }, {\n            id: id,\n            target: 'TERMINATED',\n            legalStates: ['TERMINATING'],\n            defaultPollInterval: 10000,\n            options,\n        });\n    }\n}\nexports.AstraAdmin = AstraAdmin;\n_AstraAdmin_defaultOpts = new WeakMap();\n/**\n * @internal\n */\nfunction mkAdmin(rootOpts, options) {\n    validateAdminOpts(options);\n    return new AstraAdmin({\n        ...rootOpts,\n        adminOptions: {\n            ...rootOpts?.adminOptions,\n            ...options,\n        },\n    });\n}\nexports.mkAdmin = mkAdmin;\n/**\n * @internal\n */\nfunction validateAdminOpts(opts) {\n    (0, utils_1.validateOption)('admin options', opts, 'object');\n    if (!opts) {\n        return;\n    }\n    (0, utils_1.validateOption)('monitorCommands option', opts.monitorCommands, 'boolean');\n    (0, utils_1.validateOption)('adminToken option', opts.adminToken, 'string');\n    (0, utils_1.validateOption)('endpointUrl option', opts.endpointUrl, 'string');\n}\nexports.validateAdminOpts = validateAdminOpts;\n//# sourceMappingURL=astra-admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL2FzdHJhLWFkbWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixHQUFHLGVBQWUsR0FBRyxrQkFBa0I7QUFDaEUsY0FBYyxtQkFBTyxDQUFDLDRFQUFRO0FBQzlCLGdCQUFnQixtQkFBTyxDQUFDLDRGQUFtQjtBQUMzQyxhQUFhLG1CQUFPLENBQUMsc0ZBQWdCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxLQUFLLDJCQUEyQjtBQUN6RTtBQUNBLDREQUE0RCxvQkFBb0I7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDhCQUE4QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDJCQUEyQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxHQUFHO0FBQ25DLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRCQUE0QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELG1CQUFtQjtBQUN4RTtBQUNBO0FBQ0EsaUNBQWlDLFNBQVM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELDRCQUE0QjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELFVBQVU7QUFDaEUsZ0VBQWdFLHFCQUFxQjtBQUNyRjtBQUNBO0FBQ0EsWUFBWSw2QkFBNkI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsb0JBQW9CO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsaUpBQWlKLHVEQUF1RDtBQUN4TTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsVUFBVTtBQUM1RDtBQUNBLG9EQUFvRCw0QkFBNEI7QUFDaEY7QUFDQTtBQUNBLDBFQUEwRSxnQ0FBZ0M7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2Rldm9wcy9hc3RyYS1hZG1pbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfQXN0cmFBZG1pbl9kZWZhdWx0T3B0cztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVBZG1pbk9wdHMgPSBleHBvcnRzLm1rQWRtaW4gPSBleHBvcnRzLkFzdHJhQWRtaW4gPSB2b2lkIDA7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCIuLi9hcGlcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL2RhdGEtYXBpL3V0aWxzXCIpO1xuY29uc3QgZGJfMSA9IHJlcXVpcmUoXCIuLi9kYXRhLWFwaS9kYlwiKTtcbi8qKlxuICogQW4gYWRtaW5pc3RyYXRpdmUgY2xhc3MgZm9yIG1hbmFnaW5nIEFzdHJhIGRhdGFiYXNlcywgaW5jbHVkaW5nIGNyZWF0aW5nLCBsaXN0aW5nLCBhbmQgZGVsZXRpbmcgZGF0YWJhc2VzLlxuICpcbiAqICoqU2hvdWxkbid0IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseTsgdXNlIHtAbGluayBEYXRhQVBJQ2xpZW50LmFkbWlufSB0byBvYnRhaW4gYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy4qKlxuICpcbiAqIFRvIHBlcmZvcm0gYWRtaW4gdGFza3Mgb24gYSBwZXItZGF0YWJhc2UgYmFzaXMsIHNlZSB0aGUge0BsaW5rIEFzdHJhRGJBZG1pbn0gY2xhc3MuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IGNsaWVudCA9IG5ldyBEYXRhQVBJQ2xpZW50KCd0b2tlbicpO1xuICpcbiAqIC8vIENyZWF0ZSBhbiBhZG1pbiBpbnN0YW5jZSB3aXRoIHRoZSBkZWZhdWx0IHRva2VuXG4gKiBjb25zdCBhZG1pbjEgPSBjbGllbnQuYWRtaW4oKTtcbiAqXG4gKiAvLyBDcmVhdGUgYW4gYWRtaW4gaW5zdGFuY2Ugd2l0aCBhIGN1c3RvbSB0b2tlblxuICogY29uc3QgYWRtaW4yID0gY2xpZW50LmFkbWluKHsgYWRtaW5Ub2tlbjogJ3N0cm9uZ2VyLXRva2VuJyB9KTtcbiAqXG4gKiBjb25zdCBkYnMgPSBhd2FpdCBhZG1pbjEubGlzdERhdGFiYXNlcygpO1xuICogY29uc29sZS5sb2coZGJzKTtcbiAqIGBgYFxuICpcbiAqIEBzZWUgRGF0YUFQSUNsaWVudC5hZG1pblxuICogQHNlZSBBc3RyYURiQWRtaW5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIEFzdHJhQWRtaW4ge1xuICAgIC8qKlxuICAgICAqIFVzZSB7QGxpbmsgRGF0YUFQSUNsaWVudC5hZG1pbn0gdG8gb2J0YWluIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIF9Bc3RyYUFkbWluX2RlZmF1bHRPcHRzLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaHR0cENsaWVudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBhZG1pbk9wdHMgPSBvcHRpb25zLmFkbWluT3B0aW9ucyA/PyB7fTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQXN0cmFBZG1pbl9kZWZhdWx0T3B0cywgb3B0aW9ucywgXCJmXCIpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ19odHRwQ2xpZW50Jywge1xuICAgICAgICAgICAgdmFsdWU6IG5ldyBhcGlfMS5EZXZPcHNBUElIdHRwQ2xpZW50KHtcbiAgICAgICAgICAgICAgICBiYXNlVXJsOiBhZG1pbk9wdHMuZW5kcG9pbnRVcmwgfHwgYXBpXzEuREVGQVVMVF9ERVZPUFNfQVBJX0VORFBPSU5ULFxuICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uVG9rZW46IGFkbWluT3B0cy5hZG1pblRva2VuLFxuICAgICAgICAgICAgICAgIG1vbml0b3JDb21tYW5kczogYWRtaW5PcHRzLm1vbml0b3JDb21tYW5kcyxcbiAgICAgICAgICAgICAgICBlbWl0dGVyOiBvcHRpb25zLmVtaXR0ZXIsXG4gICAgICAgICAgICAgICAgZmV0Y2hDdHg6IG9wdGlvbnMuZmV0Y2hDdHgsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGIoZW5kcG9pbnRPcklkLCByZWdpb25Pck9wdGlvbnMsIG1heWJlT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsIGRiXzEubWtEYikoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXN0cmFBZG1pbl9kZWZhdWx0T3B0cywgXCJmXCIpLCBlbmRwb2ludE9ySWQsIHJlZ2lvbk9yT3B0aW9ucywgbWF5YmVPcHRpb25zKTtcbiAgICB9XG4gICAgZGJBZG1pbihlbmRwb2ludE9ySWQsIHJlZ2lvbk9yT3B0aW9ucywgbWF5YmVPcHRpb25zKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBjYWxscyBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBtZXRob2RcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIoZW5kcG9pbnRPcklkLCByZWdpb25Pck9wdGlvbnMsIG1heWJlT3B0aW9ucykuYWRtaW4oX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXN0cmFBZG1pbl9kZWZhdWx0T3B0cywgXCJmXCIpLmFkbWluT3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIGNvbXBsZXRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkYXRhYmFzZSwgc3VjaCBhcyB0aGUgZGF0YWJhc2UgbmFtZSwgSURzLCByZWdpb24sIHN0YXR1cywgYWN0aW9ucywgYW5kXG4gICAgICogb3RoZXIgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBpbmZvID0gYXdhaXQgYWRtaW4uaW5mbygnPGRiX2lkPicpO1xuICAgICAqIGNvbnNvbGUubG9nKGluZm8uaW5mby5uYW1lLCBpbmZvLmNyZWF0aW9uVGltZSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgY29tcGxldGUgZGF0YWJhc2UgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgZGJJbmZvKGlkLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLl9odHRwQ2xpZW50LnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBhcGlfMS5IdHRwTWV0aG9kcy5HZXQsXG4gICAgICAgICAgICBwYXRoOiBgL2RhdGFiYXNlcy8ke2lkfWAsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVzcC5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0cyBhbGwgZGF0YWJhc2VzIGluIHRoZSBjdXJyZW50IG9yZy9hY2NvdW50LCBtYXRjaGluZyB0aGUgb3B0aW9uYWxseSBwcm92aWRlZCBmaWx0ZXIuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgaXMgcGFnaW5hdGVkLCBidXQgdGhlIHBhZ2Ugc2l6ZSBpcyBoaWdoIGVub3VnaCB0aGF0IG1vc3QgdXNlcnMgd29uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCBpdC5cbiAgICAgKiBIb3dldmVyLCB5b3UgY2FuIHVzZSB0aGUgYGxpbWl0YCBhbmQgYHNraXBgIG9wdGlvbnMgdG8gY29udHJvbCB0aGUgbnVtYmVyIG9mIHJlc3VsdHMgcmV0dXJuZWQgYW5kIHRoZSBzdGFydGluZyBwb2ludFxuICAgICAqIGZvciB0aGUgcmVzdWx0cywgYXMgbmVlZGVkLlxuICAgICAqXG4gICAgICogWW91IGNhbiBhbHNvIGZpbHRlciBieSB0aGUgZGF0YWJhc2Ugc3RhdHVzIHVzaW5nIHRoZSBgaW5jbHVkZWAgb3B0aW9uLCBhbmQgYnkgdGhlIGRhdGFiYXNlIHByb3ZpZGVyIHVzaW5nIHRoZVxuICAgICAqIGBwcm92aWRlcmAgb3B0aW9uLlxuICAgICAqXG4gICAgICogU2VlIHtAbGluayBMaXN0RGF0YWJhc2VzT3B0aW9uc30gZm9yIGNvbXBsZXRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvcHRpb25zIGF2YWlsYWJsZSBmb3IgdGhpcyBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZG1pbiA9IG5ldyBEYXRhQVBJQ2xpZW50KCdBc3RyYUNTOi4uLicpLmFkbWluKCk7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY3RpdmVEYnMgPSBhd2FpdCBhZG1pbi5saXN0RGF0YWJhc2VzKHsgaW5jbHVkZTogJ0FDVElWRScgfSk7XG4gICAgICpcbiAgICAgKiBmb3IgKGNvbnN0IGRiIG9mIGFjdGl2ZURicykge1xuICAgICAqIMKgIGNvbnNvbGUubG9nKGBEYXRhYmFzZSAke2RiLm5hbWV9IGlzIGFjdGl2ZWApO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdG8gZmlsdGVyIHRoZSBkYXRhYmFzZXMgYnkuXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIHRoZSBjb21wbGV0ZSBpbmZvcm1hdGlvbiBmb3IgYWxsIHRoZSBkYXRhYmFzZXMgbWF0Y2hpbmcgdGhlIGdpdmVuIGZpbHRlci5cbiAgICAgKi9cbiAgICBhc3luYyBsaXN0RGF0YWJhc2VzKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHRoaXMuX2h0dHBDbGllbnQucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IGFwaV8xLkh0dHBNZXRob2RzLkdldCxcbiAgICAgICAgICAgIHBhdGg6IGAvZGF0YWJhc2VzYCxcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgIGluY2x1ZGU6IG9wdGlvbnM/LmluY2x1ZGUsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXI6IG9wdGlvbnM/LnByb3ZpZGVyLFxuICAgICAgICAgICAgICAgIGxpbWl0OiBvcHRpb25zPy5saW1pdCxcbiAgICAgICAgICAgICAgICBzdGFydGluZ19hZnRlcjogb3B0aW9ucz8uc2tpcCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVzcC5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGRhdGFiYXNlIHdpdGggdGhlIGdpdmVuIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5CLiB0aGlzIGlzIGEgbG9uZy1ydW5uaW5nIG9wZXJhdGlvbi4gU2VlIHtAbGluayBBZG1pbkJsb2NraW5nT3B0aW9uc30gYWJvdXQgc3VjaCBibG9ja2luZyBvcGVyYXRpb25zLioqIFRoZVxuICAgICAqIGRlZmF1bHQgcG9sbGluZyBpbnRlcnZhbCBpcyAxMCBzZWNvbmRzLiBFeHBlY3QgaXQgdG8gdGFrZSByb3VnaGx5IDIgbWluIHRvIGNvbXBsZXRlLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0ICoqdGhlIGBuYW1lYCBmaWVsZCBpcyBub24tdW5pcXVlKiogYW5kIHRodXMgY3JlYXRpbmcgYSBkYXRhYmFzZSwgZXZlbiB3aXRoIHRoZSBzYW1lIG9wdGlvbnMsIGlzICoqbm90XG4gICAgICogaWRlbXBvdGVudCoqLlxuICAgICAqXG4gICAgICogWW91IG1heSBhbHNvIHByb3ZpZGUgb3B0aW9ucyBmb3IgdGhlIGltcGxpY2l0IHtAbGluayBEYn0gaW5zdGFuY2UgdGhhdCB3aWxsIGJlIGNyZWF0ZWQgd2l0aCB0aGUgZGF0YWJhc2UsIHdoaWNoXG4gICAgICogd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdCBvcHRpb25zIHNldCB3aGVuIGNyZWF0aW5nIHRoZSB7QGxpbmsgRGF0YUFQSUNsaWVudH0gdGhyb3VnaCBhIGRlZXAgbWVyZ2UgKGkuZS4gdW5zZXRcbiAgICAgKiBwcm9wZXJ0aWVzIGluIHRoZSBvcHRpb25zIG9iamVjdCB3aWxsIGp1c3QgZGVmYXVsdCB0byB0aGUgZGVmYXVsdCBvcHRpb25zKS5cbiAgICAgKlxuICAgICAqIFNlZSB7QGxpbmsgQ3JlYXRlRGF0YWJhc2VPcHRpb25zfSBmb3IgY29tcGxldGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9wdGlvbnMgYXZhaWxhYmxlIGZvciB0aGlzIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG5ld0RiQWRtaW4xID0gYXdhaXQgYWRtaW4uY3JlYXRlRGF0YWJhc2Uoe1xuICAgICAqIMKgIG5hbWU6ICdteV9kYXRhYmFzZV8xJyxcbiAgICAgKiDCoCBjbG91ZFByb3ZpZGVyOiAnR0NQJyxcbiAgICAgKiDCoCByZWdpb246ICd1cy1lYXN0MScsXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiAvLyBQcmludHMgJ1tdJyBhcyB0aGVyZSBhcmUgbm8gY29sbGVjdGlvbnMgaW4gdGhlIGRhdGFiYXNlIHlldFxuICAgICAqIGNvbnNvbGUubG9nKG5ld0RiQWRtaW4xLmRiKCkubGlzdENvbGxlY3Rpb25zKCkpO1xuICAgICAqXG4gICAgICogY29uc3QgbmV3RGJBZG1pbjIgPSBhd2FpdCBhZG1pbi5jcmVhdGVEYXRhYmFzZSh7XG4gICAgICogwqAgbmFtZTogJ215X2RhdGFiYXNlXzInLFxuICAgICAqIMKgIGNsb3VkUHJvdmlkZXI6ICdHQ1AnLFxuICAgICAqIMKgIHJlZ2lvbjogJ3VzLWVhc3QxJyxcbiAgICAgKiDCoCBuYW1lc3BhY2U6ICdteV9uYW1lc3BhY2UnLFxuICAgICAqIH0sIHtcbiAgICAgKiDCoCBibG9ja2luZzogZmFsc2UsXG4gICAgICogwqAgZGJPcHRpb25zOiB7XG4gICAgICogwqAgICB1c2VIdHRwMjogZmFsc2UsXG4gICAgICogwqAgICB0b2tlbjogJzx3ZWFrZXItdG9rZW4+JyxcbiAgICAgKiDCoCB9LFxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogLy8gQ2FuJ3QgZG8gbXVjaCBlbHNlIGFzIHRoZSBkYXRhYmFzZSBpcyBzdGlsbCBpbml0aWFsaXppbmdcbiAgICAgKiBjb25zb2xlLmxvZyhuZXdEYkFkbWluMi5kYigpLmlkKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogTm90ZSB0aGF0IGlmIHlvdSBjaG9vc2Ugbm90IHRvIGJsb2NrLCB0aGUgcmV0dXJuZWQge0BsaW5rIEFzdHJhRGJBZG1pbn0gb2JqZWN0IHdpbGwgbm90IGJlIHZlcnkgdXNlZnVsIHVudGlsIHRoZVxuICAgICAqIG9wZXJhdGlvbiBjb21wbGV0ZXMsIHdoaWNoIGlzIHVwIHRvIHRoZSBjYWxsZXIgdG8gZGV0ZXJtaW5lLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZyAtIFRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgbmV3IGRhdGFiYXNlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBibG9ja2luZyBiZWhhdmlvciBvZiB0aGUgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIEFzdHJhRGJBZG1pbiBpbnN0YW5jZSBmb3IgdGhlIG5ld2x5IGNyZWF0ZWQgZGF0YWJhc2UuXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlRGF0YWJhc2UoY29uZmlnLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGRlZmluaXRpb24gPSB7XG4gICAgICAgICAgICBjYXBhY2l0eVVuaXRzOiAxLFxuICAgICAgICAgICAgdGllcjogJ3NlcnZlcmxlc3MnLFxuICAgICAgICAgICAgZGJUeXBlOiAndmVjdG9yJyxcbiAgICAgICAgICAgIGtleXNwYWNlOiBjb25maWcubmFtZXNwYWNlIHx8IGFwaV8xLkRFRkFVTFRfTkFNRVNQQUNFLFxuICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5faHR0cENsaWVudC5yZXF1ZXN0TG9uZ1J1bm5pbmcoe1xuICAgICAgICAgICAgbWV0aG9kOiBhcGlfMS5IdHRwTWV0aG9kcy5Qb3N0LFxuICAgICAgICAgICAgcGF0aDogJy9kYXRhYmFzZXMnLFxuICAgICAgICAgICAgZGF0YTogZGVmaW5pdGlvbixcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgaWQ6IChyZXNwKSA9PiByZXNwLmhlYWRlcnMuZ2V0KCdsb2NhdGlvbicpLFxuICAgICAgICAgICAgdGFyZ2V0OiAnQUNUSVZFJyxcbiAgICAgICAgICAgIGxlZ2FsU3RhdGVzOiBbJ0lOSVRJQUxJWklORycsICdQRU5ESU5HJ10sXG4gICAgICAgICAgICBkZWZhdWx0UG9sbEludGVydmFsOiAxMDAwMCxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBkYiA9ICgwLCBkYl8xLm1rRGIpKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FzdHJhQWRtaW5fZGVmYXVsdE9wdHMsIFwiZlwiKSwgcmVzcC5oZWFkZXJzLmdldCgnbG9jYXRpb24nKSwgZGVmaW5pdGlvbi5yZWdpb24sIHsgLi4ub3B0aW9ucz8uZGJPcHRpb25zLCBuYW1lc3BhY2U6IGRlZmluaXRpb24ua2V5c3BhY2UgfSk7XG4gICAgICAgIHJldHVybiBkYi5hZG1pbihfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Bc3RyYUFkbWluX2RlZmF1bHRPcHRzLCBcImZcIikuYWRtaW5PcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVybWluYXRlcyBhIGRhdGFiYXNlIGJ5IElEIG9yIGJ5IGEgZ2l2ZW4ge0BsaW5rIERifSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqICoqTkIuIHRoaXMgaXMgYSBsb25nLXJ1bm5pbmcgb3BlcmF0aW9uLiBTZWUge0BsaW5rIEFkbWluQmxvY2tpbmdPcHRpb25zfSBhYm91dCBzdWNoIGJsb2NraW5nIG9wZXJhdGlvbnMuKiogVGhlXG4gICAgICogZGVmYXVsdCBwb2xsaW5nIGludGVydmFsIGlzIDEwIHNlY29uZHMuIEV4cGVjdCBpdCB0byB0YWtlIHJvdWdobHkgNi03IG1pbiB0byBjb21wbGV0ZS5cbiAgICAgKlxuICAgICAqIFRoZSBkYXRhYmFzZSBpbmZvIHdpbGwgc3RpbGwgYmUgYWNjZXNzaWJsZSBieSBJRCwgb3IgYnkgdXNpbmcgdGhlIHtAbGluayBBc3RyYUFkbWluLmxpc3REYXRhYmFzZXN9IG1ldGhvZCB3aXRoIHRoZSBmaWx0ZXJcbiAgICAgKiBzZXQgdG8gYCdBTEwnYCBvciBgJ1RFUk1JTkFURUQnYC4gSG93ZXZlciwgYWxsIG9mIGl0cyBkYXRhIHdpbGwgdmVyeSBtdWNoIGJlIGxvc3QuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBkYiA9IGNsaWVudC5kYignaHR0cHM6Ly88ZGJfaWQ+LTxyZWdpb24+LmFwcHMuYXN0cmEuZGF0YXN0YXguY29tJyk7XG4gICAgICogYXdhaXQgYWRtaW4uZHJvcERhdGFiYXNlKGRiKTtcbiAgICAgKlxuICAgICAqIC8vIE9yIGp1c3RcbiAgICAgKiBhd2FpdCBhZG1pbi5kcm9wRGF0YWJhc2UoJ2E2YTFkOGQ2LTMxYmMtNGFmOC1iZTU3LTM3NzU2NmYzNDViZicpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGRiIC0gVGhlIGRhdGFiYXNlIHRvIGRyb3AsIGVpdGhlciBieSBJRCBvciBieSBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgYmxvY2tpbmcgYmVoYXZpb3Igb2YgdGhlIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXMuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrcyBVc2Ugd2l0aCBjYXV0aW9uLiBXZWFyIGEgaGFybmVzcy4gRG9uJ3Qgc2F5IEkgZGlkbid0IHdhcm4geW91LlxuICAgICAqL1xuICAgIGFzeW5jIGRyb3BEYXRhYmFzZShkYiwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBpZCA9IHR5cGVvZiBkYiA9PT0gJ3N0cmluZycgPyBkYiA6IGRiLmlkO1xuICAgICAgICBhd2FpdCB0aGlzLl9odHRwQ2xpZW50LnJlcXVlc3RMb25nUnVubmluZyh7XG4gICAgICAgICAgICBtZXRob2Q6IGFwaV8xLkh0dHBNZXRob2RzLlBvc3QsXG4gICAgICAgICAgICBwYXRoOiBgL2RhdGFiYXNlcy8ke2lkfS90ZXJtaW5hdGVgLFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICB0YXJnZXQ6ICdURVJNSU5BVEVEJyxcbiAgICAgICAgICAgIGxlZ2FsU3RhdGVzOiBbJ1RFUk1JTkFUSU5HJ10sXG4gICAgICAgICAgICBkZWZhdWx0UG9sbEludGVydmFsOiAxMDAwMCxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuQXN0cmFBZG1pbiA9IEFzdHJhQWRtaW47XG5fQXN0cmFBZG1pbl9kZWZhdWx0T3B0cyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBta0FkbWluKHJvb3RPcHRzLCBvcHRpb25zKSB7XG4gICAgdmFsaWRhdGVBZG1pbk9wdHMob3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBBc3RyYUFkbWluKHtcbiAgICAgICAgLi4ucm9vdE9wdHMsXG4gICAgICAgIGFkbWluT3B0aW9uczoge1xuICAgICAgICAgICAgLi4ucm9vdE9wdHM/LmFkbWluT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5leHBvcnRzLm1rQWRtaW4gPSBta0FkbWluO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVBZG1pbk9wdHMob3B0cykge1xuICAgICgwLCB1dGlsc18xLnZhbGlkYXRlT3B0aW9uKSgnYWRtaW4gb3B0aW9ucycsIG9wdHMsICdvYmplY3QnKTtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAoMCwgdXRpbHNfMS52YWxpZGF0ZU9wdGlvbikoJ21vbml0b3JDb21tYW5kcyBvcHRpb24nLCBvcHRzLm1vbml0b3JDb21tYW5kcywgJ2Jvb2xlYW4nKTtcbiAgICAoMCwgdXRpbHNfMS52YWxpZGF0ZU9wdGlvbikoJ2FkbWluVG9rZW4gb3B0aW9uJywgb3B0cy5hZG1pblRva2VuLCAnc3RyaW5nJyk7XG4gICAgKDAsIHV0aWxzXzEudmFsaWRhdGVPcHRpb24pKCdlbmRwb2ludFVybCBvcHRpb24nLCBvcHRzLmVuZHBvaW50VXJsLCAnc3RyaW5nJyk7XG59XG5leHBvcnRzLnZhbGlkYXRlQWRtaW5PcHRzID0gdmFsaWRhdGVBZG1pbk9wdHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3RyYS1hZG1pbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-db-admin.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/astra-db-admin.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mkDbAdmin = exports.AstraDbAdmin = void 0;\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\nconst db_admin_1 = __webpack_require__(/*! ../devops/db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js\");\nconst astra_admin_1 = __webpack_require__(/*! ../devops/astra-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js\");\n/**\n * An administrative class for managing Astra databases, including creating, listing, and deleting databases.\n *\n * **Shouldn't be instantiated directly; use {@link DataAPIClient.admin} to obtain an instance of this class.**\n *\n * To perform admin tasks on a per-database basis, see the {@link AstraDbAdmin} class.\n *\n * @example\n * ```typescript\n * const client = new DataAPIClient('token');\n *\n * // Create an admin instance with the default token\n * const admin1 = client.admin();\n *\n * // Create an admin instance with a custom token\n * const admin2 = client.admin({ adminToken: 'stronger-token' });\n *\n * const dbs = await admin1.listDatabases();\n * console.log(dbs);\n * ```\n *\n * @see DataAPIClient.admin\n * @see AstraDbAdmin\n *\n * @public\n */\nclass AstraDbAdmin extends db_admin_1.DbAdmin {\n    /**\n     * Use {@link Db.admin} or {@link AstraAdmin.dbAdmin} to obtain an instance of this class.\n     *\n     * @internal\n     */\n    constructor(_db, options) {\n        super();\n        Object.defineProperty(this, \"_httpClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_db\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const adminOpts = options.adminOptions;\n        Object.defineProperty(this, '_httpClient', {\n            value: new api_1.DevOpsAPIHttpClient({\n                baseUrl: adminOpts.endpointUrl ?? api_1.DEFAULT_DEVOPS_API_ENDPOINT,\n                applicationToken: adminOpts.adminToken,\n                monitorCommands: adminOpts.monitorCommands,\n                fetchCtx: options.fetchCtx,\n                emitter: options.emitter,\n            }),\n            enumerable: false,\n        });\n        Object.defineProperty(this, '_db', {\n            value: _db,\n            enumerable: false,\n        });\n    }\n    /**\n     * Gets the ID of the Astra DB instance this object is managing.\n     *\n     * @returns The ID of the Astra DB instance.\n     */\n    get id() {\n        return this._db.id;\n    }\n    /**\n     * Gets the underlying `Db` object. The options for the db were set when the AstraDbAdmin instance, or whatever\n     * spawned it, was created.\n     *\n     * @example\n     * ```typescript\n     * const dbAdmin = client.admin().dbAdmin('<endpoint>', {\n     *   namespace: 'my-namespace',\n     *   useHttp2: false,\n     * });\n     *\n     * const db = dbAdmin.db();\n     * console.log(db.id);\n     * ```\n     *\n     * @returns The underlying `Db` object.\n     */\n    db() {\n        return this._db;\n    }\n    /**\n     * Fetches the complete information about the database, such as the database name, IDs, region, status, actions, and\n     * other metadata.\n     *\n     * The method issues a request to the DevOps API each time it is invoked, without caching mechanisms;\n     * this ensures up-to-date information for usages such as real-time collection validation by the application.\n     *\n     * @example\n     * ```typescript\n     * const info = await dbAdmin.info();\n     * console.log(info.info.name, info.creationTime);\n     * ```\n     *\n     * @returns A promise that resolves to the complete database information.\n     */\n    async info(options) {\n        const resp = await this._httpClient.request({\n            method: api_1.HttpMethods.Get,\n            path: `/databases/${this._db.id}`,\n        }, options);\n        return resp.data;\n    }\n    /**\n     * Lists the namespaces in the database.\n     *\n     * The first element in the returned array is the default namespace of the database, and the rest are additional\n     * namespaces in no particular order.\n     *\n     * @example\n     * ```typescript\n     * const namespaces = await dbAdmin.listNamespaces();\n     *\n     * // ['default_keyspace', 'my_other_keyspace']\n     * console.log(namespaces);\n     * ```\n     *\n     * @returns A promise that resolves to list of all the namespaces in the database.\n     */\n    async listNamespaces(options) {\n        return this.info(options).then(i => [i.info.keyspace, ...i.info.additionalKeyspaces ?? []].filter(Boolean));\n    }\n    /**\n     * Creates a new, additional, namespace (aka keyspace) for this database.\n     *\n     * **NB. this is a \"long-running\" operation. See {@link AdminBlockingOptions} about such blocking operations.** The\n     * default polling interval is 1 second. Expect it to take roughly 8-10 seconds to complete.\n     *\n     * @example\n     * ```typescript\n     * await dbAdmin.createNamespace('my_other_keyspace1');\n     *\n     * // ['default_keyspace', 'my_other_keyspace1']\n     * console.log(await dbAdmin.listNamespaces());\n     *\n     * await dbAdmin.createNamespace('my_other_keyspace2', {\n     *   blocking: false,\n     * });\n     *\n     * // Will not include 'my_other_keyspace2' until the operation completes\n     * console.log(await dbAdmin.listNamespaces());\n     * ```\n     *\n     * @remarks\n     * Note that if you choose not to block, the created namespace will not be able to be used until the\n     * operation completes, which is up to the caller to determine.\n     *\n     * @param namespace - The name of the new namespace.\n     * @param options - The options for the blocking behavior of the operation.\n     *\n     * @returns A promise that resolves when the operation completes.\n     */\n    async createNamespace(namespace, options) {\n        await this._httpClient.requestLongRunning({\n            method: api_1.HttpMethods.Post,\n            path: `/databases/${this._db.id}/keyspaces/${namespace}`,\n        }, {\n            id: this._db.id,\n            target: 'ACTIVE',\n            legalStates: ['MAINTENANCE'],\n            defaultPollInterval: 1000,\n            options,\n        });\n    }\n    /**\n     * Drops a namespace (aka keyspace) from this database.\n     *\n     * **NB. this is a \"long-running\" operation. See {@link AdminBlockingOptions} about such blocking operations.** The\n     * default polling interval is 1 second. Expect it to take roughly 8-10 seconds to complete.\n     *\n     * @example\n     * ```typescript\n     * await dbAdmin.dropNamespace('my_other_keyspace1');\n     *\n     * // ['default_keyspace', 'my_other_keyspace2']\n     * console.log(await dbAdmin.listNamespaces());\n     *\n     * await dbAdmin.dropNamespace('my_other_keyspace2', {\n     *   blocking: false,\n     * });\n     *\n     * // Will still include 'my_other_keyspace2' until the operation completes\n     * // ['default_keyspace', 'my_other_keyspace2']\n     * console.log(await dbAdmin.listNamespaces());\n     * ```\n     *\n     * @remarks\n     * Note that if you choose not to block, the namespace will still be able to be used until the operation\n     * completes, which is up to the caller to determine.\n     *\n     * @param namespace - The name of the namespace to drop.\n     * @param options - The options for the blocking behavior of the operation.\n     *\n     * @returns A promise that resolves when the operation completes.\n     */\n    async dropNamespace(namespace, options) {\n        await this._httpClient.requestLongRunning({\n            method: api_1.HttpMethods.Delete,\n            path: `/databases/${this._db.id}/keyspaces/${namespace}`,\n        }, {\n            id: this._db.id,\n            target: 'ACTIVE',\n            legalStates: ['MAINTENANCE'],\n            defaultPollInterval: 1000,\n            options,\n        });\n    }\n    /**\n     * Drops the database.\n     *\n     * **NB. this is a long-running operation. See {@link AdminBlockingOptions} about such blocking operations.** The\n     * default polling interval is 10 seconds. Expect it to take roughly 6-7 min to complete.\n     *\n     * The database info will still be accessible by ID, or by using the {@link AstraAdmin.listDatabases} method with the filter\n     * set to `'ALL'` or `'TERMINATED'`. However, all of its data will very much be lost.\n     *\n     * @example\n     * ```typescript\n     * const db = client.db('https://<db_id>-<region>.apps.astra.datastax.com');\n     * await db.admin().drop();\n     * ```\n     *\n     * @param options - The options for the blocking behavior of the operation.\n     *\n     * @returns A promise that resolves when the operation completes.\n     *\n     * @remarks Use with caution. Use a surge protector. Don't say I didn't warn you.\n     */\n    async drop(options) {\n        await this._httpClient.requestLongRunning({\n            method: api_1.HttpMethods.Post,\n            path: `/databases/${this._db.id}/terminate`,\n        }, {\n            id: this._db.id,\n            target: 'TERMINATED',\n            legalStates: ['TERMINATING'],\n            defaultPollInterval: 10000,\n            options,\n        });\n    }\n}\nexports.AstraDbAdmin = AstraDbAdmin;\n/**\n * @internal\n */\nfunction mkDbAdmin(db, rootOpts, options) {\n    (0, astra_admin_1.validateAdminOpts)(options);\n    return new AstraDbAdmin(db, {\n        ...rootOpts,\n        adminOptions: {\n            ...rootOpts.adminOptions,\n            ...options,\n        },\n    });\n}\nexports.mkDbAdmin = mkDbAdmin;\n//# sourceMappingURL=astra-db-admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-db-admin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js":
/*!********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DbAdmin = void 0;\n/**\n * Represents some DatabaseAdmin class used for managing some specific database.\n *\n * This abstract version lists the core functionalities that any database admin class may have, but\n * subclasses may have additional methods or properties (e.g. {@link AstraDbAdmin}).\n *\n * Use {@link Db.admin} or {@link AstraAdmin.dbAdmin} to obtain an instance of this class.\n *\n * @public\n */\nclass DbAdmin {\n}\nexports.DbAdmin = DbAdmin;\n//# sourceMappingURL=db-admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL2RiLWFkbWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxtQkFBbUI7QUFDbEY7QUFDQSxRQUFRLGdCQUFnQixJQUFJLDBCQUEwQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL2RiLWFkbWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EYkFkbWluID0gdm9pZCAwO1xuLyoqXG4gKiBSZXByZXNlbnRzIHNvbWUgRGF0YWJhc2VBZG1pbiBjbGFzcyB1c2VkIGZvciBtYW5hZ2luZyBzb21lIHNwZWNpZmljIGRhdGFiYXNlLlxuICpcbiAqIFRoaXMgYWJzdHJhY3QgdmVyc2lvbiBsaXN0cyB0aGUgY29yZSBmdW5jdGlvbmFsaXRpZXMgdGhhdCBhbnkgZGF0YWJhc2UgYWRtaW4gY2xhc3MgbWF5IGhhdmUsIGJ1dFxuICogc3ViY2xhc3NlcyBtYXkgaGF2ZSBhZGRpdGlvbmFsIG1ldGhvZHMgb3IgcHJvcGVydGllcyAoZS5nLiB7QGxpbmsgQXN0cmFEYkFkbWlufSkuXG4gKlxuICogVXNlIHtAbGluayBEYi5hZG1pbn0gb3Ige0BsaW5rIEFzdHJhQWRtaW4uZGJBZG1pbn0gdG8gb2J0YWluIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBEYkFkbWluIHtcbn1cbmV4cG9ydHMuRGJBZG1pbiA9IERiQWRtaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYi1hZG1pbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/errors.js":
/*!******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/errors.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DevOpsUnexpectedStateError = exports.DevOpsAPIResponseError = exports.DevOpsAPITimeoutError = exports.DevOpsAPIError = void 0;\nconst utils_1 = __webpack_require__(/*! ../api/utils */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/utils.js\");\n/**\n * An abstract class representing *some* exception that occurred related to the DevOps API. This is the base class for all\n * DevOps API errors, and will never be thrown directly.\n *\n * Useful for `instanceof` checks.\n *\n * @public\n */\nclass DevOpsAPIError extends Error {\n}\nexports.DevOpsAPIError = DevOpsAPIError;\n/**\n * An error thrown when an admin operation timed out.\n *\n * Depending on the method, this may be a request timeout occurring during a specific HTTP request, or can happen over\n * the course of a method involving several requests in a row, such as a blocking `createDatabase`.\n *\n * @field url - The URL that the request was made to.\n * @field timeout - The timeout that was set for the operation, in milliseconds.\n *\n * @public\n */\nclass DevOpsAPITimeoutError extends DevOpsAPIError {\n    /**\n     * Shouldn't be instantiated directly.\n     *\n     * @internal\n     */\n    constructor(url, timeout) {\n        super(`Command timed out after ${timeout}ms`);\n        /**\n         * The URL that the request was made to.\n         */\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         The timeout that was set for the operation, in milliseconds.\n         */\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.url = url;\n        this.timeout = timeout;\n        this.name = 'DevOpsAPITimeoutError';\n    }\n}\nexports.DevOpsAPITimeoutError = DevOpsAPITimeoutError;\n/**\n * An error representing a response from the DevOps API that was not successful (non-2XX status code).\n *\n * @field errors - The error descriptors returned by the API to describe what went wrong.\n * @field rootError - The raw axios error that was thrown.\n * @field status - The HTTP status code of the response, if available.\n *\n * @public\n */\nclass DevOpsAPIResponseError extends DevOpsAPIError {\n    /**\n     * Shouldn't be instantiated directly.\n     *\n     * @internal\n     */\n    constructor(resp, data) {\n        const message = data?.errors?.find(e => e.message)?.message ?? 'Something went wrong';\n        super(message);\n        /**\n         * The error descriptors returned by the API to describe what went wrong.\n         */\n        Object.defineProperty(this, \"errors\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The HTTP status code of the response, if available.\n         */\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The \"raw\", errored response from the API.\n         */\n        Object.defineProperty(this, \"raw\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.errors = extractErrorDescriptors(data);\n        this.status = resp.status;\n        this.raw = (0, utils_1.toCuratedApiResponse)(resp);\n        this.name = 'DevOpsAPIResponseError';\n    }\n}\nexports.DevOpsAPIResponseError = DevOpsAPIResponseError;\n/**\n * Error thrown when the DevOps API returns is in an unexpected state (i.e. `'PARKED'` when `'ACTIVE'` or `'PENDING'`\n * was expected).\n *\n * @field dbInfo - The complete database info, which includes the status of the database.\n * @field status - The HTTP status code of the response, if available.\n *\n * @public\n */\nclass DevOpsUnexpectedStateError extends DevOpsAPIError {\n    /**\n     * Shouldn't be instantiated directly.\n     *\n     * @internal\n     */\n    constructor(message, expected, data) {\n        super(message);\n        /**\n         * The expected states that were not met.\n         */\n        Object.defineProperty(this, \"expected\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The complete database info, which includes the status of the database.\n         */\n        Object.defineProperty(this, \"dbInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.expected = expected;\n        this.dbInfo = data;\n        this.name = 'DevOpsUnexpectedStateError';\n    }\n}\nexports.DevOpsUnexpectedStateError = DevOpsUnexpectedStateError;\nfunction extractErrorDescriptors(data) {\n    const errors = data?.errors || [];\n    return errors.map((e) => ({\n        id: e.ID,\n        message: e.message,\n    }));\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/events.js":
/*!******************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/events.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AdminCommandFailedEvent = exports.AdminCommandSucceededEvent = exports.AdminCommandPollingEvent = exports.AdminCommandStartedEvent = exports.AdminCommandEvent = void 0;\nconst api_1 = __webpack_require__(/*! ../api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/index.js\");\n/**\n * Common base class for all admin command events.\n *\n * @public\n */\nclass AdminCommandEvent {\n    /**\n     * Should not be instantiated directly.\n     *\n     * @internal\n     */\n    constructor(info, longRunning) {\n        /**\n         * The path for the request, not including the Base URL.\n         */\n        Object.defineProperty(this, \"path\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The HTTP method for the request.\n         */\n        Object.defineProperty(this, \"method\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The request body, if any.\n         */\n        Object.defineProperty(this, \"reqBody\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The query parameters, if any.\n         */\n        Object.defineProperty(this, \"params\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Whether the command is long-running or not, i.e. requires polling.\n         */\n        Object.defineProperty(this, \"longRunning\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.path = info.path;\n        this.method = info.method;\n        this.reqBody = info.data;\n        this.params = info.params;\n        this.longRunning = longRunning;\n    }\n}\nexports.AdminCommandEvent = AdminCommandEvent;\n/**\n * Event emitted when an admin command is started. This is emitted before the initial HTTP request is made.\n *\n * See {@link AdminCommandEvent} for more information about all the common properties available on this event.\n *\n * @public\n */\nclass AdminCommandStartedEvent extends AdminCommandEvent {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(info, longRunning, timeout) {\n        super(info, longRunning);\n        /**\n         * The timeout for the request, in milliseconds.\n         */\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.timeout = timeout;\n    }\n}\nexports.AdminCommandStartedEvent = AdminCommandStartedEvent;\n/**\n * Event emitted when a command is polling in a long-running operation (i.e. create database).\n *\n * Emits every time the command polls.\n *\n * See {@link AdminCommandEvent} for more information about all the common properties available on this event.\n *\n * @public\n */\nclass AdminCommandPollingEvent extends AdminCommandEvent {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(info, started, interval) {\n        super(info, true);\n        /**\n         * The elapsed time since the command was started, in milliseconds.\n         */\n        Object.defineProperty(this, \"elapsed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The polling interval, in milliseconds.\n         */\n        Object.defineProperty(this, \"interval\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.elapsed = (0, api_1.hrTimeMs)() - started;\n        this.interval = interval;\n    }\n}\nexports.AdminCommandPollingEvent = AdminCommandPollingEvent;\n/**\n * Event emitted when an admin command has succeeded, after any necessary polling.\n *\n * See {@link AdminCommandEvent} for more information about all the common properties available on this event.\n *\n * @public\n */\nclass AdminCommandSucceededEvent extends AdminCommandEvent {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(info, longRunning, data, started) {\n        super(info, longRunning);\n        /**\n         * The duration of the command, in milliseconds.\n         */\n        Object.defineProperty(this, \"duration\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The response body of the command, if any.\n         */\n        Object.defineProperty(this, \"resBody\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.duration = (0, api_1.hrTimeMs)() - started;\n        this.resBody = data || undefined;\n    }\n}\nexports.AdminCommandSucceededEvent = AdminCommandSucceededEvent;\n/**\n * Event emitted when an admin command has errored.\n *\n * See {@link AdminCommandEvent} for more information about all the common properties available on this event.\n *\n * @public\n */\nclass AdminCommandFailedEvent extends AdminCommandEvent {\n    /**\n     * Should not be instantiated by the user.\n     *\n     * @internal\n     */\n    constructor(info, longRunning, error, started) {\n        super(info, longRunning);\n        /**\n         * The duration of the command, in milliseconds.\n         */\n        Object.defineProperty(this, \"duration\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The error that occurred.\n         *\n         * Typically, some {@link DevOpsAPIError}, commonly a {@link DevOpsAPIResponseError} or sometimes a\n         * {@link DevOpsUnexpectedStateError}\n         */\n        Object.defineProperty(this, \"error\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.duration = (0, api_1.hrTimeMs)() - started;\n        this.error = error;\n    }\n}\nexports.AdminCommandFailedEvent = AdminCommandFailedEvent;\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// noinspection DuplicatedCode\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AstraDbAdmin = exports.AstraAdmin = void 0;\nvar astra_admin_1 = __webpack_require__(/*! ./astra-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-admin.js\");\nObject.defineProperty(exports, \"AstraAdmin\", ({ enumerable: true, get: function () { return astra_admin_1.AstraAdmin; } }));\nvar astra_db_admin_1 = __webpack_require__(/*! ./astra-db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/astra-db-admin.js\");\nObject.defineProperty(exports, \"AstraDbAdmin\", ({ enumerable: true, get: function () { return astra_db_admin_1.AstraDbAdmin; } }));\n__exportStar(__webpack_require__(/*! ./db-admin */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/db-admin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/errors.js\"), exports);\n__exportStar(__webpack_require__(/*! ./events */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/events.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxrQkFBa0I7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsNEZBQWU7QUFDM0MsOENBQTZDLEVBQUUscUNBQXFDLG9DQUFvQyxFQUFDO0FBQ3pILHVCQUF1QixtQkFBTyxDQUFDLGtHQUFrQjtBQUNqRCxnREFBK0MsRUFBRSxxQ0FBcUMseUNBQXlDLEVBQUM7QUFDaEksYUFBYSxtQkFBTyxDQUFDLHNGQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxrRkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsa0ZBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLHNGQUFTO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFTdGF4LCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vLyBub2luc3BlY3Rpb24gRHVwbGljYXRlZENvZGVcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3RyYURiQWRtaW4gPSBleHBvcnRzLkFzdHJhQWRtaW4gPSB2b2lkIDA7XG52YXIgYXN0cmFfYWRtaW5fMSA9IHJlcXVpcmUoXCIuL2FzdHJhLWFkbWluXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXN0cmFBZG1pblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXN0cmFfYWRtaW5fMS5Bc3RyYUFkbWluOyB9IH0pO1xudmFyIGFzdHJhX2RiX2FkbWluXzEgPSByZXF1aXJlKFwiLi9hc3RyYS1kYi1hZG1pblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzdHJhRGJBZG1pblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXN0cmFfZGJfYWRtaW5fMS5Bc3RyYURiQWRtaW47IH0gfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGItYWRtaW5cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Vycm9yc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXZlbnRzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/admin-common.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/admin-common.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=admin-common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL3R5cGVzL2FkbWluL2FkbWluLWNvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL3R5cGVzL2FkbWluL2FkbWluLWNvbW1vbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRtaW4tY29tbW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/admin-common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/create-database.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/create-database.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=create-database.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL3R5cGVzL2FkbWluL2NyZWF0ZS1kYXRhYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL3R5cGVzL2FkbWluL2NyZWF0ZS1kYXRhYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlLWRhdGFiYXNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/create-database.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/database-info.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/database-info.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=database-info.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL3R5cGVzL2FkbWluL2RhdGFiYXNlLWluZm8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2Rldm9wcy90eXBlcy9hZG1pbi9kYXRhYmFzZS1pbmZvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IERhdGFTdGF4LCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhYmFzZS1pbmZvLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/database-info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/list-databases.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/list-databases.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=list-databases.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL3R5cGVzL2FkbWluL2xpc3QtZGF0YWJhc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9kZXZvcHMvdHlwZXMvYWRtaW4vbGlzdC1kYXRhYmFzZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgRGF0YVN0YXgsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3QtZGF0YWJhc2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/list-databases.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/devops/types/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./admin/admin-common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/admin-common.js\"), exports);\n__exportStar(__webpack_require__(/*! ./admin/create-database */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/create-database.js\"), exports);\n__exportStar(__webpack_require__(/*! ./admin/database-info */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/database-info.js\"), exports);\n__exportStar(__webpack_require__(/*! ./admin/list-databases */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/admin/list-databases.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvZGV2b3BzL3R5cGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLGdIQUFzQjtBQUMzQyxhQUFhLG1CQUFPLENBQUMsc0hBQXlCO0FBQzlDLGFBQWEsbUJBQU8sQ0FBQyxrSEFBdUI7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLG9IQUF3QjtBQUM3QyIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L2Rldm9wcy90eXBlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWRtaW4vYWRtaW4tY29tbW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hZG1pbi9jcmVhdGUtZGF0YWJhc2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FkbWluL2RhdGFiYXNlLWluZm9cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FkbWluL2xpc3QtZGF0YWJhc2VzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/types/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright DataStax, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./data-api */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/data-api/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./client */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/client/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./devops */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/devops/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./common */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/common/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMscUZBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLGlGQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxpRkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsaUZBQVU7QUFDL0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9AZGF0YXN0YXgvYXN0cmEtZGItdHMvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBEYXRhU3RheCwgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGF0YS1hcGlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NsaWVudFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGV2b3BzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb21tb25cIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/version.js":
/*!************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/version.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LIB_VERSION = exports.LIB_NAME = void 0;\nexports.LIB_NAME = 'astra-db-ts';\nexports.LIB_VERSION = \"1.1.0\";\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRhdGFzdGF4L2FzdHJhLWRiLXRzL2Rpc3QvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxnQkFBZ0I7QUFDdEMsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL0BkYXRhc3RheC9hc3RyYS1kYi10cy9kaXN0L3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxJQl9WRVJTSU9OID0gZXhwb3J0cy5MSUJfTkFNRSA9IHZvaWQgMDtcbmV4cG9ydHMuTElCX05BTUUgPSAnYXN0cmEtZGItdHMnO1xuZXhwb3J0cy5MSUJfVkVSU0lPTiA9IFwiMS4xLjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@datastax/astra-db-ts/dist/version.js\n");

/***/ })

};
;