"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fetch-h2";
exports.ids = ["vendor-chunks/fetch-h2"];
exports.modules = {

/***/ "(rsc)/./node_modules/fetch-h2/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/fetch-h2/dist/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CookieJar = exports.TimeoutError = exports.AbortError = exports.Response = exports.Request = exports.Headers = exports.DataBody = exports.StreamBody = exports.JsonBody = exports.Body = exports.AbortController = exports.onPush = exports.disconnectAll = exports.disconnect = exports.fetch = exports.context = exports.setup = void 0;\nconst abort_1 = __webpack_require__(/*! ./lib/abort */ \"(rsc)/./node_modules/fetch-h2/dist/lib/abort.js\");\nObject.defineProperty(exports, \"AbortController\", ({ enumerable: true, get: function () { return abort_1.AbortController; } }));\nconst body_1 = __webpack_require__(/*! ./lib/body */ \"(rsc)/./node_modules/fetch-h2/dist/lib/body.js\");\nObject.defineProperty(exports, \"Body\", ({ enumerable: true, get: function () { return body_1.Body; } }));\nObject.defineProperty(exports, \"DataBody\", ({ enumerable: true, get: function () { return body_1.DataBody; } }));\nObject.defineProperty(exports, \"JsonBody\", ({ enumerable: true, get: function () { return body_1.JsonBody; } }));\nObject.defineProperty(exports, \"StreamBody\", ({ enumerable: true, get: function () { return body_1.StreamBody; } }));\nconst context_1 = __webpack_require__(/*! ./lib/context */ \"(rsc)/./node_modules/fetch-h2/dist/lib/context.js\");\nconst cookie_jar_1 = __webpack_require__(/*! ./lib/cookie-jar */ \"(rsc)/./node_modules/fetch-h2/dist/lib/cookie-jar.js\");\nObject.defineProperty(exports, \"CookieJar\", ({ enumerable: true, get: function () { return cookie_jar_1.CookieJar; } }));\nconst core_1 = __webpack_require__(/*! ./lib/core */ \"(rsc)/./node_modules/fetch-h2/dist/lib/core.js\");\nObject.defineProperty(exports, \"AbortError\", ({ enumerable: true, get: function () { return core_1.AbortError; } }));\nObject.defineProperty(exports, \"TimeoutError\", ({ enumerable: true, get: function () { return core_1.TimeoutError; } }));\nconst headers_1 = __webpack_require__(/*! ./lib/headers */ \"(rsc)/./node_modules/fetch-h2/dist/lib/headers.js\");\nObject.defineProperty(exports, \"Headers\", ({ enumerable: true, get: function () { return headers_1.Headers; } }));\nconst request_1 = __webpack_require__(/*! ./lib/request */ \"(rsc)/./node_modules/fetch-h2/dist/lib/request.js\");\nObject.defineProperty(exports, \"Request\", ({ enumerable: true, get: function () { return request_1.Request; } }));\nconst response_1 = __webpack_require__(/*! ./lib/response */ \"(rsc)/./node_modules/fetch-h2/dist/lib/response.js\");\nObject.defineProperty(exports, \"Response\", ({ enumerable: true, get: function () { return response_1.Response; } }));\nconst defaultContext = new context_1.Context();\nconst setup = (opts) => defaultContext.setup(opts);\nexports.setup = setup;\nconst fetch = (input, init) => defaultContext.fetch(input, init);\nexports.fetch = fetch;\nconst disconnect = (url) => defaultContext.disconnect(url);\nexports.disconnect = disconnect;\nconst disconnectAll = () => defaultContext.disconnectAll();\nexports.disconnectAll = disconnectAll;\nconst onPush = (handler) => defaultContext.onPush(handler);\nexports.onPush = onPush;\nfunction context(opts) {\n    const ctx = new context_1.Context(opts);\n    return {\n        disconnect: ctx.disconnect.bind(ctx),\n        disconnectAll: ctx.disconnectAll.bind(ctx),\n        fetch: ctx.fetch.bind(ctx),\n        onPush: ctx.onPush.bind(ctx),\n        setup: ctx.setup.bind(ctx),\n    };\n}\nexports.context = context;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyxvQkFBb0IsR0FBRyxrQkFBa0IsR0FBRyxnQkFBZ0IsR0FBRyxlQUFlLEdBQUcsZUFBZSxHQUFHLGdCQUFnQixHQUFHLGtCQUFrQixHQUFHLGdCQUFnQixHQUFHLFlBQVksR0FBRyx1QkFBdUIsR0FBRyxjQUFjLEdBQUcscUJBQXFCLEdBQUcsa0JBQWtCLEdBQUcsYUFBYSxHQUFHLGVBQWUsR0FBRyxhQUFhO0FBQ3hVLGdCQUFnQixtQkFBTyxDQUFDLG9FQUFhO0FBQ3JDLG1EQUFrRCxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUM3SCxlQUFlLG1CQUFPLENBQUMsa0VBQVk7QUFDbkMsd0NBQXVDLEVBQUUscUNBQXFDLHVCQUF1QixFQUFDO0FBQ3RHLDRDQUEyQyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM5Ryw0Q0FBMkMsRUFBRSxxQ0FBcUMsMkJBQTJCLEVBQUM7QUFDOUcsOENBQTZDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQ2xILGtCQUFrQixtQkFBTyxDQUFDLHdFQUFlO0FBQ3pDLHFCQUFxQixtQkFBTyxDQUFDLDhFQUFrQjtBQUMvQyw2Q0FBNEMsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDdEgsZUFBZSxtQkFBTyxDQUFDLGtFQUFZO0FBQ25DLDhDQUE2QyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUNsSCxnREFBK0MsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDdEgsa0JBQWtCLG1CQUFPLENBQUMsd0VBQWU7QUFDekMsMkNBQTBDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQy9HLGtCQUFrQixtQkFBTyxDQUFDLHdFQUFlO0FBQ3pDLDJDQUEwQyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUMvRyxtQkFBbUIsbUJBQU8sQ0FBQywwRUFBZ0I7QUFDM0MsNENBQTJDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ2xIO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9mZXRjaC1oMi9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db29raWVKYXIgPSBleHBvcnRzLlRpbWVvdXRFcnJvciA9IGV4cG9ydHMuQWJvcnRFcnJvciA9IGV4cG9ydHMuUmVzcG9uc2UgPSBleHBvcnRzLlJlcXVlc3QgPSBleHBvcnRzLkhlYWRlcnMgPSBleHBvcnRzLkRhdGFCb2R5ID0gZXhwb3J0cy5TdHJlYW1Cb2R5ID0gZXhwb3J0cy5Kc29uQm9keSA9IGV4cG9ydHMuQm9keSA9IGV4cG9ydHMuQWJvcnRDb250cm9sbGVyID0gZXhwb3J0cy5vblB1c2ggPSBleHBvcnRzLmRpc2Nvbm5lY3RBbGwgPSBleHBvcnRzLmRpc2Nvbm5lY3QgPSBleHBvcnRzLmZldGNoID0gZXhwb3J0cy5jb250ZXh0ID0gZXhwb3J0cy5zZXR1cCA9IHZvaWQgMDtcbmNvbnN0IGFib3J0XzEgPSByZXF1aXJlKFwiLi9saWIvYWJvcnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBYm9ydENvbnRyb2xsZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFib3J0XzEuQWJvcnRDb250cm9sbGVyOyB9IH0pO1xuY29uc3QgYm9keV8xID0gcmVxdWlyZShcIi4vbGliL2JvZHlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCb2R5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBib2R5XzEuQm9keTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRhdGFCb2R5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBib2R5XzEuRGF0YUJvZHk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJKc29uQm9keVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYm9keV8xLkpzb25Cb2R5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RyZWFtQm9keVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYm9keV8xLlN0cmVhbUJvZHk7IH0gfSk7XG5jb25zdCBjb250ZXh0XzEgPSByZXF1aXJlKFwiLi9saWIvY29udGV4dFwiKTtcbmNvbnN0IGNvb2tpZV9qYXJfMSA9IHJlcXVpcmUoXCIuL2xpYi9jb29raWUtamFyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29va2llSmFyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb29raWVfamFyXzEuQ29va2llSmFyOyB9IH0pO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIi4vbGliL2NvcmVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBYm9ydEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEuQWJvcnRFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRpbWVvdXRFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZV8xLlRpbWVvdXRFcnJvcjsgfSB9KTtcbmNvbnN0IGhlYWRlcnNfMSA9IHJlcXVpcmUoXCIuL2xpYi9oZWFkZXJzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSGVhZGVyc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGVhZGVyc18xLkhlYWRlcnM7IH0gfSk7XG5jb25zdCByZXF1ZXN0XzEgPSByZXF1aXJlKFwiLi9saWIvcmVxdWVzdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVlc3RfMS5SZXF1ZXN0OyB9IH0pO1xuY29uc3QgcmVzcG9uc2VfMSA9IHJlcXVpcmUoXCIuL2xpYi9yZXNwb25zZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlc3BvbnNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNwb25zZV8xLlJlc3BvbnNlOyB9IH0pO1xuY29uc3QgZGVmYXVsdENvbnRleHQgPSBuZXcgY29udGV4dF8xLkNvbnRleHQoKTtcbmNvbnN0IHNldHVwID0gKG9wdHMpID0+IGRlZmF1bHRDb250ZXh0LnNldHVwKG9wdHMpO1xuZXhwb3J0cy5zZXR1cCA9IHNldHVwO1xuY29uc3QgZmV0Y2ggPSAoaW5wdXQsIGluaXQpID0+IGRlZmF1bHRDb250ZXh0LmZldGNoKGlucHV0LCBpbml0KTtcbmV4cG9ydHMuZmV0Y2ggPSBmZXRjaDtcbmNvbnN0IGRpc2Nvbm5lY3QgPSAodXJsKSA9PiBkZWZhdWx0Q29udGV4dC5kaXNjb25uZWN0KHVybCk7XG5leHBvcnRzLmRpc2Nvbm5lY3QgPSBkaXNjb25uZWN0O1xuY29uc3QgZGlzY29ubmVjdEFsbCA9ICgpID0+IGRlZmF1bHRDb250ZXh0LmRpc2Nvbm5lY3RBbGwoKTtcbmV4cG9ydHMuZGlzY29ubmVjdEFsbCA9IGRpc2Nvbm5lY3RBbGw7XG5jb25zdCBvblB1c2ggPSAoaGFuZGxlcikgPT4gZGVmYXVsdENvbnRleHQub25QdXNoKGhhbmRsZXIpO1xuZXhwb3J0cy5vblB1c2ggPSBvblB1c2g7XG5mdW5jdGlvbiBjb250ZXh0KG9wdHMpIHtcbiAgICBjb25zdCBjdHggPSBuZXcgY29udGV4dF8xLkNvbnRleHQob3B0cyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGlzY29ubmVjdDogY3R4LmRpc2Nvbm5lY3QuYmluZChjdHgpLFxuICAgICAgICBkaXNjb25uZWN0QWxsOiBjdHguZGlzY29ubmVjdEFsbC5iaW5kKGN0eCksXG4gICAgICAgIGZldGNoOiBjdHguZmV0Y2guYmluZChjdHgpLFxuICAgICAgICBvblB1c2g6IGN0eC5vblB1c2guYmluZChjdHgpLFxuICAgICAgICBzZXR1cDogY3R4LnNldHVwLmJpbmQoY3R4KSxcbiAgICB9O1xufVxuZXhwb3J0cy5jb250ZXh0ID0gY29udGV4dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/abort.js":
/*!*************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/abort.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbortController = exports.signalEvent = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nexports.signalEvent = \"internal-abort\";\nclass AbortSignalImpl extends events_1.EventEmitter {\n    constructor() {\n        super();\n        this.aborted = false;\n        this.onabort = () => { };\n        this.once(exports.signalEvent, () => {\n            this.aborted = true;\n            this.emit(\"abort\");\n            this.onabort && this.onabort();\n        });\n    }\n}\nclass AbortController {\n    constructor() {\n        this.signal = new AbortSignalImpl();\n        this.abort = () => {\n            this.signal.emit(exports.signalEvent);\n        };\n    }\n}\nexports.AbortController = AbortController;\n//# sourceMappingURL=abort.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvYWJvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsbUJBQW1CO0FBQzdDLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9mZXRjaC1oMi9kaXN0L2xpYi9hYm9ydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWJvcnRDb250cm9sbGVyID0gZXhwb3J0cy5zaWduYWxFdmVudCA9IHZvaWQgMDtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmV4cG9ydHMuc2lnbmFsRXZlbnQgPSBcImludGVybmFsLWFib3J0XCI7XG5jbGFzcyBBYm9ydFNpZ25hbEltcGwgZXh0ZW5kcyBldmVudHNfMS5FdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbmFib3J0ID0gKCkgPT4geyB9O1xuICAgICAgICB0aGlzLm9uY2UoZXhwb3J0cy5zaWduYWxFdmVudCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImFib3J0XCIpO1xuICAgICAgICAgICAgdGhpcy5vbmFib3J0ICYmIHRoaXMub25hYm9ydCgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5jbGFzcyBBYm9ydENvbnRyb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNpZ25hbCA9IG5ldyBBYm9ydFNpZ25hbEltcGwoKTtcbiAgICAgICAgdGhpcy5hYm9ydCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsLmVtaXQoZXhwb3J0cy5zaWduYWxFdmVudCk7XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5BYm9ydENvbnRyb2xsZXIgPSBBYm9ydENvbnRyb2xsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hYm9ydC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/abort.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/body.js":
/*!************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/body.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BodyInspector = exports.DataBody = exports.StreamBody = exports.JsonBody = exports.Body = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst already_1 = __webpack_require__(/*! already */ \"(rsc)/./node_modules/already/dist/index.js\");\nconst get_stream_1 = __webpack_require__(/*! get-stream */ \"(rsc)/./node_modules/get-stream/index.js\");\nconst through2 = __webpack_require__(/*! through2 */ \"(rsc)/./node_modules/through2/through2.js\");\nconst toArrayBuffer = __webpack_require__(/*! to-arraybuffer */ \"(rsc)/./node_modules/to-arraybuffer/index.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/fetch-h2/dist/lib/core.js\");\nconst abortError = new core_1.AbortError(\"Response aborted\");\nfunction makeUnknownDataError() {\n    return new Error(\"Unknown body data\");\n}\nfunction throwIntegrityMismatch() {\n    throw new Error(\"Resource integrity mismatch\");\n}\nfunction throwLengthMismatch() {\n    throw new RangeError(\"Resource length mismatch (possibly incomplete body)\");\n}\nfunction parseIntegrity(integrity) {\n    const [algorithm, ...expectedHash] = integrity.split(\"-\");\n    return { algorithm, hash: expectedHash.join(\"-\") };\n}\nfunction isStream(body) {\n    return body &&\n        (\"readable\" in Object(body));\n}\nconst emptyBuffer = new ArrayBuffer(0);\nclass Body {\n    constructor() {\n        this._length = null;\n        this._used = false;\n        Object.defineProperties(this, {\n            bodyUsed: {\n                enumerable: true,\n                get: () => this._used,\n            },\n        });\n    }\n    async arrayBuffer(allowIncomplete = false) {\n        this._ensureUnused();\n        this._ensureNotAborted();\n        if (this._body == null)\n            return this.validateIntegrity(emptyBuffer, allowIncomplete);\n        else if (isStream(this._body))\n            return this.awaitBuffer(this._body)\n                .then(buffer => this.validateIntegrity(buffer, allowIncomplete))\n                .then(buffer => toArrayBuffer(buffer));\n        else if (Buffer.isBuffer(this._body))\n            return this.validateIntegrity(toArrayBuffer(this._body), allowIncomplete);\n        else\n            throw makeUnknownDataError();\n    }\n    async formData() {\n        throw new Error(\"Body.formData() is not yet implemented\");\n    }\n    async json() {\n        this._ensureUnused();\n        this._ensureNotAborted();\n        if (this._body == null)\n            return Promise.resolve(this.validateIntegrity(emptyBuffer, false))\n                .then(() => this._body);\n        else if (isStream(this._body))\n            return this.awaitBuffer(this._body)\n                .then((0, already_1.tap)(buffer => this.validateIntegrity(buffer, false)))\n                .then(buffer => JSON.parse(buffer.toString()));\n        else if (Buffer.isBuffer(this._body))\n            return Promise.resolve(this._body)\n                .then((0, already_1.tap)(buffer => this.validateIntegrity(buffer, false)))\n                .then(buffer => JSON.parse(buffer.toString()));\n        else\n            throw makeUnknownDataError();\n    }\n    async text(allowIncomplete = false) {\n        this._ensureUnused();\n        this._ensureNotAborted();\n        if (this._body == null)\n            return Promise.resolve(this.validateIntegrity(emptyBuffer, allowIncomplete))\n                .then(() => this._body);\n        else if (isStream(this._body))\n            return this.awaitBuffer(this._body)\n                .then((0, already_1.tap)(buffer => this.validateIntegrity(buffer, allowIncomplete)))\n                .then(buffer => buffer.toString());\n        else if (Buffer.isBuffer(this._body))\n            return Promise.resolve(this._body)\n                .then((0, already_1.tap)(buffer => this.validateIntegrity(buffer, allowIncomplete)))\n                .then(buffer => buffer.toString());\n        else\n            throw makeUnknownDataError();\n    }\n    async readable() {\n        this._ensureUnused();\n        this._ensureNotAborted();\n        if (this._body == null) {\n            const stream = through2();\n            stream.end();\n            return Promise.resolve(stream);\n        }\n        else if (isStream(this._body))\n            return Promise.resolve(this._body);\n        else if (Buffer.isBuffer(this._body))\n            return Promise.resolve(through2())\n                .then(stream => {\n                stream.write(this._body);\n                stream.end();\n                return stream;\n            });\n        else\n            throw makeUnknownDataError();\n    }\n    setSignal(signal) {\n        this._signal = signal;\n    }\n    hasBody() {\n        return \"_body\" in this;\n    }\n    setBody(body, mime, integrity, length = null) {\n        this._ensureUnused();\n        this._length = length;\n        this._used = false;\n        if (body instanceof Body) {\n            body._ensureUnused();\n            this._body = body._body;\n            this._mime = body._mime;\n        }\n        else if (typeof body === \"string\")\n            this._body = Buffer.from(body);\n        else if (body != null)\n            this._body = body;\n        else\n            this._body = body;\n        if (Buffer.isBuffer(this._body))\n            this._length = this._body.length;\n        if (mime)\n            this._mime = mime;\n        if (integrity)\n            this._integrity = integrity;\n    }\n    async awaitBuffer(readable) {\n        if (!this._signal)\n            return (0, get_stream_1.buffer)(readable);\n        // Race the readable against the abort signal\n        let callback = () => { };\n        const onAborted = new Promise((_, reject) => {\n            var _a;\n            callback = () => { reject(abortError); };\n            (_a = this._signal) === null || _a === void 0 ? void 0 : _a.addListener('abort', callback);\n        });\n        try {\n            this._ensureNotAborted();\n            return await Promise.race([\n                (0, get_stream_1.buffer)(readable),\n                onAborted,\n            ]);\n        }\n        finally {\n            this._signal.removeListener('abort', callback);\n            // Could happen if abort and other error happen practically\n            // simultaneously. Ensure Node.js won't get mad about this.\n            onAborted.catch(() => { });\n        }\n    }\n    validateIntegrity(data, allowIncomplete) {\n        this._ensureNotAborted();\n        if (!allowIncomplete &&\n            this._length != null &&\n            data.byteLength !== this._length)\n            throwLengthMismatch();\n        if (!this._integrity)\n            // This is valid\n            return data;\n        const { algorithm, hash: expectedHash } = parseIntegrity(this._integrity);\n        // jest (I presume) modifies ArrayBuffer, breaking instanceof\n        const instanceOfArrayBuffer = (val) => val && val.constructor && val.constructor.name === \"ArrayBuffer\";\n        const hash = (0, crypto_1.createHash)(algorithm)\n            .update(instanceOfArrayBuffer(data)\n            ? new DataView(data)\n            : data)\n            .digest(\"base64\");\n        if (expectedHash.toLowerCase() !== hash.toLowerCase())\n            throwIntegrityMismatch();\n        return data;\n    }\n    _ensureNotAborted() {\n        if (this._signal && this._signal.aborted)\n            throw abortError;\n    }\n    _ensureUnused() {\n        if (this._used)\n            throw new ReferenceError(\"Body already used\");\n        this._used = true;\n    }\n    // @ts-ignore\n    async blob() {\n        throw new Error(\"Body.blob() is not implemented (makes no sense in Node.js), \" +\n            \"use another getter.\");\n    }\n}\nexports.Body = Body;\nclass JsonBody extends Body {\n    constructor(obj) {\n        super();\n        const body = Buffer.from(JSON.stringify(obj));\n        this.setBody(body, \"application/json\");\n    }\n}\nexports.JsonBody = JsonBody;\nclass StreamBody extends Body {\n    constructor(readable) {\n        super();\n        this.setBody(readable);\n    }\n}\nexports.StreamBody = StreamBody;\nclass DataBody extends Body {\n    constructor(data) {\n        super();\n        this.setBody(data);\n    }\n}\nexports.DataBody = DataBody;\nclass BodyInspector extends Body {\n    constructor(body) {\n        super();\n        this._ref = body;\n    }\n    _getMime() {\n        return this._mime;\n    }\n    _getLength() {\n        return this._length;\n    }\n    _getBody() {\n        return this._body;\n    }\n    get mime() {\n        return this._getMime.call(this._ref);\n    }\n    get length() {\n        return this._getLength.call(this._ref);\n    }\n    get stream() {\n        const rawBody = this._getBody.call(this._ref);\n        return rawBody && isStream(rawBody) ? rawBody : undefined;\n    }\n}\nexports.BodyInspector = BodyInspector;\n//# sourceMappingURL=body.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/context-http1.js":
/*!*********************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/context-http1.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.H1Context = exports.OriginPool = void 0;\nconst http_1 = __webpack_require__(/*! http */ \"http\");\nconst https_1 = __webpack_require__(/*! https */ \"https\");\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst already_1 = __webpack_require__(/*! already */ \"(rsc)/./node_modules/already/dist/index.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/fetch-h2/dist/lib/core.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fetch-h2/dist/lib/utils.js\");\nclass OriginPool {\n    constructor(keepAlive, keepAliveMsecs, maxSockets, maxFreeSockets, timeout) {\n        this.usedSockets = new Set();\n        this.unusedSockets = new Set();\n        this.waiting = [];\n        this.keepAlive = keepAlive;\n        this.keepAliveMsecs = keepAliveMsecs;\n        this.maxSockets = maxSockets;\n        this.maxFreeSockets = maxFreeSockets;\n        this.connOpts = timeout == null ? {} : { timeout };\n    }\n    connect(options) {\n        const request = options.protocol === \"https:\"\n            ? https_1.request\n            : http_1.request;\n        const opts = { ...options };\n        if (opts.rejectUnauthorized == null || options.protocol === \"https\")\n            delete opts.rejectUnauthorized;\n        const req = request({ ...this.connOpts, ...opts });\n        return req;\n    }\n    addUsed(socket) {\n        if (this.keepAlive)\n            socket.setKeepAlive(true, this.keepAliveMsecs);\n        socket.once(\"close\", () => {\n            this.usedSockets.delete(socket);\n            this.unusedSockets.delete(socket);\n        });\n        this.usedSockets.add(socket);\n        return this.makeCleaner(socket);\n    }\n    getFreeSocket() {\n        const socketAndCleanup = this.getFirstUnused();\n        if (socketAndCleanup)\n            return { ...socketAndCleanup, shouldCreateNew: false };\n        const shouldCreateNew = this.maxSockets >= this.usedSockets.size;\n        return { shouldCreateNew };\n    }\n    waitForSocket() {\n        const deferred = (0, already_1.defer)();\n        this.waiting.push(deferred);\n        // Trigger due to potential race-condition\n        this.pumpWaiting();\n        return deferred.promise;\n    }\n    async disconnectAll() {\n        await Promise.all([...this.usedSockets, ...this.unusedSockets]\n            .map(socket => socket.destroyed ? void 0 : this.disconnectSocket(socket)));\n        const waiting = this.waiting;\n        this.waiting.length = 0;\n        waiting.forEach(waiter => \n        // TODO: Better error class + message\n        waiter.reject(new Error(\"Disconnected\")));\n    }\n    getFirstUnused() {\n        for (const socket of this.unusedSockets.values()) {\n            // We obviously have a socket\n            this.moveToUsed(socket);\n            return { socket, cleanup: this.makeCleaner(socket) };\n        }\n        return null;\n    }\n    tryReuse(socket) {\n        if (this.waiting.length === 0)\n            return false;\n        const waiting = this.waiting.shift();\n        waiting.resolve({ socket, cleanup: this.makeCleaner(socket) });\n        return true;\n    }\n    pumpWaiting() {\n        while (this.waiting.length > 0 && this.unusedSockets.size > 0) {\n            const socketAndCleanup = this.getFirstUnused();\n            const waiting = this.waiting.shift();\n            waiting.resolve(socketAndCleanup);\n        }\n    }\n    async disconnectSocket(socket) {\n        socket.destroy();\n    }\n    makeCleaner(socket) {\n        let hasCleaned = false;\n        return () => {\n            if (hasCleaned)\n                return;\n            hasCleaned = true;\n            if (!socket.destroyed)\n                this.moveToUnused(socket);\n        };\n    }\n    async moveToUnused(socket) {\n        if (this.tryReuse(socket))\n            return;\n        this.usedSockets.delete(socket);\n        if (this.maxFreeSockets < this.unusedSockets.size + 1) {\n            await this.disconnectSocket(socket);\n            return;\n        }\n        this.unusedSockets.add(socket);\n        socket.unref();\n    }\n    moveToUsed(socket) {\n        this.unusedSockets.delete(socket);\n        this.usedSockets.add(socket);\n        socket.ref();\n        return socket;\n    }\n}\nexports.OriginPool = OriginPool;\nclass ContextPool {\n    constructor(options) {\n        this.pools = new Map();\n        this.keepAlive = (0, core_1.parsePerOrigin)(options.keepAlive, true);\n        this.keepAliveMsecs = (0, core_1.parsePerOrigin)(options.keepAliveMsecs, 1000);\n        this.maxSockets = (0, core_1.parsePerOrigin)(options.maxSockets, 256);\n        this.maxFreeSockets = (0, core_1.parsePerOrigin)(options.maxFreeSockets, Infinity);\n        this.timeout = (0, core_1.parsePerOrigin)(options.timeout, void 0);\n    }\n    hasOrigin(origin) {\n        return this.pools.has(origin);\n    }\n    getOriginPool(origin) {\n        const pool = this.pools.get(origin);\n        if (!pool) {\n            const keepAlive = (0, core_1.getByOrigin)(this.keepAlive, origin);\n            const keepAliveMsecs = (0, core_1.getByOrigin)(this.keepAliveMsecs, origin);\n            const maxSockets = (0, core_1.getByOrigin)(this.maxSockets, origin);\n            const maxFreeSockets = (0, core_1.getByOrigin)(this.maxFreeSockets, origin);\n            const timeout = (0, core_1.getByOrigin)(this.timeout, origin);\n            const newPool = new OriginPool(keepAlive, keepAliveMsecs, maxSockets, maxFreeSockets, timeout);\n            this.pools.set(origin, newPool);\n            return newPool;\n        }\n        return pool;\n    }\n    async disconnect(origin) {\n        const pool = this.pools.get(origin);\n        if (pool)\n            await pool.disconnectAll();\n    }\n    async disconnectAll() {\n        const pools = [...this.pools.values()];\n        await Promise.all(pools.map(pool => pool.disconnectAll()));\n    }\n}\nfunction sessionToPool(session) {\n    return session;\n}\nclass H1Context {\n    constructor(options) {\n        this.contextPool = new ContextPool(options);\n    }\n    getSessionForOrigin(origin) {\n        return this.contextPool.getOriginPool(origin);\n    }\n    getFreeSocketForSession(session) {\n        const pool = sessionToPool(session);\n        return pool.getFreeSocket();\n    }\n    addUsedSocket(session, socket) {\n        const pool = sessionToPool(session);\n        return pool.addUsed(socket);\n    }\n    waitForSocketBySession(session) {\n        return sessionToPool(session).waitForSocket();\n    }\n    connect(url, extraOptions, request) {\n        const { origin, protocol, hostname, password, pathname, search, username, } = url;\n        const path = pathname + search;\n        const port = parseInt((0, utils_1.parseInput)(url.href).port, 10);\n        const method = request.method;\n        const auth = (username || password)\n            ? { auth: `${username}:${password}` }\n            : {};\n        const options = {\n            ...extraOptions,\n            agent: false,\n            hostname,\n            method,\n            path,\n            port,\n            protocol,\n            ...auth,\n        };\n        if (!options.headers)\n            options.headers = {};\n        options.headers.connection = this.contextPool.keepAlive\n            ? \"keep-alive\"\n            : \"close\";\n        return this.contextPool.getOriginPool(origin).connect(options);\n    }\n    async makeNewConnection(url) {\n        return new Promise((resolve, reject) => {\n            const { hostname, port } = (0, utils_1.parseInput)(url);\n            const socket = (0, net_1.createConnection)(parseInt(port, 10), hostname, () => {\n                resolve(socket);\n            });\n            socket.once(\"error\", reject);\n            return socket;\n        });\n    }\n    disconnect(url) {\n        const { origin } = new url_1.URL(url);\n        this.contextPool.disconnect(origin);\n    }\n    disconnectAll() {\n        this.contextPool.disconnectAll();\n    }\n}\nexports.H1Context = H1Context;\n//# sourceMappingURL=context-http1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvY29udGV4dC1odHRwMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyxrQkFBa0I7QUFDdEMsZUFBZSxtQkFBTyxDQUFDLGtCQUFNO0FBQzdCLGdCQUFnQixtQkFBTyxDQUFDLG9CQUFPO0FBQy9CLGNBQWMsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQixjQUFjLG1CQUFPLENBQUMsZ0JBQUs7QUFDM0Isa0JBQWtCLG1CQUFPLENBQUMsMkRBQVM7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLDhEQUFRO0FBQy9CLGdCQUFnQixtQkFBTyxDQUFDLGdFQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxJQUFJO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLDhCQUE4QiwyQkFBMkI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDJDQUEyQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvRUFBb0U7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUyxTQUFTLEdBQUcsU0FBUztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL2ZldGNoLWgyL2Rpc3QvbGliL2NvbnRleHQtaHR0cDEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkgxQ29udGV4dCA9IGV4cG9ydHMuT3JpZ2luUG9vbCA9IHZvaWQgMDtcbmNvbnN0IGh0dHBfMSA9IHJlcXVpcmUoXCJodHRwXCIpO1xuY29uc3QgaHR0cHNfMSA9IHJlcXVpcmUoXCJodHRwc1wiKTtcbmNvbnN0IG5ldF8xID0gcmVxdWlyZShcIm5ldFwiKTtcbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IGFscmVhZHlfMSA9IHJlcXVpcmUoXCJhbHJlYWR5XCIpO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIi4vY29yZVwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNsYXNzIE9yaWdpblBvb2wge1xuICAgIGNvbnN0cnVjdG9yKGtlZXBBbGl2ZSwga2VlcEFsaXZlTXNlY3MsIG1heFNvY2tldHMsIG1heEZyZWVTb2NrZXRzLCB0aW1lb3V0KSB7XG4gICAgICAgIHRoaXMudXNlZFNvY2tldHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMudW51c2VkU29ja2V0cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy53YWl0aW5nID0gW107XG4gICAgICAgIHRoaXMua2VlcEFsaXZlID0ga2VlcEFsaXZlO1xuICAgICAgICB0aGlzLmtlZXBBbGl2ZU1zZWNzID0ga2VlcEFsaXZlTXNlY3M7XG4gICAgICAgIHRoaXMubWF4U29ja2V0cyA9IG1heFNvY2tldHM7XG4gICAgICAgIHRoaXMubWF4RnJlZVNvY2tldHMgPSBtYXhGcmVlU29ja2V0cztcbiAgICAgICAgdGhpcy5jb25uT3B0cyA9IHRpbWVvdXQgPT0gbnVsbCA/IHt9IDogeyB0aW1lb3V0IH07XG4gICAgfVxuICAgIGNvbm5lY3Qob3B0aW9ucykge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gb3B0aW9ucy5wcm90b2NvbCA9PT0gXCJodHRwczpcIlxuICAgICAgICAgICAgPyBodHRwc18xLnJlcXVlc3RcbiAgICAgICAgICAgIDogaHR0cF8xLnJlcXVlc3Q7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgICAgICAgaWYgKG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09IG51bGwgfHwgb3B0aW9ucy5wcm90b2NvbCA9PT0gXCJodHRwc1wiKVxuICAgICAgICAgICAgZGVsZXRlIG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICAgICAgICBjb25zdCByZXEgPSByZXF1ZXN0KHsgLi4udGhpcy5jb25uT3B0cywgLi4ub3B0cyB9KTtcbiAgICAgICAgcmV0dXJuIHJlcTtcbiAgICB9XG4gICAgYWRkVXNlZChzb2NrZXQpIHtcbiAgICAgICAgaWYgKHRoaXMua2VlcEFsaXZlKVxuICAgICAgICAgICAgc29ja2V0LnNldEtlZXBBbGl2ZSh0cnVlLCB0aGlzLmtlZXBBbGl2ZU1zZWNzKTtcbiAgICAgICAgc29ja2V0Lm9uY2UoXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVzZWRTb2NrZXRzLmRlbGV0ZShzb2NrZXQpO1xuICAgICAgICAgICAgdGhpcy51bnVzZWRTb2NrZXRzLmRlbGV0ZShzb2NrZXQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51c2VkU29ja2V0cy5hZGQoc29ja2V0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFrZUNsZWFuZXIoc29ja2V0KTtcbiAgICB9XG4gICAgZ2V0RnJlZVNvY2tldCgpIHtcbiAgICAgICAgY29uc3Qgc29ja2V0QW5kQ2xlYW51cCA9IHRoaXMuZ2V0Rmlyc3RVbnVzZWQoKTtcbiAgICAgICAgaWYgKHNvY2tldEFuZENsZWFudXApXG4gICAgICAgICAgICByZXR1cm4geyAuLi5zb2NrZXRBbmRDbGVhbnVwLCBzaG91bGRDcmVhdGVOZXc6IGZhbHNlIH07XG4gICAgICAgIGNvbnN0IHNob3VsZENyZWF0ZU5ldyA9IHRoaXMubWF4U29ja2V0cyA+PSB0aGlzLnVzZWRTb2NrZXRzLnNpemU7XG4gICAgICAgIHJldHVybiB7IHNob3VsZENyZWF0ZU5ldyB9O1xuICAgIH1cbiAgICB3YWl0Rm9yU29ja2V0KCkge1xuICAgICAgICBjb25zdCBkZWZlcnJlZCA9ICgwLCBhbHJlYWR5XzEuZGVmZXIpKCk7XG4gICAgICAgIHRoaXMud2FpdGluZy5wdXNoKGRlZmVycmVkKTtcbiAgICAgICAgLy8gVHJpZ2dlciBkdWUgdG8gcG90ZW50aWFsIHJhY2UtY29uZGl0aW9uXG4gICAgICAgIHRoaXMucHVtcFdhaXRpbmcoKTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuICAgIGFzeW5jIGRpc2Nvbm5lY3RBbGwoKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFsuLi50aGlzLnVzZWRTb2NrZXRzLCAuLi50aGlzLnVudXNlZFNvY2tldHNdXG4gICAgICAgICAgICAubWFwKHNvY2tldCA9PiBzb2NrZXQuZGVzdHJveWVkID8gdm9pZCAwIDogdGhpcy5kaXNjb25uZWN0U29ja2V0KHNvY2tldCkpKTtcbiAgICAgICAgY29uc3Qgd2FpdGluZyA9IHRoaXMud2FpdGluZztcbiAgICAgICAgdGhpcy53YWl0aW5nLmxlbmd0aCA9IDA7XG4gICAgICAgIHdhaXRpbmcuZm9yRWFjaCh3YWl0ZXIgPT4gXG4gICAgICAgIC8vIFRPRE86IEJldHRlciBlcnJvciBjbGFzcyArIG1lc3NhZ2VcbiAgICAgICAgd2FpdGVyLnJlamVjdChuZXcgRXJyb3IoXCJEaXNjb25uZWN0ZWRcIikpKTtcbiAgICB9XG4gICAgZ2V0Rmlyc3RVbnVzZWQoKSB7XG4gICAgICAgIGZvciAoY29uc3Qgc29ja2V0IG9mIHRoaXMudW51c2VkU29ja2V0cy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgLy8gV2Ugb2J2aW91c2x5IGhhdmUgYSBzb2NrZXRcbiAgICAgICAgICAgIHRoaXMubW92ZVRvVXNlZChzb2NrZXQpO1xuICAgICAgICAgICAgcmV0dXJuIHsgc29ja2V0LCBjbGVhbnVwOiB0aGlzLm1ha2VDbGVhbmVyKHNvY2tldCkgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdHJ5UmV1c2Uoc29ja2V0KSB7XG4gICAgICAgIGlmICh0aGlzLndhaXRpbmcubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCB3YWl0aW5nID0gdGhpcy53YWl0aW5nLnNoaWZ0KCk7XG4gICAgICAgIHdhaXRpbmcucmVzb2x2ZSh7IHNvY2tldCwgY2xlYW51cDogdGhpcy5tYWtlQ2xlYW5lcihzb2NrZXQpIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcHVtcFdhaXRpbmcoKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLndhaXRpbmcubGVuZ3RoID4gMCAmJiB0aGlzLnVudXNlZFNvY2tldHMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNvY2tldEFuZENsZWFudXAgPSB0aGlzLmdldEZpcnN0VW51c2VkKCk7XG4gICAgICAgICAgICBjb25zdCB3YWl0aW5nID0gdGhpcy53YWl0aW5nLnNoaWZ0KCk7XG4gICAgICAgICAgICB3YWl0aW5nLnJlc29sdmUoc29ja2V0QW5kQ2xlYW51cCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZGlzY29ubmVjdFNvY2tldChzb2NrZXQpIHtcbiAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgbWFrZUNsZWFuZXIoc29ja2V0KSB7XG4gICAgICAgIGxldCBoYXNDbGVhbmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaGFzQ2xlYW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBoYXNDbGVhbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghc29ja2V0LmRlc3Ryb3llZClcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVUb1VudXNlZChzb2NrZXQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBtb3ZlVG9VbnVzZWQoc29ja2V0KSB7XG4gICAgICAgIGlmICh0aGlzLnRyeVJldXNlKHNvY2tldCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMudXNlZFNvY2tldHMuZGVsZXRlKHNvY2tldCk7XG4gICAgICAgIGlmICh0aGlzLm1heEZyZWVTb2NrZXRzIDwgdGhpcy51bnVzZWRTb2NrZXRzLnNpemUgKyAxKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRpc2Nvbm5lY3RTb2NrZXQoc29ja2V0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVudXNlZFNvY2tldHMuYWRkKHNvY2tldCk7XG4gICAgICAgIHNvY2tldC51bnJlZigpO1xuICAgIH1cbiAgICBtb3ZlVG9Vc2VkKHNvY2tldCkge1xuICAgICAgICB0aGlzLnVudXNlZFNvY2tldHMuZGVsZXRlKHNvY2tldCk7XG4gICAgICAgIHRoaXMudXNlZFNvY2tldHMuYWRkKHNvY2tldCk7XG4gICAgICAgIHNvY2tldC5yZWYoKTtcbiAgICAgICAgcmV0dXJuIHNvY2tldDtcbiAgICB9XG59XG5leHBvcnRzLk9yaWdpblBvb2wgPSBPcmlnaW5Qb29sO1xuY2xhc3MgQ29udGV4dFBvb2wge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wb29scyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5rZWVwQWxpdmUgPSAoMCwgY29yZV8xLnBhcnNlUGVyT3JpZ2luKShvcHRpb25zLmtlZXBBbGl2ZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMua2VlcEFsaXZlTXNlY3MgPSAoMCwgY29yZV8xLnBhcnNlUGVyT3JpZ2luKShvcHRpb25zLmtlZXBBbGl2ZU1zZWNzLCAxMDAwKTtcbiAgICAgICAgdGhpcy5tYXhTb2NrZXRzID0gKDAsIGNvcmVfMS5wYXJzZVBlck9yaWdpbikob3B0aW9ucy5tYXhTb2NrZXRzLCAyNTYpO1xuICAgICAgICB0aGlzLm1heEZyZWVTb2NrZXRzID0gKDAsIGNvcmVfMS5wYXJzZVBlck9yaWdpbikob3B0aW9ucy5tYXhGcmVlU29ja2V0cywgSW5maW5pdHkpO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSAoMCwgY29yZV8xLnBhcnNlUGVyT3JpZ2luKShvcHRpb25zLnRpbWVvdXQsIHZvaWQgMCk7XG4gICAgfVxuICAgIGhhc09yaWdpbihvcmlnaW4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9vbHMuaGFzKG9yaWdpbik7XG4gICAgfVxuICAgIGdldE9yaWdpblBvb2wob3JpZ2luKSB7XG4gICAgICAgIGNvbnN0IHBvb2wgPSB0aGlzLnBvb2xzLmdldChvcmlnaW4pO1xuICAgICAgICBpZiAoIXBvb2wpIHtcbiAgICAgICAgICAgIGNvbnN0IGtlZXBBbGl2ZSA9ICgwLCBjb3JlXzEuZ2V0QnlPcmlnaW4pKHRoaXMua2VlcEFsaXZlLCBvcmlnaW4pO1xuICAgICAgICAgICAgY29uc3Qga2VlcEFsaXZlTXNlY3MgPSAoMCwgY29yZV8xLmdldEJ5T3JpZ2luKSh0aGlzLmtlZXBBbGl2ZU1zZWNzLCBvcmlnaW4pO1xuICAgICAgICAgICAgY29uc3QgbWF4U29ja2V0cyA9ICgwLCBjb3JlXzEuZ2V0QnlPcmlnaW4pKHRoaXMubWF4U29ja2V0cywgb3JpZ2luKTtcbiAgICAgICAgICAgIGNvbnN0IG1heEZyZWVTb2NrZXRzID0gKDAsIGNvcmVfMS5nZXRCeU9yaWdpbikodGhpcy5tYXhGcmVlU29ja2V0cywgb3JpZ2luKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSAoMCwgY29yZV8xLmdldEJ5T3JpZ2luKSh0aGlzLnRpbWVvdXQsIG9yaWdpbik7XG4gICAgICAgICAgICBjb25zdCBuZXdQb29sID0gbmV3IE9yaWdpblBvb2woa2VlcEFsaXZlLCBrZWVwQWxpdmVNc2VjcywgbWF4U29ja2V0cywgbWF4RnJlZVNvY2tldHMsIHRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5wb29scy5zZXQob3JpZ2luLCBuZXdQb29sKTtcbiAgICAgICAgICAgIHJldHVybiBuZXdQb29sO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb29sO1xuICAgIH1cbiAgICBhc3luYyBkaXNjb25uZWN0KG9yaWdpbikge1xuICAgICAgICBjb25zdCBwb29sID0gdGhpcy5wb29scy5nZXQob3JpZ2luKTtcbiAgICAgICAgaWYgKHBvb2wpXG4gICAgICAgICAgICBhd2FpdCBwb29sLmRpc2Nvbm5lY3RBbGwoKTtcbiAgICB9XG4gICAgYXN5bmMgZGlzY29ubmVjdEFsbCgpIHtcbiAgICAgICAgY29uc3QgcG9vbHMgPSBbLi4udGhpcy5wb29scy52YWx1ZXMoKV07XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHBvb2xzLm1hcChwb29sID0+IHBvb2wuZGlzY29ubmVjdEFsbCgpKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2Vzc2lvblRvUG9vbChzZXNzaW9uKSB7XG4gICAgcmV0dXJuIHNlc3Npb247XG59XG5jbGFzcyBIMUNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0UG9vbCA9IG5ldyBDb250ZXh0UG9vbChvcHRpb25zKTtcbiAgICB9XG4gICAgZ2V0U2Vzc2lvbkZvck9yaWdpbihvcmlnaW4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFBvb2wuZ2V0T3JpZ2luUG9vbChvcmlnaW4pO1xuICAgIH1cbiAgICBnZXRGcmVlU29ja2V0Rm9yU2Vzc2lvbihzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IHBvb2wgPSBzZXNzaW9uVG9Qb29sKHNlc3Npb24pO1xuICAgICAgICByZXR1cm4gcG9vbC5nZXRGcmVlU29ja2V0KCk7XG4gICAgfVxuICAgIGFkZFVzZWRTb2NrZXQoc2Vzc2lvbiwgc29ja2V0KSB7XG4gICAgICAgIGNvbnN0IHBvb2wgPSBzZXNzaW9uVG9Qb29sKHNlc3Npb24pO1xuICAgICAgICByZXR1cm4gcG9vbC5hZGRVc2VkKHNvY2tldCk7XG4gICAgfVxuICAgIHdhaXRGb3JTb2NrZXRCeVNlc3Npb24oc2Vzc2lvbikge1xuICAgICAgICByZXR1cm4gc2Vzc2lvblRvUG9vbChzZXNzaW9uKS53YWl0Rm9yU29ja2V0KCk7XG4gICAgfVxuICAgIGNvbm5lY3QodXJsLCBleHRyYU9wdGlvbnMsIHJlcXVlc3QpIHtcbiAgICAgICAgY29uc3QgeyBvcmlnaW4sIHByb3RvY29sLCBob3N0bmFtZSwgcGFzc3dvcmQsIHBhdGhuYW1lLCBzZWFyY2gsIHVzZXJuYW1lLCB9ID0gdXJsO1xuICAgICAgICBjb25zdCBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2g7XG4gICAgICAgIGNvbnN0IHBvcnQgPSBwYXJzZUludCgoMCwgdXRpbHNfMS5wYXJzZUlucHV0KSh1cmwuaHJlZikucG9ydCwgMTApO1xuICAgICAgICBjb25zdCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICAgICAgY29uc3QgYXV0aCA9ICh1c2VybmFtZSB8fCBwYXNzd29yZClcbiAgICAgICAgICAgID8geyBhdXRoOiBgJHt1c2VybmFtZX06JHtwYXNzd29yZH1gIH1cbiAgICAgICAgICAgIDoge307XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5leHRyYU9wdGlvbnMsXG4gICAgICAgICAgICBhZ2VudDogZmFsc2UsXG4gICAgICAgICAgICBob3N0bmFtZSxcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBwb3J0LFxuICAgICAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgICAgICAuLi5hdXRoLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycylcbiAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHt9O1xuICAgICAgICBvcHRpb25zLmhlYWRlcnMuY29ubmVjdGlvbiA9IHRoaXMuY29udGV4dFBvb2wua2VlcEFsaXZlXG4gICAgICAgICAgICA/IFwia2VlcC1hbGl2ZVwiXG4gICAgICAgICAgICA6IFwiY2xvc2VcIjtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFBvb2wuZ2V0T3JpZ2luUG9vbChvcmlnaW4pLmNvbm5lY3Qob3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIG1ha2VOZXdDb25uZWN0aW9uKHVybCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBob3N0bmFtZSwgcG9ydCB9ID0gKDAsIHV0aWxzXzEucGFyc2VJbnB1dCkodXJsKTtcbiAgICAgICAgICAgIGNvbnN0IHNvY2tldCA9ICgwLCBuZXRfMS5jcmVhdGVDb25uZWN0aW9uKShwYXJzZUludChwb3J0LCAxMCksIGhvc3RuYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzb2NrZXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzb2NrZXQub25jZShcImVycm9yXCIsIHJlamVjdCk7XG4gICAgICAgICAgICByZXR1cm4gc29ja2V0O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGlzY29ubmVjdCh1cmwpIHtcbiAgICAgICAgY29uc3QgeyBvcmlnaW4gfSA9IG5ldyB1cmxfMS5VUkwodXJsKTtcbiAgICAgICAgdGhpcy5jb250ZXh0UG9vbC5kaXNjb25uZWN0KG9yaWdpbik7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RBbGwoKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFBvb2wuZGlzY29ubmVjdEFsbCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuSDFDb250ZXh0ID0gSDFDb250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC1odHRwMS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/context-http1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/context-http2.js":
/*!*********************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/context-http2.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.H2Context = void 0;\nconst http2_1 = __webpack_require__(/*! http2 */ \"http2\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst callguard_1 = __webpack_require__(/*! callguard */ \"(rsc)/./node_modules/callguard/dist/index.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/fetch-h2/dist/lib/core.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/fetch-h2/dist/lib/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/fetch-h2/dist/lib/response.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fetch-h2/dist/lib/utils.js\");\nconst utils_http2_1 = __webpack_require__(/*! ./utils-http2 */ \"(rsc)/./node_modules/fetch-h2/dist/lib/utils-http2.js\");\nconst { HTTP2_HEADER_PATH, } = http2_1.constants;\nclass H2Context {\n    constructor(getDecoders, getSessionOptions) {\n        // TODO: Remove in favor of protocol-agnostic origin cache\n        this._h2sessions = new Map();\n        this._h2staleSessions = new Map();\n        this._getDecoders = getDecoders;\n        this._getSessionOptions = getSessionOptions;\n        /* istanbul ignore next */\n        if (process.env.DEBUG_FETCH_H2) {\n            const debug = (line, ...args) => {\n                // tslint:disable-next-line\n                console.error(line, ...args);\n            };\n            const printSession = (origin, session) => {\n                debug(\"  First origin:\", origin);\n                debug(\"   Ref-counter:\", session.__fetch_h2_refcount);\n                debug(\"   Destroyed:\", session.destroyed);\n                debug(\"   Destroyed mark:\", session.__fetch_h2_destroyed);\n            };\n            process.on(\"SIGUSR2\", () => {\n                debug(\"[Debug fetch-h2]: H2 sessions\");\n                debug(\" Active sessions\");\n                [...this._h2sessions.entries()]\n                    .forEach(([origin, { session }]) => {\n                    printSession(origin, session);\n                });\n                debug(\" Stale sessions\");\n                [...this._h2staleSessions.entries()]\n                    .forEach(([origin, set]) => {\n                    [...set]\n                        .forEach((session) => {\n                        printSession(origin, session);\n                    });\n                });\n            });\n        }\n    }\n    createHttp2(origin, onGotGoaway, extraOptions) {\n        const sessionItem = this.connectHttp2(origin, extraOptions);\n        const { promise } = sessionItem;\n        // Handle session closure (delete from store)\n        promise\n            .then(session => {\n            session.once(\"close\", () => this.disconnect(origin, session));\n            session.once(\"goaway\", (_errorCode, _lastStreamID, _opaqueData) => {\n                (0, utils_http2_1.setGotGoaway)(session);\n                onGotGoaway();\n                this.releaseSession(origin);\n            });\n        })\n            .catch(() => {\n            if (sessionItem.session)\n                this.disconnect(origin, sessionItem.session);\n        });\n        this._h2sessions.set(origin, sessionItem);\n        const { promise: session, ref, unref } = sessionItem;\n        return {\n            ref,\n            unref,\n            session,\n        };\n    }\n    disconnectSession(session) {\n        return new Promise(resolve => {\n            if (session.destroyed)\n                return resolve();\n            session.once(\"close\", () => resolve());\n            session.destroy();\n        });\n    }\n    releaseSession(origin) {\n        const sessionItem = this.deleteActiveSession(origin);\n        if (!sessionItem)\n            return;\n        if (!this._h2staleSessions.has(origin))\n            this._h2staleSessions.set(origin, new Set());\n        this._h2staleSessions.get(origin)\n            .add(sessionItem.session);\n    }\n    deleteActiveSession(origin) {\n        const sessionItem = this._h2sessions.get(origin);\n        if (!sessionItem)\n            return;\n        this._h2sessions.delete(origin);\n        sessionItem.session.unref();\n        // Never re-ref, this session is over\n        (0, utils_http2_1.setDestroyed)(sessionItem.session);\n        return sessionItem;\n    }\n    async disconnectStaleSessions(origin) {\n        const promises = [];\n        const sessionSet = this._h2staleSessions.get(origin);\n        if (!sessionSet)\n            return;\n        this._h2staleSessions.delete(origin);\n        for (const session of sessionSet)\n            promises.push(this.disconnectSession(session));\n        return Promise.all(promises).then(() => { });\n    }\n    disconnectAll() {\n        const promises = [];\n        for (const eventualH2session of this._h2sessions.values()) {\n            promises.push(this.handleDisconnect(eventualH2session));\n        }\n        this._h2sessions.clear();\n        for (const origin of this._h2staleSessions.keys()) {\n            promises.push(this.disconnectStaleSessions(origin));\n        }\n        return Promise.all(promises).then(() => { });\n    }\n    disconnect(url, session) {\n        const { origin } = new url_1.URL(url);\n        const promises = [];\n        const sessionItem = this.deleteActiveSession(origin);\n        if (sessionItem && (!session || sessionItem.session === session))\n            promises.push(this.handleDisconnect(sessionItem));\n        if (!session) {\n            promises.push(this.disconnectStaleSessions(origin));\n        }\n        else if (this._h2staleSessions.has(origin)) {\n            const sessionSet = this._h2staleSessions.get(origin);\n            if (sessionSet.has(session)) {\n                sessionSet.delete(session);\n                promises.push(this.disconnectSession(session));\n            }\n        }\n        return Promise.all(promises).then(() => { });\n    }\n    handleDisconnect(sessionItem) {\n        const { promise, session } = sessionItem;\n        if (session)\n            session.destroy();\n        return promise\n            .then(_h2session => { })\n            .catch(err => {\n            const debugMode = false;\n            if (debugMode)\n                // tslint:disable-next-line\n                console.warn(\"Disconnect error\", err);\n        });\n    }\n    handlePush(origin, pushedStream, requestHeaders, ref, unref) {\n        if (!this._pushHandler)\n            return; // Drop push. TODO: Signal through error log: #8\n        const path = requestHeaders[HTTP2_HEADER_PATH];\n        // Remove pseudo-headers\n        Object.keys(requestHeaders)\n            .filter(name => name.charAt(0) === \":\")\n            .forEach(name => { delete requestHeaders[name]; });\n        const pushedRequest = new request_1.Request(path, { headers: requestHeaders, allowForbiddenHeaders: true });\n        ref();\n        const futureResponse = new Promise((resolve, reject) => {\n            const guard = (0, callguard_1.syncGuard)(reject, { catchAsync: true });\n            pushedStream.once(\"close\", unref);\n            pushedStream.once(\"aborted\", () => reject(new core_1.AbortError(\"Response aborted\")));\n            pushedStream.once(\"frameError\", () => reject(new Error(\"Push request failed\")));\n            pushedStream.once(\"error\", reject);\n            pushedStream.once(\"push\", guard((responseHeaders) => {\n                const response = new response_1.StreamResponse(this._getDecoders(origin), path, pushedStream, responseHeaders, false, {}, void 0, 2, false);\n                resolve(response);\n            }));\n        });\n        futureResponse\n            .catch(_err => { }); // TODO: #8\n        const getResponse = () => futureResponse;\n        return this._pushHandler(origin, pushedRequest, getResponse);\n    }\n    connectHttp2(origin, extraOptions = {}) {\n        const makeConnectionTimeout = () => new core_1.TimeoutError(`Connection timeout to ${origin}`);\n        const makeError = (event) => event\n            ? new Error(`Unknown connection error (${event}): ${origin}`)\n            : new Error(`Connection closed`);\n        let session = void 0;\n        // TODO: #8\n        // tslint:disable-next-line\n        const aGuard = (0, callguard_1.asyncGuard)(console.error.bind(console));\n        const sessionRefs = {};\n        const makeRefs = (session) => {\n            const monkeySession = session;\n            monkeySession.__fetch_h2_refcount = 1; // Begins ref'd\n            sessionRefs.ref = () => {\n                if ((0, utils_http2_1.isDestroyed)(session))\n                    return;\n                if (monkeySession.__fetch_h2_refcount === 0)\n                    // Go from unref'd to ref'd\n                    session.ref();\n                ++monkeySession.__fetch_h2_refcount;\n            };\n            sessionRefs.unref = () => {\n                if ((0, utils_http2_1.isDestroyed)(session))\n                    return;\n                --monkeySession.__fetch_h2_refcount;\n                if (monkeySession.__fetch_h2_refcount === 0)\n                    // Go from ref'd to unref'd\n                    session.unref();\n            };\n        };\n        const options = {\n            ...this._getSessionOptions(origin),\n            ...extraOptions,\n        };\n        const promise = new Promise((resolve, reject) => {\n            session =\n                (0, http2_1.connect)(origin, options, () => resolve(session));\n            makeRefs(session);\n            session.on(\"stream\", aGuard((stream, headers) => this.handlePush(origin, stream, headers, () => sessionRefs.ref(), () => sessionRefs.unref())));\n            session.once(\"close\", () => reject((0, utils_1.makeOkError)(makeError())));\n            session.once(\"timeout\", () => reject(makeConnectionTimeout()));\n            session.once(\"error\", reject);\n        });\n        return {\n            firstOrigin: origin,\n            promise,\n            ref: () => sessionRefs.ref(),\n            session,\n            unref: () => sessionRefs.unref(),\n        };\n    }\n}\nexports.H2Context = H2Context;\n//# sourceMappingURL=context-http2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/context-http2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/context-https.js":
/*!*********************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/context-https.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.connectTLS = void 0;\nconst tls_1 = __webpack_require__(/*! tls */ \"tls\");\nconst san_1 = __webpack_require__(/*! ./san */ \"(rsc)/./node_modules/fetch-h2/dist/lib/san.js\");\nconst needsSocketHack = [\"12\", \"13\"]\n    .includes(process.versions.node.split('.')[0]);\nconst alpnProtocols = {\n    http1: Buffer.from(\"\\x08http/1.1\"),\n    http2: Buffer.from(\"\\x02h2\"),\n};\nconst defaultMethod = [\"http2\", \"http1\"];\nfunction connectTLS(host, port, protocols, connOpts) {\n    const usedProtocol = new Set();\n    const _protocols = protocols.filter(protocol => {\n        if (protocol !== \"http1\" && protocol !== \"http2\")\n            return false;\n        if (usedProtocol.has(protocol))\n            return false;\n        usedProtocol.add(protocol);\n        return true;\n    });\n    const orderedProtocols = Buffer.concat((_protocols.length !== 0 ? _protocols : defaultMethod)\n        .map(protocol => alpnProtocols[protocol]));\n    const opts = {\n        ...connOpts,\n        ALPNProtocols: orderedProtocols,\n        servername: host,\n    };\n    return new Promise((resolve, reject) => {\n        const socket = (0, tls_1.connect)(parseInt(port, 10), host, opts, () => {\n            const { authorized, authorizationError, alpnProtocol = \"\" } = socket;\n            const cert = socket.getPeerCertificate();\n            const altNameMatch = (0, san_1.parseOrigin)(cert);\n            if (!authorized && opts.rejectUnauthorized !== false)\n                return reject(authorizationError);\n            if (!alpnProtocol ||\n                ![\"h2\", \"http/1.1\", \"http/1.0\"].includes(alpnProtocol)) {\n                // Maybe the server doesn't understand ALPN, enforce\n                // user-provided protocol, or fallback to HTTP/1\n                if (_protocols.length === 1)\n                    return resolve({\n                        altNameMatch,\n                        protocol: _protocols[0],\n                        socket,\n                    });\n                else\n                    return resolve({\n                        altNameMatch,\n                        protocol: \"http1\",\n                        socket,\n                    });\n            }\n            const protocol = alpnProtocol === \"h2\" ? \"http2\" : \"http1\";\n            resolve({ socket, protocol, altNameMatch });\n        });\n        if (needsSocketHack)\n            socket.once('secureConnect', () => {\n                socket.secureConnecting = false;\n            });\n        socket.once(\"error\", reject);\n    });\n}\nexports.connectTLS = connectTLS;\n//# sourceMappingURL=context-https.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvY29udGV4dC1odHRwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsY0FBYyxtQkFBTyxDQUFDLGdCQUFLO0FBQzNCLGNBQWMsbUJBQU8sQ0FBQyw0REFBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0RBQW9EO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHNCQUFzQixnQ0FBZ0M7QUFDdEQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL2ZldGNoLWgyL2Rpc3QvbGliL2NvbnRleHQtaHR0cHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbm5lY3RUTFMgPSB2b2lkIDA7XG5jb25zdCB0bHNfMSA9IHJlcXVpcmUoXCJ0bHNcIik7XG5jb25zdCBzYW5fMSA9IHJlcXVpcmUoXCIuL3NhblwiKTtcbmNvbnN0IG5lZWRzU29ja2V0SGFjayA9IFtcIjEyXCIsIFwiMTNcIl1cbiAgICAuaW5jbHVkZXMocHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KCcuJylbMF0pO1xuY29uc3QgYWxwblByb3RvY29scyA9IHtcbiAgICBodHRwMTogQnVmZmVyLmZyb20oXCJcXHgwOGh0dHAvMS4xXCIpLFxuICAgIGh0dHAyOiBCdWZmZXIuZnJvbShcIlxceDAyaDJcIiksXG59O1xuY29uc3QgZGVmYXVsdE1ldGhvZCA9IFtcImh0dHAyXCIsIFwiaHR0cDFcIl07XG5mdW5jdGlvbiBjb25uZWN0VExTKGhvc3QsIHBvcnQsIHByb3RvY29scywgY29ubk9wdHMpIHtcbiAgICBjb25zdCB1c2VkUHJvdG9jb2wgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgX3Byb3RvY29scyA9IHByb3RvY29scy5maWx0ZXIocHJvdG9jb2wgPT4ge1xuICAgICAgICBpZiAocHJvdG9jb2wgIT09IFwiaHR0cDFcIiAmJiBwcm90b2NvbCAhPT0gXCJodHRwMlwiKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAodXNlZFByb3RvY29sLmhhcyhwcm90b2NvbCkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHVzZWRQcm90b2NvbC5hZGQocHJvdG9jb2wpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBvcmRlcmVkUHJvdG9jb2xzID0gQnVmZmVyLmNvbmNhdCgoX3Byb3RvY29scy5sZW5ndGggIT09IDAgPyBfcHJvdG9jb2xzIDogZGVmYXVsdE1ldGhvZClcbiAgICAgICAgLm1hcChwcm90b2NvbCA9PiBhbHBuUHJvdG9jb2xzW3Byb3RvY29sXSkpO1xuICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgIC4uLmNvbm5PcHRzLFxuICAgICAgICBBTFBOUHJvdG9jb2xzOiBvcmRlcmVkUHJvdG9jb2xzLFxuICAgICAgICBzZXJ2ZXJuYW1lOiBob3N0LFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3Qgc29ja2V0ID0gKDAsIHRsc18xLmNvbm5lY3QpKHBhcnNlSW50KHBvcnQsIDEwKSwgaG9zdCwgb3B0cywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBhdXRob3JpemVkLCBhdXRob3JpemF0aW9uRXJyb3IsIGFscG5Qcm90b2NvbCA9IFwiXCIgfSA9IHNvY2tldDtcbiAgICAgICAgICAgIGNvbnN0IGNlcnQgPSBzb2NrZXQuZ2V0UGVlckNlcnRpZmljYXRlKCk7XG4gICAgICAgICAgICBjb25zdCBhbHROYW1lTWF0Y2ggPSAoMCwgc2FuXzEucGFyc2VPcmlnaW4pKGNlcnQpO1xuICAgICAgICAgICAgaWYgKCFhdXRob3JpemVkICYmIG9wdHMucmVqZWN0VW5hdXRob3JpemVkICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGF1dGhvcml6YXRpb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoIWFscG5Qcm90b2NvbCB8fFxuICAgICAgICAgICAgICAgICFbXCJoMlwiLCBcImh0dHAvMS4xXCIsIFwiaHR0cC8xLjBcIl0uaW5jbHVkZXMoYWxwblByb3RvY29sKSkge1xuICAgICAgICAgICAgICAgIC8vIE1heWJlIHRoZSBzZXJ2ZXIgZG9lc24ndCB1bmRlcnN0YW5kIEFMUE4sIGVuZm9yY2VcbiAgICAgICAgICAgICAgICAvLyB1c2VyLXByb3ZpZGVkIHByb3RvY29sLCBvciBmYWxsYmFjayB0byBIVFRQLzFcbiAgICAgICAgICAgICAgICBpZiAoX3Byb3RvY29scy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdE5hbWVNYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3RvY29sOiBfcHJvdG9jb2xzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdE5hbWVNYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3RvY29sOiBcImh0dHAxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb2NrZXQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvdG9jb2wgPSBhbHBuUHJvdG9jb2wgPT09IFwiaDJcIiA/IFwiaHR0cDJcIiA6IFwiaHR0cDFcIjtcbiAgICAgICAgICAgIHJlc29sdmUoeyBzb2NrZXQsIHByb3RvY29sLCBhbHROYW1lTWF0Y2ggfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobmVlZHNTb2NrZXRIYWNrKVxuICAgICAgICAgICAgc29ja2V0Lm9uY2UoJ3NlY3VyZUNvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc29ja2V0LnNlY3VyZUNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBzb2NrZXQub25jZShcImVycm9yXCIsIHJlamVjdCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmNvbm5lY3RUTFMgPSBjb25uZWN0VExTO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC1odHRwcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/context-https.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/context.js":
/*!***************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/context.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Context = void 0;\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst already_1 = __webpack_require__(/*! already */ \"(rsc)/./node_modules/already/dist/index.js\");\nconst context_http1_1 = __webpack_require__(/*! ./context-http1 */ \"(rsc)/./node_modules/fetch-h2/dist/lib/context-http1.js\");\nconst context_http2_1 = __webpack_require__(/*! ./context-http2 */ \"(rsc)/./node_modules/fetch-h2/dist/lib/context-http2.js\");\nconst context_https_1 = __webpack_require__(/*! ./context-https */ \"(rsc)/./node_modules/fetch-h2/dist/lib/context-https.js\");\nconst cookie_jar_1 = __webpack_require__(/*! ./cookie-jar */ \"(rsc)/./node_modules/fetch-h2/dist/lib/cookie-jar.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/fetch-h2/dist/lib/core.js\");\nconst fetch_http1_1 = __webpack_require__(/*! ./fetch-http1 */ \"(rsc)/./node_modules/fetch-h2/dist/lib/fetch-http1.js\");\nconst fetch_http2_1 = __webpack_require__(/*! ./fetch-http2 */ \"(rsc)/./node_modules/fetch-h2/dist/lib/fetch-http2.js\");\nconst version_1 = __webpack_require__(/*! ./generated/version */ \"(rsc)/./node_modules/fetch-h2/dist/lib/generated/version.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/fetch-h2/dist/lib/request.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fetch-h2/dist/lib/utils.js\");\nconst origin_cache_1 = __webpack_require__(/*! ./origin-cache */ \"(rsc)/./node_modules/fetch-h2/dist/lib/origin-cache.js\");\nfunction makeDefaultUserAgent() {\n    const name = `fetch-h2/${version_1.version} (+https://github.com/grantila/fetch-h2)`;\n    const node = `nodejs/${process.versions.node}`;\n    const nghttp2 = `nghttp2/${process.versions.nghttp2}`;\n    const uv = `uv/${process.versions.uv}`;\n    return `${name} ${node} ${nghttp2} ${uv}`;\n}\nconst defaultUserAgent = makeDefaultUserAgent();\nconst defaultAccept = \"application/json,text/*;q=0.9,*/*;q=0.8\";\nclass Context {\n    constructor(opts) {\n        this._httpsFunnel = (0, already_1.funnel)();\n        this._http1Funnel = (0, already_1.funnel)();\n        this._http2Funnel = (0, already_1.funnel)();\n        this._originCache = new origin_cache_1.default();\n        this._userAgent = \"\";\n        this._overwriteUserAgent = false;\n        this._accept = \"\";\n        this._cookieJar = void 0;\n        this._decoders = [];\n        this._sessionOptions = {};\n        this._httpProtocol = \"http1\";\n        this._httpsProtocols = [\"http2\", \"http1\"];\n        this._http1Options = {};\n        this.setup(opts);\n        this.h1Context = new context_http1_1.H1Context(this._http1Options);\n        this.h2Context = new context_http2_1.H2Context(this.decoders.bind(this), this.sessionOptions.bind(this));\n    }\n    setup(opts) {\n        opts = opts || {};\n        this._cookieJar = \"cookieJar\" in opts\n            ? (opts.cookieJar || new cookie_jar_1.CookieJar())\n            : new cookie_jar_1.CookieJar();\n        this._userAgent = (0, core_1.parsePerOrigin)(opts.userAgent, \"\");\n        this._overwriteUserAgent =\n            (0, core_1.parsePerOrigin)(opts.overwriteUserAgent, false);\n        this._accept = (0, core_1.parsePerOrigin)(opts.accept, defaultAccept);\n        this._decoders = (0, core_1.parsePerOrigin)(opts.decoders, []);\n        this._sessionOptions = (0, core_1.parsePerOrigin)(opts.session, {});\n        this._httpProtocol = (0, core_1.parsePerOrigin)(opts.httpProtocol, \"http1\");\n        this._httpsProtocols = (0, core_1.parsePerOrigin)(opts.httpsProtocols, [\"http2\", \"http1\"]);\n        Object.assign(this._http1Options, opts.http1 || {});\n    }\n    userAgent(origin) {\n        const combine = (userAgent, overwriteUserAgent) => {\n            const defaultUA = overwriteUserAgent ? \"\" : defaultUserAgent;\n            return userAgent\n                ? defaultUA\n                    ? userAgent + \" \" + defaultUA\n                    : userAgent\n                : defaultUA;\n        };\n        return combine((0, core_1.getByOrigin)(this._userAgent, origin), (0, core_1.getByOrigin)(this._overwriteUserAgent, origin));\n    }\n    decoders(origin) {\n        return (0, core_1.getByOrigin)(this._decoders, origin);\n    }\n    sessionOptions(origin) {\n        return (0, core_1.getByOrigin)(this._sessionOptions, origin);\n    }\n    onPush(pushHandler) {\n        this.h2Context._pushHandler = pushHandler;\n    }\n    async fetch(input, init) {\n        return this.retryFetch(input, init);\n    }\n    async disconnect(url) {\n        const { origin } = this.parseInput(url);\n        this._originCache.disconnect(origin);\n        await Promise.all([\n            this.h1Context.disconnect(url),\n            this.h2Context.disconnect(url),\n        ]);\n    }\n    async disconnectAll() {\n        this._originCache.disconnectAll();\n        await Promise.all([\n            this.h1Context.disconnectAll(),\n            this.h2Context.disconnectAll(),\n        ]);\n    }\n    async retryFetch(input, init, extra, count = 0) {\n        ++count;\n        return this.retryableFetch(input, init, extra)\n            .catch((0, already_1.specific)(core_1.RetryError, err => {\n            // TODO: Implement a more robust retry logic\n            if (count > 10)\n                throw err;\n            return this.retryFetch(input, init, extra, count);\n        }));\n    }\n    async retryableFetch(input, init, extra) {\n        const { hostname, origin, port, protocol, url } = this.parseInput(input);\n        // Rewrite url to get rid of \"http1://\" and \"http2://\"\n        const request = input instanceof request_1.Request\n            ? input.url !== url\n                ? input.clone(url)\n                : input\n            : new request_1.Request(input, { ...(init || {}), url });\n        const { rejectUnauthorized } = this.sessionOptions(origin);\n        const makeSimpleSession = (protocol) => ({\n            accept: () => (0, core_1.getByOrigin)(this._accept, origin),\n            contentDecoders: () => (0, core_1.getByOrigin)(this._decoders, origin),\n            cookieJar: this._cookieJar,\n            protocol,\n            userAgent: () => this.userAgent(origin),\n            newFetch: this.retryFetch.bind(this),\n        });\n        const doFetchHttp1 = (socket, cleanup) => {\n            const sessionGetterHttp1 = {\n                get: (url) => ({\n                    cleanup,\n                    req: this.getHttp1(url, socket, request, rejectUnauthorized),\n                }),\n                ...makeSimpleSession(\"http1\"),\n            };\n            return (0, fetch_http1_1.fetch)(sessionGetterHttp1, request, init, extra);\n        };\n        const doFetchHttp2 = async (cacheableSession) => {\n            const { session, unref } = cacheableSession;\n            const cleanup = (0, already_1.once)(unref);\n            try {\n                const sessionGetterHttp2 = {\n                    get: () => ({ session, cleanup }),\n                    ...makeSimpleSession(\"http2\"),\n                };\n                return await (0, fetch_http2_1.fetch)(sessionGetterHttp2, request, init, extra);\n            }\n            catch (err) {\n                cleanup();\n                throw err;\n            }\n        };\n        const tryWaitForHttp1 = async (session) => {\n            const { socket: freeHttp1Socket, cleanup, shouldCreateNew } = this.h1Context.getFreeSocketForSession(session);\n            if (freeHttp1Socket)\n                return doFetchHttp1(freeHttp1Socket, cleanup);\n            if (!shouldCreateNew) {\n                // We've maxed out HTTP/1 connections, wait for one to be\n                // freed.\n                const { socket, cleanup } = await this.h1Context.waitForSocketBySession(session);\n                return doFetchHttp1(socket, cleanup);\n            }\n        };\n        if (protocol === \"http1\") {\n            return this._http1Funnel(async (shouldRetry, retry, shortcut) => {\n                var _a;\n                if (shouldRetry())\n                    return retry();\n                // Plain text HTTP/1(.1)\n                const cacheItem = this._originCache.get(\"http1\", origin);\n                const session = (_a = cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.session) !== null && _a !== void 0 ? _a : this.h1Context.getSessionForOrigin(origin);\n                const resp = await tryWaitForHttp1(session);\n                if (resp)\n                    return resp;\n                const socket = await this.h1Context.makeNewConnection(url);\n                this._originCache.set(origin, \"http1\", session);\n                shortcut();\n                const cleanup = this.h1Context.addUsedSocket(session, socket);\n                return doFetchHttp1(socket, cleanup);\n            });\n        }\n        else if (protocol === \"http2\") {\n            return this._http2Funnel(async (_, __, shortcut) => {\n                // Plain text HTTP/2\n                const cacheItem = this._originCache.get(\"http2\", origin);\n                if (cacheItem) {\n                    cacheItem.session.ref();\n                    shortcut();\n                    return doFetchHttp2(cacheItem.session);\n                }\n                // Convert socket into http2 session, this will ref (*)\n                const cacheableSession = this.h2Context.createHttp2(origin, () => { this._originCache.delete(cacheableSession); });\n                this._originCache.set(origin, \"http2\", cacheableSession);\n                shortcut();\n                // Session now lingering, it will be re-used by the next get()\n                return doFetchHttp2(cacheableSession);\n            });\n        }\n        else // protocol === \"https\"\n         {\n            return this._httpsFunnel((shouldRetry, retry, shortcut) => shouldRetry()\n                ? retry()\n                : this.connectSequenciallyTLS(shortcut, hostname, port, origin, tryWaitForHttp1, doFetchHttp1, doFetchHttp2));\n        }\n    }\n    async connectSequenciallyTLS(shortcut, hostname, port, origin, tryWaitForHttp1, doFetchHttp1, doFetchHttp2) {\n        var _a, _b;\n        const cacheItem = (_a = this._originCache.get(\"https2\", origin)) !== null && _a !== void 0 ? _a : this._originCache.get(\"https1\", origin);\n        if (cacheItem) {\n            if (cacheItem.protocol === \"https1\") {\n                shortcut();\n                const resp = await tryWaitForHttp1(cacheItem.session);\n                if (resp)\n                    return resp;\n            }\n            else if (cacheItem.protocol === \"https2\") {\n                cacheItem.session.ref();\n                shortcut();\n                return doFetchHttp2(cacheItem.session);\n            }\n        }\n        // Use ALPN to figure out protocol lazily\n        const { protocol, socket, altNameMatch } = await (0, context_https_1.connectTLS)(hostname, port, (0, core_1.getByOrigin)(this._httpsProtocols, origin), (0, core_1.getByOrigin)(this._sessionOptions, origin));\n        const disconnect = (0, already_1.once)(() => {\n            if (!socket.destroyed) {\n                socket.destroy();\n                socket.unref();\n            }\n        });\n        if (protocol === \"http2\") {\n            // Convert socket into http2 session, this will ref (*)\n            // const { cleanup, session, didCreate } =\n            const cacheableSession = this.h2Context.createHttp2(origin, () => { this._originCache.delete(cacheableSession); }, {\n                createConnection: () => socket,\n            });\n            this._originCache.set(origin, \"https2\", cacheableSession, altNameMatch, disconnect);\n            shortcut();\n            // Session now lingering, it will be re-used by the next get()\n            return doFetchHttp2(cacheableSession);\n        }\n        else // protocol === \"http1\"\n         {\n            const session = (_b = cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.session) !== null && _b !== void 0 ? _b : this.h1Context.getSessionForOrigin(origin);\n            // TODO: Update the alt-name list in the origin cache (if the new\n            //       TLS socket contains more/other alt-names).\n            if (!cacheItem)\n                this._originCache.set(origin, \"https1\", session, altNameMatch, disconnect);\n            const cleanup = this.h1Context.addUsedSocket(session, socket);\n            shortcut();\n            return doFetchHttp1(socket, cleanup);\n        }\n    }\n    getHttp1(url, socket, request, rejectUnauthorized) {\n        return this.h1Context.connect(new url_1.URL(url), {\n            createConnection: () => socket,\n            rejectUnauthorized,\n        }, request);\n    }\n    parseInput(input) {\n        const { hostname, origin, port, protocol, url } = (0, utils_1.parseInput)(typeof input !== \"string\" ? input.url : input);\n        const defaultHttp = this._httpProtocol;\n        if ((protocol === \"http\" && defaultHttp === \"http1\")\n            || protocol === \"http1\")\n            return {\n                hostname,\n                origin,\n                port,\n                protocol: \"http1\",\n                url,\n            };\n        else if ((protocol === \"http\" && defaultHttp === \"http2\")\n            || protocol === \"http2\")\n            return {\n                hostname,\n                origin,\n                port,\n                protocol: \"http2\",\n                url,\n            };\n        else if (protocol === \"https\")\n            return {\n                hostname,\n                origin,\n                port,\n                protocol: \"https\",\n                url,\n            };\n        else\n            throw new core_1.FetchError(`Invalid protocol \"${protocol}\"`);\n    }\n}\nexports.Context = Context;\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/cookie-jar.js":
/*!******************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/cookie-jar.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CookieJar = void 0;\nconst tough_cookie_1 = __webpack_require__(/*! tough-cookie */ \"(rsc)/./node_modules/tough-cookie/lib/cookie.js\");\nclass CookieJar {\n    constructor(jar = new tough_cookie_1.CookieJar()) {\n        this._jar = jar;\n    }\n    reset(jar = new tough_cookie_1.CookieJar()) {\n        this._jar = jar;\n    }\n    setCookie(cookie, url) {\n        return new Promise((resolve, reject) => {\n            this._jar.setCookie(cookie, url, (err, cookie) => {\n                if (err)\n                    return reject(err);\n                resolve(cookie);\n            });\n        });\n    }\n    setCookies(cookies, url) {\n        return Promise.all(cookies.map(cookie => this.setCookie(cookie, url)));\n    }\n    getCookies(url) {\n        return new Promise((resolve, reject) => {\n            this._jar.getCookies(url, (err, cookies) => {\n                if (err)\n                    return reject(err);\n                resolve(cookies);\n            });\n        });\n    }\n}\nexports.CookieJar = CookieJar;\n//# sourceMappingURL=cookie-jar.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvY29va2llLWphci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsdUJBQXVCLG1CQUFPLENBQUMscUVBQWM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvY29va2llLWphci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29va2llSmFyID0gdm9pZCAwO1xuY29uc3QgdG91Z2hfY29va2llXzEgPSByZXF1aXJlKFwidG91Z2gtY29va2llXCIpO1xuY2xhc3MgQ29va2llSmFyIHtcbiAgICBjb25zdHJ1Y3RvcihqYXIgPSBuZXcgdG91Z2hfY29va2llXzEuQ29va2llSmFyKCkpIHtcbiAgICAgICAgdGhpcy5famFyID0gamFyO1xuICAgIH1cbiAgICByZXNldChqYXIgPSBuZXcgdG91Z2hfY29va2llXzEuQ29va2llSmFyKCkpIHtcbiAgICAgICAgdGhpcy5famFyID0gamFyO1xuICAgIH1cbiAgICBzZXRDb29raWUoY29va2llLCB1cmwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2phci5zZXRDb29raWUoY29va2llLCB1cmwsIChlcnIsIGNvb2tpZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNvb2tpZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldENvb2tpZXMoY29va2llcywgdXJsKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChjb29raWVzLm1hcChjb29raWUgPT4gdGhpcy5zZXRDb29raWUoY29va2llLCB1cmwpKSk7XG4gICAgfVxuICAgIGdldENvb2tpZXModXJsKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9qYXIuZ2V0Q29va2llcyh1cmwsIChlcnIsIGNvb2tpZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShjb29raWVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkNvb2tpZUphciA9IENvb2tpZUphcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvb2tpZS1qYXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/cookie-jar.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/core.js":
/*!************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/core.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parsePerOrigin = exports.getByOrigin = exports.RetryError = exports.TimeoutError = exports.AbortError = exports.FetchError = void 0;\nclass FetchError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, FetchError.prototype);\n    }\n}\nexports.FetchError = FetchError;\nclass AbortError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, AbortError.prototype);\n    }\n}\nexports.AbortError = AbortError;\nclass TimeoutError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, TimeoutError.prototype);\n    }\n}\nexports.TimeoutError = TimeoutError;\nclass RetryError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, RetryError.prototype);\n    }\n}\nexports.RetryError = RetryError;\nfunction getByOrigin(val, origin) {\n    return typeof val === \"function\"\n        ? val(origin)\n        : val;\n}\nexports.getByOrigin = getByOrigin;\nfunction parsePerOrigin(val, _default) {\n    if (val == null) {\n        return _default;\n    }\n    if (typeof val === \"function\")\n        return (origin) => {\n            const ret = val(origin);\n            if (ret == null)\n                return _default;\n            return ret;\n        };\n    return val;\n}\nexports.parsePerOrigin = parsePerOrigin;\n//# sourceMappingURL=core.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvY29yZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxtQkFBbUIsR0FBRyxrQkFBa0IsR0FBRyxvQkFBb0IsR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0I7QUFDbEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9mZXRjaC1oMi9kaXN0L2xpYi9jb3JlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZVBlck9yaWdpbiA9IGV4cG9ydHMuZ2V0QnlPcmlnaW4gPSBleHBvcnRzLlJldHJ5RXJyb3IgPSBleHBvcnRzLlRpbWVvdXRFcnJvciA9IGV4cG9ydHMuQWJvcnRFcnJvciA9IGV4cG9ydHMuRmV0Y2hFcnJvciA9IHZvaWQgMDtcbmNsYXNzIEZldGNoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEZldGNoRXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnRzLkZldGNoRXJyb3IgPSBGZXRjaEVycm9yO1xuY2xhc3MgQWJvcnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQWJvcnRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWJvcnRFcnJvciA9IEFib3J0RXJyb3I7XG5jbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRpbWVvdXRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydHMuVGltZW91dEVycm9yID0gVGltZW91dEVycm9yO1xuY2xhc3MgUmV0cnlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmV0cnlFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmV0cnlFcnJvciA9IFJldHJ5RXJyb3I7XG5mdW5jdGlvbiBnZXRCeU9yaWdpbih2YWwsIG9yaWdpbikge1xuICAgIHJldHVybiB0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyB2YWwob3JpZ2luKVxuICAgICAgICA6IHZhbDtcbn1cbmV4cG9ydHMuZ2V0QnlPcmlnaW4gPSBnZXRCeU9yaWdpbjtcbmZ1bmN0aW9uIHBhcnNlUGVyT3JpZ2luKHZhbCwgX2RlZmF1bHQpIHtcbiAgICBpZiAodmFsID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZhdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gKG9yaWdpbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmV0ID0gdmFsKG9yaWdpbik7XG4gICAgICAgICAgICBpZiAocmV0ID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9kZWZhdWx0O1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfTtcbiAgICByZXR1cm4gdmFsO1xufVxuZXhwb3J0cy5wYXJzZVBlck9yaWdpbiA9IHBhcnNlUGVyT3JpZ2luO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29yZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/fetch-common.js":
/*!********************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/fetch-common.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeRedirectionMethodError = exports.makeRedirectionError = exports.makeIllegalRedirectError = exports.makeTimeoutError = exports.makeAbortedError = exports.make100Error = exports.handleSignalAndTimeout = exports.setupFetch = void 0;\nconst http2_1 = __webpack_require__(/*! http2 */ \"http2\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst already_1 = __webpack_require__(/*! already */ \"(rsc)/./node_modules/already/dist/index.js\");\nconst body_1 = __webpack_require__(/*! ./body */ \"(rsc)/./node_modules/fetch-h2/dist/lib/body.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/fetch-h2/dist/lib/core.js\");\nconst headers_1 = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/fetch-h2/dist/lib/headers.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fetch-h2/dist/lib/utils.js\");\nconst { \n// Required for a request\nHTTP2_HEADER_METHOD, HTTP2_HEADER_SCHEME, HTTP2_HEADER_PATH, HTTP2_HEADER_AUTHORITY, \n// Methods\nHTTP2_METHOD_GET, HTTP2_METHOD_HEAD, \n// Requests\nHTTP2_HEADER_USER_AGENT, HTTP2_HEADER_ACCEPT, HTTP2_HEADER_COOKIE, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_ACCEPT_ENCODING, } = http2_1.constants;\nfunction ensureNotCircularRedirection(redirections) {\n    const urls = [...redirections];\n    const last = urls.pop();\n    for (let i = 0; i < urls.length; ++i)\n        if (urls[i] === last) {\n            const err = new Error(\"Redirection loop detected\");\n            err.urls = urls.slice(i);\n            throw err;\n        }\n}\nconst makeDefaultEncodings = (mul = 1) => (0, utils_1.hasBuiltinBrotli)()\n    ? [\n        { name: \"br\", score: 1.0 * mul },\n        { name: \"gzip\", score: 0.8 * mul },\n        { name: \"deflate\", score: 0.5 * mul },\n    ]\n    : [\n        { name: \"gzip\", score: 1.0 * mul },\n        { name: \"deflate\", score: 0.5 * mul },\n    ];\nconst defaultEncodings = makeDefaultEncodings();\nconst fallbackEncodings = makeDefaultEncodings(0.8);\nconst stringifyEncoding = (acceptEncoding) => `${acceptEncoding.name};q=${acceptEncoding.score}`;\nconst stringifyEncodings = (accepts) => accepts\n    .map(acceptEncoding => stringifyEncoding(acceptEncoding))\n    .join(\", \");\nfunction getEncodings(contentDecoders) {\n    if (contentDecoders.length === 0)\n        return stringifyEncodings(defaultEncodings);\n    const makeScore = (index) => 1 - (index / (contentDecoders.length)) * 0.2;\n    return stringifyEncodings([\n        ...contentDecoders.map(({ name }, index) => ({ name, score: makeScore(index) })),\n        ...fallbackEncodings,\n    ]);\n}\nasync function setupFetch(session, request, init = {}, extra) {\n    const { redirected } = extra;\n    ensureNotCircularRedirection(redirected);\n    const { url, method, redirect, integrity } = request;\n    const { signal, onTrailers } = init;\n    const { origin, protocol, host, pathname, search, hash, } = new url_1.URL(url);\n    const path = pathname + search + hash;\n    const endStream = method === HTTP2_METHOD_GET || method === HTTP2_METHOD_HEAD;\n    const headers = new headers_1.Headers(request.headers);\n    const cookies = (await session.cookieJar.getCookies(url))\n        .map(cookie => cookie.cookieString());\n    const contentDecoders = session.contentDecoders();\n    const acceptEncoding = getEncodings(contentDecoders);\n    if (headers.has(HTTP2_HEADER_COOKIE))\n        cookies.push(...(0, utils_1.arrayify)(headers.get(HTTP2_HEADER_COOKIE)));\n    if (!headers.has(\"host\"))\n        headers.set(\"host\", host);\n    const headersToSend = {\n        // Set required headers\n        ...(session.protocol === \"http1\" ? {} : {\n            [HTTP2_HEADER_METHOD]: method,\n            [HTTP2_HEADER_SCHEME]: protocol.replace(/:.*/, \"\"),\n            [HTTP2_HEADER_PATH]: path,\n        }),\n        // Set default headers\n        [HTTP2_HEADER_ACCEPT]: session.accept(),\n        [HTTP2_HEADER_USER_AGENT]: session.userAgent(),\n        [HTTP2_HEADER_ACCEPT_ENCODING]: acceptEncoding,\n    };\n    if (cookies.length > 0)\n        headersToSend[HTTP2_HEADER_COOKIE] = cookies.join(\"; \");\n    for (const [key, val] of headers.entries()) {\n        if (key === \"host\" && session.protocol === \"http2\")\n            // Convert to :authority like curl does:\n            // https://github.com/grantila/fetch-h2/issues/9\n            headersToSend[HTTP2_HEADER_AUTHORITY] = val;\n        else if (key !== HTTP2_HEADER_COOKIE)\n            headersToSend[key] = val;\n    }\n    const inspector = new body_1.BodyInspector(request);\n    if (!endStream &&\n        inspector.length != null &&\n        !request.headers.has(HTTP2_HEADER_CONTENT_LENGTH))\n        headersToSend[HTTP2_HEADER_CONTENT_LENGTH] = \"\" + inspector.length;\n    if (!endStream &&\n        !request.headers.has(\"content-type\") &&\n        inspector.mime)\n        headersToSend[HTTP2_HEADER_CONTENT_TYPE] = inspector.mime;\n    function timeoutError() {\n        return new core_1.TimeoutError(`${method} ${url} timed out after ${init.timeout} ms`);\n    }\n    const timeoutAt = extra.timeoutAt || ((\"timeout\" in init && typeof init.timeout === \"number\")\n        // Setting the timeoutAt here at first time allows async cookie\n        // jar to not take part of timeout for at least the first request\n        // (in a potential redirect chain)\n        ? Date.now() + init.timeout\n        : void 0);\n    function setupTimeout() {\n        if (!timeoutAt)\n            return null;\n        const now = Date.now();\n        if (now >= timeoutAt)\n            throw timeoutError();\n        let timerId;\n        return {\n            clear: () => {\n                if (timerId)\n                    clearTimeout(timerId);\n            },\n            promise: new Promise((_resolve, reject) => {\n                timerId = setTimeout(() => {\n                    timerId = null;\n                    reject(timeoutError());\n                }, timeoutAt - now);\n            }),\n        };\n    }\n    const timeoutInfo = setupTimeout();\n    function abortError() {\n        return new core_1.AbortError(`${method} ${url} aborted`);\n    }\n    if (signal && signal.aborted)\n        throw abortError();\n    let abortHandler;\n    const signalPromise = signal\n        ?\n            new Promise((_resolve, reject) => {\n                signal.once(\"abort\", abortHandler = () => {\n                    reject(abortError());\n                });\n            })\n        : null;\n    function cleanup() {\n        var _a, _b;\n        (_a = timeoutInfo === null || timeoutInfo === void 0 ? void 0 : timeoutInfo.clear) === null || _a === void 0 ? void 0 : _a.call(timeoutInfo);\n        (_b = timeoutInfo === null || timeoutInfo === void 0 ? void 0 : timeoutInfo.promise) === null || _b === void 0 ? void 0 : _b.catch(_err => { });\n        if (signal && abortHandler)\n            signal.removeListener(\"abort\", abortHandler);\n    }\n    return {\n        cleanup,\n        contentDecoders,\n        endStream,\n        headersToSend,\n        integrity,\n        method,\n        onTrailers,\n        origin,\n        redirect,\n        redirected,\n        request,\n        signal,\n        signalPromise,\n        timeoutAt,\n        timeoutInfo,\n        url,\n    };\n}\nexports.setupFetch = setupFetch;\nfunction handleSignalAndTimeout(signalPromise, timeoutInfo, cleanup, fetcher, onError) {\n    return Promise.race([\n        signalPromise,\n        (timeoutInfo && timeoutInfo.promise),\n        fetcher().catch((0, already_1.rethrow)(onError)),\n    ]\n        .filter(promise => promise))\n        .finally(cleanup);\n}\nexports.handleSignalAndTimeout = handleSignalAndTimeout;\nfunction make100Error() {\n    return new Error(\"Request failed with 100 continue. \" +\n        \"This can't happen unless a server failure\");\n}\nexports.make100Error = make100Error;\nfunction makeAbortedError() {\n    return new core_1.AbortError(\"Request aborted\");\n}\nexports.makeAbortedError = makeAbortedError;\nfunction makeTimeoutError() {\n    return new core_1.TimeoutError(\"Request timed out\");\n}\nexports.makeTimeoutError = makeTimeoutError;\nfunction makeIllegalRedirectError() {\n    return new Error(\"Server responded illegally with a \" +\n        \"redirect code but missing 'location' header\");\n}\nexports.makeIllegalRedirectError = makeIllegalRedirectError;\nfunction makeRedirectionError(location) {\n    return new Error(`URL got redirected to ${location}`);\n}\nexports.makeRedirectionError = makeRedirectionError;\nfunction makeRedirectionMethodError(location, method) {\n    return new Error(`URL got redirected to ${location}, which ` +\n        `'fetch-h2' doesn't support for ${method}`);\n}\nexports.makeRedirectionMethodError = makeRedirectionMethodError;\n//# sourceMappingURL=fetch-common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/fetch-common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/fetch-http1.js":
/*!*******************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/fetch-http1.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetch = exports.fetchImpl = void 0;\nconst http2_1 = __webpack_require__(/*! http2 */ \"http2\");\nconst callguard_1 = __webpack_require__(/*! callguard */ \"(rsc)/./node_modules/callguard/dist/index.js\");\nconst abort_1 = __webpack_require__(/*! ./abort */ \"(rsc)/./node_modules/fetch-h2/dist/lib/abort.js\");\nconst fetch_common_1 = __webpack_require__(/*! ./fetch-common */ \"(rsc)/./node_modules/fetch-h2/dist/lib/fetch-common.js\");\nconst headers_1 = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/fetch-h2/dist/lib/headers.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/fetch-h2/dist/lib/response.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fetch-h2/dist/lib/utils.js\");\nconst { \n// Responses, these are the same in HTTP/1.1 and HTTP/2\nHTTP2_HEADER_LOCATION: HTTP1_HEADER_LOCATION, HTTP2_HEADER_SET_COOKIE: HTTP1_HEADER_SET_COOKIE, } = http2_1.constants;\nasync function fetchImpl(session, input, init = {}, extra) {\n    const { cleanup, contentDecoders, endStream, headersToSend, integrity, method, onTrailers, redirect, redirected, request, signal, signalPromise, timeoutAt, timeoutInfo, url, } = await (0, fetch_common_1.setupFetch)(session, input, init, extra);\n    const { req, cleanup: socketCleanup } = session.get(url);\n    const doFetch = async () => {\n        for (const [key, value] of Object.entries(headersToSend)) {\n            if (value != null)\n                req.setHeader(key, value);\n        }\n        const response = new Promise((resolve, reject) => {\n            const guard = (0, callguard_1.syncGuard)(reject, { catchAsync: true });\n            req.once(\"error\", reject);\n            req.once(\"aborted\", guard(() => {\n                reject((0, fetch_common_1.makeAbortedError)());\n            }));\n            req.once(\"continue\", guard(() => {\n                reject((0, fetch_common_1.make100Error)());\n            }));\n            req.once(\"information\", guard((res) => {\n                resolve(new response_1.Response(null, // No body\n                { status: res.statusCode }));\n            }));\n            req.once(\"timeout\", guard(() => {\n                reject((0, fetch_common_1.makeTimeoutError)());\n                req.abort();\n            }));\n            req.once(\"upgrade\", guard((_res, _socket, _upgradeHead) => {\n                reject(new Error(\"Upgrade not implemented!\"));\n                req.abort();\n            }));\n            req.once(\"response\", guard((res) => {\n                res.once(\"end\", socketCleanup);\n                const { signal: bodySignal = void 0, abort: bodyAbort = void 0, } = signal ? new abort_1.AbortController() : {};\n                if (signal) {\n                    const abortHandler = () => {\n                        bodyAbort();\n                        req.abort();\n                        res.destroy();\n                    };\n                    if (signal.aborted) {\n                        // No reason to continue, the request is aborted\n                        abortHandler();\n                        return;\n                    }\n                    signal.once(\"abort\", abortHandler);\n                    res.once(\"end\", () => {\n                        signal.removeListener(\"abort\", abortHandler);\n                    });\n                }\n                const { headers, statusCode } = res;\n                res.once(\"end\", guard(() => {\n                    if (!onTrailers)\n                        return;\n                    try {\n                        const { trailers } = res;\n                        const headers = new headers_1.GuardedHeaders(\"response\");\n                        Object.keys(trailers).forEach(key => {\n                            if (trailers[key] != null)\n                                headers.set(key, \"\" + trailers[key]);\n                        });\n                        onTrailers(headers);\n                    }\n                    catch (err) {\n                        // TODO: Implement #8\n                        // tslint:disable-next-line\n                        console.warn(\"Trailer handling failed\", err);\n                    }\n                }));\n                const location = (0, utils_1.parseLocation)(headers[HTTP1_HEADER_LOCATION], url);\n                const isRedirected = utils_1.isRedirectStatus[\"\" + statusCode];\n                if (headers[HTTP1_HEADER_SET_COOKIE]) {\n                    const setCookies = (0, utils_1.arrayify)(headers[HTTP1_HEADER_SET_COOKIE]);\n                    session.cookieJar.setCookies(setCookies, url);\n                }\n                if (!input.allowForbiddenHeaders) {\n                    delete headers[\"set-cookie\"];\n                    delete headers[\"set-cookie2\"];\n                }\n                if (isRedirected && !location)\n                    return reject((0, fetch_common_1.makeIllegalRedirectError)());\n                if (!isRedirected || redirect === \"manual\")\n                    return resolve(new response_1.StreamResponse(contentDecoders, url, res, headers, redirect === \"manual\"\n                        ? false\n                        : extra.redirected.length > 0, {\n                        status: res.statusCode,\n                        statusText: res.statusMessage,\n                    }, bodySignal, 1, input.allowForbiddenHeaders, integrity));\n                const { url: locationUrl, isRelative } = location;\n                if (redirect === \"error\")\n                    return reject((0, fetch_common_1.makeRedirectionError)(locationUrl));\n                // redirect is 'follow'\n                // We don't support re-sending a non-GET/HEAD request (as\n                // we don't want to [can't, if its' streamed] re-send the\n                // body). The concept is fundementally broken anyway...\n                if (!endStream)\n                    return reject((0, fetch_common_1.makeRedirectionMethodError)(locationUrl, method));\n                res.destroy();\n                if (isRelative) {\n                    resolve(fetchImpl(session, request.clone(locationUrl), { signal, onTrailers }, {\n                        redirected: redirected.concat(url),\n                        timeoutAt,\n                    }));\n                }\n                else {\n                    resolve(session.newFetch(request.clone(locationUrl), init, {\n                        timeoutAt,\n                        redirected: redirected.concat(url),\n                    }));\n                }\n            }));\n        });\n        if (endStream)\n            req.end();\n        else\n            await request.readable()\n                .then(readable => {\n                (0, utils_1.pipeline)(readable, req)\n                    .catch(_err => {\n                    // TODO: Implement error handling\n                });\n            });\n        return response;\n    };\n    return (0, fetch_common_1.handleSignalAndTimeout)(signalPromise, timeoutInfo, cleanup, doFetch, socketCleanup);\n}\nexports.fetchImpl = fetchImpl;\nfunction fetch(session, input, init, extra) {\n    var _a;\n    extra = {\n        timeoutAt: extra === null || extra === void 0 ? void 0 : extra.timeoutAt,\n        redirected: (_a = extra === null || extra === void 0 ? void 0 : extra.redirected) !== null && _a !== void 0 ? _a : [],\n    };\n    return fetchImpl(session, input, init, extra);\n}\nexports.fetch = fetch;\n//# sourceMappingURL=fetch-http1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvZmV0Y2gtaHR0cDEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxHQUFHLGlCQUFpQjtBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvQkFBTztBQUMvQixvQkFBb0IsbUJBQU8sQ0FBQywrREFBVztBQUN2QyxnQkFBZ0IsbUJBQU8sQ0FBQyxnRUFBUztBQUNqQyx1QkFBdUIsbUJBQU8sQ0FBQyw4RUFBZ0I7QUFDL0Msa0JBQWtCLG1CQUFPLENBQUMsb0VBQVc7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMsc0VBQVk7QUFDdkMsZ0JBQWdCLG1CQUFPLENBQUMsZ0VBQVM7QUFDakM7QUFDQTtBQUNBLGtHQUFrRztBQUNsRyxrREFBa0Q7QUFDbEQsWUFBWSx3S0FBd0s7QUFDcEwsWUFBWSw4QkFBOEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELGtCQUFrQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQyxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esd0JBQXdCLDBEQUEwRDtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxXQUFXO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQix3QkFBd0IsK0JBQStCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLG9CQUFvQjtBQUNqRztBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9mZXRjaC1oMi9kaXN0L2xpYi9mZXRjaC1odHRwMS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmV0Y2ggPSBleHBvcnRzLmZldGNoSW1wbCA9IHZvaWQgMDtcbmNvbnN0IGh0dHAyXzEgPSByZXF1aXJlKFwiaHR0cDJcIik7XG5jb25zdCBjYWxsZ3VhcmRfMSA9IHJlcXVpcmUoXCJjYWxsZ3VhcmRcIik7XG5jb25zdCBhYm9ydF8xID0gcmVxdWlyZShcIi4vYWJvcnRcIik7XG5jb25zdCBmZXRjaF9jb21tb25fMSA9IHJlcXVpcmUoXCIuL2ZldGNoLWNvbW1vblwiKTtcbmNvbnN0IGhlYWRlcnNfMSA9IHJlcXVpcmUoXCIuL2hlYWRlcnNcIik7XG5jb25zdCByZXNwb25zZV8xID0gcmVxdWlyZShcIi4vcmVzcG9uc2VcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCB7IFxuLy8gUmVzcG9uc2VzLCB0aGVzZSBhcmUgdGhlIHNhbWUgaW4gSFRUUC8xLjEgYW5kIEhUVFAvMlxuSFRUUDJfSEVBREVSX0xPQ0FUSU9OOiBIVFRQMV9IRUFERVJfTE9DQVRJT04sIEhUVFAyX0hFQURFUl9TRVRfQ09PS0lFOiBIVFRQMV9IRUFERVJfU0VUX0NPT0tJRSwgfSA9IGh0dHAyXzEuY29uc3RhbnRzO1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hJbXBsKHNlc3Npb24sIGlucHV0LCBpbml0ID0ge30sIGV4dHJhKSB7XG4gICAgY29uc3QgeyBjbGVhbnVwLCBjb250ZW50RGVjb2RlcnMsIGVuZFN0cmVhbSwgaGVhZGVyc1RvU2VuZCwgaW50ZWdyaXR5LCBtZXRob2QsIG9uVHJhaWxlcnMsIHJlZGlyZWN0LCByZWRpcmVjdGVkLCByZXF1ZXN0LCBzaWduYWwsIHNpZ25hbFByb21pc2UsIHRpbWVvdXRBdCwgdGltZW91dEluZm8sIHVybCwgfSA9IGF3YWl0ICgwLCBmZXRjaF9jb21tb25fMS5zZXR1cEZldGNoKShzZXNzaW9uLCBpbnB1dCwgaW5pdCwgZXh0cmEpO1xuICAgIGNvbnN0IHsgcmVxLCBjbGVhbnVwOiBzb2NrZXRDbGVhbnVwIH0gPSBzZXNzaW9uLmdldCh1cmwpO1xuICAgIGNvbnN0IGRvRmV0Y2ggPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGhlYWRlcnNUb1NlbmQpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXEuc2V0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZ3VhcmQgPSAoMCwgY2FsbGd1YXJkXzEuc3luY0d1YXJkKShyZWplY3QsIHsgY2F0Y2hBc3luYzogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHJlcS5vbmNlKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICAgICAgICAgIHJlcS5vbmNlKFwiYWJvcnRlZFwiLCBndWFyZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCgwLCBmZXRjaF9jb21tb25fMS5tYWtlQWJvcnRlZEVycm9yKSgpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJlcS5vbmNlKFwiY29udGludWVcIiwgZ3VhcmQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgoMCwgZmV0Y2hfY29tbW9uXzEubWFrZTEwMEVycm9yKSgpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJlcS5vbmNlKFwiaW5mb3JtYXRpb25cIiwgZ3VhcmQoKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IHJlc3BvbnNlXzEuUmVzcG9uc2UobnVsbCwgLy8gTm8gYm9keVxuICAgICAgICAgICAgICAgIHsgc3RhdHVzOiByZXMuc3RhdHVzQ29kZSB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXEub25jZShcInRpbWVvdXRcIiwgZ3VhcmQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgoMCwgZmV0Y2hfY29tbW9uXzEubWFrZVRpbWVvdXRFcnJvcikoKSk7XG4gICAgICAgICAgICAgICAgcmVxLmFib3J0KCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXEub25jZShcInVwZ3JhZGVcIiwgZ3VhcmQoKF9yZXMsIF9zb2NrZXQsIF91cGdyYWRlSGVhZCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJVcGdyYWRlIG5vdCBpbXBsZW1lbnRlZCFcIikpO1xuICAgICAgICAgICAgICAgIHJlcS5hYm9ydCgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmVxLm9uY2UoXCJyZXNwb25zZVwiLCBndWFyZCgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzLm9uY2UoXCJlbmRcIiwgc29ja2V0Q2xlYW51cCk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzaWduYWw6IGJvZHlTaWduYWwgPSB2b2lkIDAsIGFib3J0OiBib2R5QWJvcnQgPSB2b2lkIDAsIH0gPSBzaWduYWwgPyBuZXcgYWJvcnRfMS5BYm9ydENvbnRyb2xsZXIoKSA6IHt9O1xuICAgICAgICAgICAgICAgIGlmIChzaWduYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJvcnRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXEuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gcmVhc29uIHRvIGNvbnRpbnVlLCB0aGUgcmVxdWVzdCBpcyBhYm9ydGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBhYm9ydEhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzaWduYWwub25jZShcImFib3J0XCIsIGFib3J0SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5vbmNlKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbC5yZW1vdmVMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IGhlYWRlcnMsIHN0YXR1c0NvZGUgfSA9IHJlcztcbiAgICAgICAgICAgICAgICByZXMub25jZShcImVuZFwiLCBndWFyZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb25UcmFpbGVycylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdHJhaWxlcnMgfSA9IHJlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgaGVhZGVyc18xLkd1YXJkZWRIZWFkZXJzKFwicmVzcG9uc2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0cmFpbGVycykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFpbGVyc1trZXldICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuc2V0KGtleSwgXCJcIiArIHRyYWlsZXJzW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblRyYWlsZXJzKGhlYWRlcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IEltcGxlbWVudCAjOFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcmFpbGVyIGhhbmRsaW5nIGZhaWxlZFwiLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gKDAsIHV0aWxzXzEucGFyc2VMb2NhdGlvbikoaGVhZGVyc1tIVFRQMV9IRUFERVJfTE9DQVRJT05dLCB1cmwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUmVkaXJlY3RlZCA9IHV0aWxzXzEuaXNSZWRpcmVjdFN0YXR1c1tcIlwiICsgc3RhdHVzQ29kZV07XG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcnNbSFRUUDFfSEVBREVSX1NFVF9DT09LSUVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldENvb2tpZXMgPSAoMCwgdXRpbHNfMS5hcnJheWlmeSkoaGVhZGVyc1tIVFRQMV9IRUFERVJfU0VUX0NPT0tJRV0pO1xuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLmNvb2tpZUphci5zZXRDb29raWVzKHNldENvb2tpZXMsIHVybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaW5wdXQuYWxsb3dGb3JiaWRkZW5IZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzW1wic2V0LWNvb2tpZVwiXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbXCJzZXQtY29va2llMlwiXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVkaXJlY3RlZCAmJiAhbG9jYXRpb24pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoKDAsIGZldGNoX2NvbW1vbl8xLm1ha2VJbGxlZ2FsUmVkaXJlY3RFcnJvcikoKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1JlZGlyZWN0ZWQgfHwgcmVkaXJlY3QgPT09IFwibWFudWFsXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKG5ldyByZXNwb25zZV8xLlN0cmVhbVJlc3BvbnNlKGNvbnRlbnREZWNvZGVycywgdXJsLCByZXMsIGhlYWRlcnMsIHJlZGlyZWN0ID09PSBcIm1hbnVhbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGV4dHJhLnJlZGlyZWN0ZWQubGVuZ3RoID4gMCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZXMuc3RhdHVzQ29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHJlcy5zdGF0dXNNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9LCBib2R5U2lnbmFsLCAxLCBpbnB1dC5hbGxvd0ZvcmJpZGRlbkhlYWRlcnMsIGludGVncml0eSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdXJsOiBsb2NhdGlvblVybCwgaXNSZWxhdGl2ZSB9ID0gbG9jYXRpb247XG4gICAgICAgICAgICAgICAgaWYgKHJlZGlyZWN0ID09PSBcImVycm9yXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoKDAsIGZldGNoX2NvbW1vbl8xLm1ha2VSZWRpcmVjdGlvbkVycm9yKShsb2NhdGlvblVybCkpO1xuICAgICAgICAgICAgICAgIC8vIHJlZGlyZWN0IGlzICdmb2xsb3cnXG4gICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCByZS1zZW5kaW5nIGEgbm9uLUdFVC9IRUFEIHJlcXVlc3QgKGFzXG4gICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3Qgd2FudCB0byBbY2FuJ3QsIGlmIGl0cycgc3RyZWFtZWRdIHJlLXNlbmQgdGhlXG4gICAgICAgICAgICAgICAgLy8gYm9keSkuIFRoZSBjb25jZXB0IGlzIGZ1bmRlbWVudGFsbHkgYnJva2VuIGFueXdheS4uLlxuICAgICAgICAgICAgICAgIGlmICghZW5kU3RyZWFtKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCgwLCBmZXRjaF9jb21tb25fMS5tYWtlUmVkaXJlY3Rpb25NZXRob2RFcnJvcikobG9jYXRpb25VcmwsIG1ldGhvZCkpO1xuICAgICAgICAgICAgICAgIHJlcy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmZXRjaEltcGwoc2Vzc2lvbiwgcmVxdWVzdC5jbG9uZShsb2NhdGlvblVybCksIHsgc2lnbmFsLCBvblRyYWlsZXJzIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0ZWQ6IHJlZGlyZWN0ZWQuY29uY2F0KHVybCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0QXQsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc2Vzc2lvbi5uZXdGZXRjaChyZXF1ZXN0LmNsb25lKGxvY2F0aW9uVXJsKSwgaW5pdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dEF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RlZDogcmVkaXJlY3RlZC5jb25jYXQodXJsKSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChlbmRTdHJlYW0pXG4gICAgICAgICAgICByZXEuZW5kKCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGF3YWl0IHJlcXVlc3QucmVhZGFibGUoKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlYWRhYmxlID0+IHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5waXBlbGluZSkocmVhZGFibGUsIHJlcSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKF9lcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgZXJyb3IgaGFuZGxpbmdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfTtcbiAgICByZXR1cm4gKDAsIGZldGNoX2NvbW1vbl8xLmhhbmRsZVNpZ25hbEFuZFRpbWVvdXQpKHNpZ25hbFByb21pc2UsIHRpbWVvdXRJbmZvLCBjbGVhbnVwLCBkb0ZldGNoLCBzb2NrZXRDbGVhbnVwKTtcbn1cbmV4cG9ydHMuZmV0Y2hJbXBsID0gZmV0Y2hJbXBsO1xuZnVuY3Rpb24gZmV0Y2goc2Vzc2lvbiwgaW5wdXQsIGluaXQsIGV4dHJhKSB7XG4gICAgdmFyIF9hO1xuICAgIGV4dHJhID0ge1xuICAgICAgICB0aW1lb3V0QXQ6IGV4dHJhID09PSBudWxsIHx8IGV4dHJhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleHRyYS50aW1lb3V0QXQsXG4gICAgICAgIHJlZGlyZWN0ZWQ6IChfYSA9IGV4dHJhID09PSBudWxsIHx8IGV4dHJhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleHRyYS5yZWRpcmVjdGVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSxcbiAgICB9O1xuICAgIHJldHVybiBmZXRjaEltcGwoc2Vzc2lvbiwgaW5wdXQsIGluaXQsIGV4dHJhKTtcbn1cbmV4cG9ydHMuZmV0Y2ggPSBmZXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoLWh0dHAxLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/fetch-http1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/fetch-http2.js":
/*!*******************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/fetch-http2.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetch = void 0;\nconst http2_1 = __webpack_require__(/*! http2 */ \"http2\");\nconst callguard_1 = __webpack_require__(/*! callguard */ \"(rsc)/./node_modules/callguard/dist/index.js\");\nconst abort_1 = __webpack_require__(/*! ./abort */ \"(rsc)/./node_modules/fetch-h2/dist/lib/abort.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/fetch-h2/dist/lib/core.js\");\nconst fetch_common_1 = __webpack_require__(/*! ./fetch-common */ \"(rsc)/./node_modules/fetch-h2/dist/lib/fetch-common.js\");\nconst headers_1 = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/fetch-h2/dist/lib/headers.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/fetch-h2/dist/lib/response.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fetch-h2/dist/lib/utils.js\");\nconst utils_http2_1 = __webpack_require__(/*! ./utils-http2 */ \"(rsc)/./node_modules/fetch-h2/dist/lib/utils-http2.js\");\nconst { \n// Responses\nHTTP2_HEADER_STATUS, HTTP2_HEADER_LOCATION, HTTP2_HEADER_SET_COOKIE, \n// Error codes\nNGHTTP2_NO_ERROR, } = http2_1.constants;\n// This is from nghttp2.h, but undocumented in Node.js\nconst NGHTTP2_ERR_START_STREAM_NOT_ALLOWED = -516;\nasync function fetchImpl(session, input, init = {}, extra) {\n    const { cleanup, contentDecoders, endStream, headersToSend, integrity, method, onTrailers, origin, redirect, redirected, request, signal, signalPromise, timeoutAt, timeoutInfo, url, } = await (0, fetch_common_1.setupFetch)(session, input, init, extra);\n    const { raceConditionedGoaway } = extra;\n    const streamPromise = session.get();\n    async function doFetch() {\n        const { session: ph2session, cleanup: socketCleanup } = streamPromise;\n        const h2session = await ph2session;\n        const tryRetryOnGoaway = (resolve) => {\n            // This could be due to a race-condition in GOAWAY.\n            // As of current Node.js, the 'goaway' event is emitted on the\n            // session before this event (at least frameError, probably\n            // 'error' too) is emitted, so we will know if we got it.\n            if (!raceConditionedGoaway.has(origin) &&\n                (0, utils_http2_1.hasGotGoaway)(h2session)) {\n                // Don't retry again due to potential GOAWAY\n                raceConditionedGoaway.add(origin);\n                // Since we've got the 'goaway' event, the\n                // context has already released the session,\n                // so a retry will create a new session.\n                resolve(fetchImpl(session, request, { signal, onTrailers }, {\n                    raceConditionedGoaway,\n                    redirected,\n                    timeoutAt,\n                }));\n                return true;\n            }\n            return false;\n        };\n        let stream;\n        let shouldCleanupSocket = true;\n        try {\n            stream = h2session.request(headersToSend, { endStream });\n        }\n        catch (err) {\n            if (err.code === \"ERR_HTTP2_GOAWAY_SESSION\") {\n                // Retry with new session\n                throw new core_1.RetryError(err.code);\n            }\n            throw err;\n        }\n        const response = new Promise((resolve, reject) => {\n            const guard = (0, callguard_1.syncGuard)(reject, { catchAsync: true });\n            stream.on(\"aborted\", guard((..._whatever) => {\n                reject((0, fetch_common_1.makeAbortedError)());\n            }));\n            stream.on(\"error\", guard((err) => {\n                if (err &&\n                    err.code === \"ERR_HTTP2_STREAM_ERROR\" &&\n                    err.message &&\n                    err.message.includes(\"NGHTTP2_REFUSED_STREAM\")) {\n                    if (tryRetryOnGoaway(resolve))\n                        return;\n                }\n                reject(err);\n            }));\n            stream.on(\"frameError\", guard((_type, code, _streamId) => {\n                if (code === NGHTTP2_ERR_START_STREAM_NOT_ALLOWED &&\n                    endStream) {\n                    if (tryRetryOnGoaway(resolve))\n                        return;\n                }\n                reject(new Error(\"Request failed\"));\n            }));\n            stream.on(\"close\", guard(() => {\n                if (shouldCleanupSocket)\n                    socketCleanup();\n                // We'll get an 'error' event if there actually is an\n                // error, but not if we got NGHTTP2_NO_ERROR.\n                // In case of an error, the 'error' event will be awaited\n                // instead, to get (and propagate) the error object.\n                if (stream.rstCode === NGHTTP2_NO_ERROR)\n                    reject(new core_1.AbortError(\"Stream prematurely closed\"));\n            }));\n            stream.on(\"timeout\", guard((..._whatever) => {\n                reject((0, fetch_common_1.makeTimeoutError)());\n            }));\n            stream.on(\"trailers\", guard((_headers, _flags) => {\n                if (!onTrailers)\n                    return;\n                try {\n                    const headers = new headers_1.GuardedHeaders(\"response\");\n                    Object.keys(_headers).forEach(key => {\n                        if (Array.isArray(_headers[key]))\n                            _headers[key]\n                                .forEach(value => headers.append(key, value));\n                        else\n                            headers.set(key, \"\" + _headers[key]);\n                    });\n                    onTrailers(headers);\n                }\n                catch (err) {\n                    // TODO: Implement #8\n                    // tslint:disable-next-line\n                    console.warn(\"Trailer handling failed\", err);\n                }\n            }));\n            // ClientHttp2Stream events\n            stream.on(\"continue\", guard((..._whatever) => {\n                reject((0, fetch_common_1.make100Error)());\n            }));\n            stream.on(\"response\", guard((headers) => {\n                const { signal: bodySignal = void 0, abort: bodyAbort = void 0, } = signal ? new abort_1.AbortController() : {};\n                if (signal) {\n                    const abortHandler = () => {\n                        bodyAbort();\n                        stream.destroy();\n                    };\n                    if (signal.aborted) {\n                        // No reason to continue, the request is aborted\n                        abortHandler();\n                        return;\n                    }\n                    signal.once(\"abort\", abortHandler);\n                    stream.once(\"close\", () => {\n                        signal.removeListener(\"abort\", abortHandler);\n                    });\n                }\n                const status = \"\" + headers[HTTP2_HEADER_STATUS];\n                const location = (0, utils_1.parseLocation)(headers[HTTP2_HEADER_LOCATION], url);\n                const isRedirected = utils_1.isRedirectStatus[status];\n                if (headers[HTTP2_HEADER_SET_COOKIE]) {\n                    const setCookies = (0, utils_1.arrayify)(headers[HTTP2_HEADER_SET_COOKIE]);\n                    session.cookieJar.setCookies(setCookies, url);\n                }\n                if (!input.allowForbiddenHeaders) {\n                    delete headers[\"set-cookie\"];\n                    delete headers[\"set-cookie2\"];\n                }\n                if (isRedirected && !location)\n                    return reject((0, fetch_common_1.makeIllegalRedirectError)());\n                if (!isRedirected || redirect === \"manual\")\n                    return resolve(new response_1.StreamResponse(contentDecoders, url, stream, headers, redirect === \"manual\"\n                        ? false\n                        : extra.redirected.length > 0, {}, bodySignal, 2, input.allowForbiddenHeaders, integrity));\n                const { url: locationUrl, isRelative } = location;\n                if (redirect === \"error\")\n                    return reject((0, fetch_common_1.makeRedirectionError)(locationUrl));\n                // redirect is 'follow'\n                // We don't support re-sending a non-GET/HEAD request (as\n                // we don't want to [can't, if its' streamed] re-send the\n                // body). The concept is fundementally broken anyway...\n                if (!endStream)\n                    return reject((0, fetch_common_1.makeRedirectionMethodError)(locationUrl, method));\n                if (!location)\n                    return reject((0, fetch_common_1.makeIllegalRedirectError)());\n                if (isRelative) {\n                    shouldCleanupSocket = false;\n                    stream.destroy();\n                    resolve(fetchImpl(session, request.clone(locationUrl), init, {\n                        raceConditionedGoaway,\n                        redirected: redirected.concat(url),\n                        timeoutAt,\n                    }));\n                }\n                else {\n                    resolve(session.newFetch(request.clone(locationUrl), init, {\n                        timeoutAt,\n                        redirected: redirected.concat(url),\n                    }));\n                }\n            }));\n        });\n        if (!endStream)\n            await request.readable()\n                .then(readable => {\n                (0, utils_1.pipeline)(readable, stream)\n                    .catch(_err => {\n                    // TODO: Implement error handling\n                });\n            });\n        return response;\n    }\n    return (0, fetch_common_1.handleSignalAndTimeout)(signalPromise, timeoutInfo, cleanup, doFetch, streamPromise.cleanup);\n}\nfunction fetch(session, input, init, extra) {\n    var _a;\n    const http2Extra = {\n        timeoutAt: extra === null || extra === void 0 ? void 0 : extra.timeoutAt,\n        redirected: (_a = extra === null || extra === void 0 ? void 0 : extra.redirected) !== null && _a !== void 0 ? _a : [],\n        raceConditionedGoaway: new Set(),\n    };\n    return fetchImpl(session, input, init, http2Extra);\n}\nexports.fetch = fetch;\n//# sourceMappingURL=fetch-http2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvZmV0Y2gtaHR0cDIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGdCQUFnQixtQkFBTyxDQUFDLG9CQUFPO0FBQy9CLG9CQUFvQixtQkFBTyxDQUFDLCtEQUFXO0FBQ3ZDLGdCQUFnQixtQkFBTyxDQUFDLGdFQUFTO0FBQ2pDLGVBQWUsbUJBQU8sQ0FBQyw4REFBUTtBQUMvQix1QkFBdUIsbUJBQU8sQ0FBQyw4RUFBZ0I7QUFDL0Msa0JBQWtCLG1CQUFPLENBQUMsb0VBQVc7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMsc0VBQVk7QUFDdkMsZ0JBQWdCLG1CQUFPLENBQUMsZ0VBQVM7QUFDakMsc0JBQXNCLG1CQUFPLENBQUMsNEVBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRCxZQUFZLGdMQUFnTDtBQUM1TCxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0EsZ0JBQWdCLDhDQUE4QztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxvQkFBb0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELFdBQVc7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELGtCQUFrQjtBQUNqRjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLHdCQUF3QiwwREFBMEQ7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RCx3QkFBd0IsK0JBQStCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL2ZldGNoLWgyL2Rpc3QvbGliL2ZldGNoLWh0dHAyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mZXRjaCA9IHZvaWQgMDtcbmNvbnN0IGh0dHAyXzEgPSByZXF1aXJlKFwiaHR0cDJcIik7XG5jb25zdCBjYWxsZ3VhcmRfMSA9IHJlcXVpcmUoXCJjYWxsZ3VhcmRcIik7XG5jb25zdCBhYm9ydF8xID0gcmVxdWlyZShcIi4vYWJvcnRcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi9jb3JlXCIpO1xuY29uc3QgZmV0Y2hfY29tbW9uXzEgPSByZXF1aXJlKFwiLi9mZXRjaC1jb21tb25cIik7XG5jb25zdCBoZWFkZXJzXzEgPSByZXF1aXJlKFwiLi9oZWFkZXJzXCIpO1xuY29uc3QgcmVzcG9uc2VfMSA9IHJlcXVpcmUoXCIuL3Jlc3BvbnNlXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuY29uc3QgdXRpbHNfaHR0cDJfMSA9IHJlcXVpcmUoXCIuL3V0aWxzLWh0dHAyXCIpO1xuY29uc3QgeyBcbi8vIFJlc3BvbnNlc1xuSFRUUDJfSEVBREVSX1NUQVRVUywgSFRUUDJfSEVBREVSX0xPQ0FUSU9OLCBIVFRQMl9IRUFERVJfU0VUX0NPT0tJRSwgXG4vLyBFcnJvciBjb2Rlc1xuTkdIVFRQMl9OT19FUlJPUiwgfSA9IGh0dHAyXzEuY29uc3RhbnRzO1xuLy8gVGhpcyBpcyBmcm9tIG5naHR0cDIuaCwgYnV0IHVuZG9jdW1lbnRlZCBpbiBOb2RlLmpzXG5jb25zdCBOR0hUVFAyX0VSUl9TVEFSVF9TVFJFQU1fTk9UX0FMTE9XRUQgPSAtNTE2O1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hJbXBsKHNlc3Npb24sIGlucHV0LCBpbml0ID0ge30sIGV4dHJhKSB7XG4gICAgY29uc3QgeyBjbGVhbnVwLCBjb250ZW50RGVjb2RlcnMsIGVuZFN0cmVhbSwgaGVhZGVyc1RvU2VuZCwgaW50ZWdyaXR5LCBtZXRob2QsIG9uVHJhaWxlcnMsIG9yaWdpbiwgcmVkaXJlY3QsIHJlZGlyZWN0ZWQsIHJlcXVlc3QsIHNpZ25hbCwgc2lnbmFsUHJvbWlzZSwgdGltZW91dEF0LCB0aW1lb3V0SW5mbywgdXJsLCB9ID0gYXdhaXQgKDAsIGZldGNoX2NvbW1vbl8xLnNldHVwRmV0Y2gpKHNlc3Npb24sIGlucHV0LCBpbml0LCBleHRyYSk7XG4gICAgY29uc3QgeyByYWNlQ29uZGl0aW9uZWRHb2F3YXkgfSA9IGV4dHJhO1xuICAgIGNvbnN0IHN0cmVhbVByb21pc2UgPSBzZXNzaW9uLmdldCgpO1xuICAgIGFzeW5jIGZ1bmN0aW9uIGRvRmV0Y2goKSB7XG4gICAgICAgIGNvbnN0IHsgc2Vzc2lvbjogcGgyc2Vzc2lvbiwgY2xlYW51cDogc29ja2V0Q2xlYW51cCB9ID0gc3RyZWFtUHJvbWlzZTtcbiAgICAgICAgY29uc3QgaDJzZXNzaW9uID0gYXdhaXQgcGgyc2Vzc2lvbjtcbiAgICAgICAgY29uc3QgdHJ5UmV0cnlPbkdvYXdheSA9IChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAvLyBUaGlzIGNvdWxkIGJlIGR1ZSB0byBhIHJhY2UtY29uZGl0aW9uIGluIEdPQVdBWS5cbiAgICAgICAgICAgIC8vIEFzIG9mIGN1cnJlbnQgTm9kZS5qcywgdGhlICdnb2F3YXknIGV2ZW50IGlzIGVtaXR0ZWQgb24gdGhlXG4gICAgICAgICAgICAvLyBzZXNzaW9uIGJlZm9yZSB0aGlzIGV2ZW50IChhdCBsZWFzdCBmcmFtZUVycm9yLCBwcm9iYWJseVxuICAgICAgICAgICAgLy8gJ2Vycm9yJyB0b28pIGlzIGVtaXR0ZWQsIHNvIHdlIHdpbGwga25vdyBpZiB3ZSBnb3QgaXQuXG4gICAgICAgICAgICBpZiAoIXJhY2VDb25kaXRpb25lZEdvYXdheS5oYXMob3JpZ2luKSAmJlxuICAgICAgICAgICAgICAgICgwLCB1dGlsc19odHRwMl8xLmhhc0dvdEdvYXdheSkoaDJzZXNzaW9uKSkge1xuICAgICAgICAgICAgICAgIC8vIERvbid0IHJldHJ5IGFnYWluIGR1ZSB0byBwb3RlbnRpYWwgR09BV0FZXG4gICAgICAgICAgICAgICAgcmFjZUNvbmRpdGlvbmVkR29hd2F5LmFkZChvcmlnaW4pO1xuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlJ3ZlIGdvdCB0aGUgJ2dvYXdheScgZXZlbnQsIHRoZVxuICAgICAgICAgICAgICAgIC8vIGNvbnRleHQgaGFzIGFscmVhZHkgcmVsZWFzZWQgdGhlIHNlc3Npb24sXG4gICAgICAgICAgICAgICAgLy8gc28gYSByZXRyeSB3aWxsIGNyZWF0ZSBhIG5ldyBzZXNzaW9uLlxuICAgICAgICAgICAgICAgIHJlc29sdmUoZmV0Y2hJbXBsKHNlc3Npb24sIHJlcXVlc3QsIHsgc2lnbmFsLCBvblRyYWlsZXJzIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgcmFjZUNvbmRpdGlvbmVkR29hd2F5LFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdGVkLFxuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0QXQsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgc3RyZWFtO1xuICAgICAgICBsZXQgc2hvdWxkQ2xlYW51cFNvY2tldCA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdHJlYW0gPSBoMnNlc3Npb24ucmVxdWVzdChoZWFkZXJzVG9TZW5kLCB7IGVuZFN0cmVhbSB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09IFwiRVJSX0hUVFAyX0dPQVdBWV9TRVNTSU9OXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXRyeSB3aXRoIG5ldyBzZXNzaW9uXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfMS5SZXRyeUVycm9yKGVyci5jb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gKDAsIGNhbGxndWFyZF8xLnN5bmNHdWFyZCkocmVqZWN0LCB7IGNhdGNoQXN5bmM6IHRydWUgfSk7XG4gICAgICAgICAgICBzdHJlYW0ub24oXCJhYm9ydGVkXCIsIGd1YXJkKCguLi5fd2hhdGV2ZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoKDAsIGZldGNoX2NvbW1vbl8xLm1ha2VBYm9ydGVkRXJyb3IpKCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgZ3VhcmQoKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgJiZcbiAgICAgICAgICAgICAgICAgICAgZXJyLmNvZGUgPT09IFwiRVJSX0hUVFAyX1NUUkVBTV9FUlJPUlwiICYmXG4gICAgICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlICYmXG4gICAgICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlLmluY2x1ZGVzKFwiTkdIVFRQMl9SRUZVU0VEX1NUUkVBTVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJ5UmV0cnlPbkdvYXdheShyZXNvbHZlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBzdHJlYW0ub24oXCJmcmFtZUVycm9yXCIsIGd1YXJkKChfdHlwZSwgY29kZSwgX3N0cmVhbUlkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IE5HSFRUUDJfRVJSX1NUQVJUX1NUUkVBTV9OT1RfQUxMT1dFRCAmJlxuICAgICAgICAgICAgICAgICAgICBlbmRTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyeVJldHJ5T25Hb2F3YXkocmVzb2x2ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJSZXF1ZXN0IGZhaWxlZFwiKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBzdHJlYW0ub24oXCJjbG9zZVwiLCBndWFyZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZENsZWFudXBTb2NrZXQpXG4gICAgICAgICAgICAgICAgICAgIHNvY2tldENsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAvLyBXZSdsbCBnZXQgYW4gJ2Vycm9yJyBldmVudCBpZiB0aGVyZSBhY3R1YWxseSBpcyBhblxuICAgICAgICAgICAgICAgIC8vIGVycm9yLCBidXQgbm90IGlmIHdlIGdvdCBOR0hUVFAyX05PX0VSUk9SLlxuICAgICAgICAgICAgICAgIC8vIEluIGNhc2Ugb2YgYW4gZXJyb3IsIHRoZSAnZXJyb3InIGV2ZW50IHdpbGwgYmUgYXdhaXRlZFxuICAgICAgICAgICAgICAgIC8vIGluc3RlYWQsIHRvIGdldCAoYW5kIHByb3BhZ2F0ZSkgdGhlIGVycm9yIG9iamVjdC5cbiAgICAgICAgICAgICAgICBpZiAoc3RyZWFtLnJzdENvZGUgPT09IE5HSFRUUDJfTk9fRVJST1IpXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgY29yZV8xLkFib3J0RXJyb3IoXCJTdHJlYW0gcHJlbWF0dXJlbHkgY2xvc2VkXCIpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHN0cmVhbS5vbihcInRpbWVvdXRcIiwgZ3VhcmQoKC4uLl93aGF0ZXZlcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgoMCwgZmV0Y2hfY29tbW9uXzEubWFrZVRpbWVvdXRFcnJvcikoKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBzdHJlYW0ub24oXCJ0cmFpbGVyc1wiLCBndWFyZCgoX2hlYWRlcnMsIF9mbGFncykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghb25UcmFpbGVycylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgaGVhZGVyc18xLkd1YXJkZWRIZWFkZXJzKFwicmVzcG9uc2VcIik7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKF9oZWFkZXJzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShfaGVhZGVyc1trZXldKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGVhZGVyc1trZXldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKHZhbHVlID0+IGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLnNldChrZXksIFwiXCIgKyBfaGVhZGVyc1trZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG9uVHJhaWxlcnMoaGVhZGVycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogSW1wbGVtZW50ICM4XG4gICAgICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcmFpbGVyIGhhbmRsaW5nIGZhaWxlZFwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIC8vIENsaWVudEh0dHAyU3RyZWFtIGV2ZW50c1xuICAgICAgICAgICAgc3RyZWFtLm9uKFwiY29udGludWVcIiwgZ3VhcmQoKC4uLl93aGF0ZXZlcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgoMCwgZmV0Y2hfY29tbW9uXzEubWFrZTEwMEVycm9yKSgpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHN0cmVhbS5vbihcInJlc3BvbnNlXCIsIGd1YXJkKChoZWFkZXJzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzaWduYWw6IGJvZHlTaWduYWwgPSB2b2lkIDAsIGFib3J0OiBib2R5QWJvcnQgPSB2b2lkIDAsIH0gPSBzaWduYWwgPyBuZXcgYWJvcnRfMS5BYm9ydENvbnRyb2xsZXIoKSA6IHt9O1xuICAgICAgICAgICAgICAgIGlmIChzaWduYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJvcnRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIHJlYXNvbiB0byBjb250aW51ZSwgdGhlIHJlcXVlc3QgaXMgYWJvcnRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRIYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsLm9uY2UoXCJhYm9ydFwiLCBhYm9ydEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0ub25jZShcImNsb3NlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbC5yZW1vdmVMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBcIlwiICsgaGVhZGVyc1tIVFRQMl9IRUFERVJfU1RBVFVTXTtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9ICgwLCB1dGlsc18xLnBhcnNlTG9jYXRpb24pKGhlYWRlcnNbSFRUUDJfSEVBREVSX0xPQ0FUSU9OXSwgdXJsKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc1JlZGlyZWN0ZWQgPSB1dGlsc18xLmlzUmVkaXJlY3RTdGF0dXNbc3RhdHVzXTtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyc1tIVFRQMl9IRUFERVJfU0VUX0NPT0tJRV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2V0Q29va2llcyA9ICgwLCB1dGlsc18xLmFycmF5aWZ5KShoZWFkZXJzW0hUVFAyX0hFQURFUl9TRVRfQ09PS0lFXSk7XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24uY29va2llSmFyLnNldENvb2tpZXMoc2V0Q29va2llcywgdXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5hbGxvd0ZvcmJpZGRlbkhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbXCJzZXQtY29va2llXCJdO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1tcInNldC1jb29raWUyXCJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNSZWRpcmVjdGVkICYmICFsb2NhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgoMCwgZmV0Y2hfY29tbW9uXzEubWFrZUlsbGVnYWxSZWRpcmVjdEVycm9yKSgpKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzUmVkaXJlY3RlZCB8fCByZWRpcmVjdCA9PT0gXCJtYW51YWxcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUobmV3IHJlc3BvbnNlXzEuU3RyZWFtUmVzcG9uc2UoY29udGVudERlY29kZXJzLCB1cmwsIHN0cmVhbSwgaGVhZGVycywgcmVkaXJlY3QgPT09IFwibWFudWFsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZXh0cmEucmVkaXJlY3RlZC5sZW5ndGggPiAwLCB7fSwgYm9keVNpZ25hbCwgMiwgaW5wdXQuYWxsb3dGb3JiaWRkZW5IZWFkZXJzLCBpbnRlZ3JpdHkpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHVybDogbG9jYXRpb25VcmwsIGlzUmVsYXRpdmUgfSA9IGxvY2F0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChyZWRpcmVjdCA9PT0gXCJlcnJvclwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCgwLCBmZXRjaF9jb21tb25fMS5tYWtlUmVkaXJlY3Rpb25FcnJvcikobG9jYXRpb25VcmwpKTtcbiAgICAgICAgICAgICAgICAvLyByZWRpcmVjdCBpcyAnZm9sbG93J1xuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgcmUtc2VuZGluZyBhIG5vbi1HRVQvSEVBRCByZXF1ZXN0IChhc1xuICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gW2Nhbid0LCBpZiBpdHMnIHN0cmVhbWVkXSByZS1zZW5kIHRoZVxuICAgICAgICAgICAgICAgIC8vIGJvZHkpLiBUaGUgY29uY2VwdCBpcyBmdW5kZW1lbnRhbGx5IGJyb2tlbiBhbnl3YXkuLi5cbiAgICAgICAgICAgICAgICBpZiAoIWVuZFN0cmVhbSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgoMCwgZmV0Y2hfY29tbW9uXzEubWFrZVJlZGlyZWN0aW9uTWV0aG9kRXJyb3IpKGxvY2F0aW9uVXJsLCBtZXRob2QpKTtcbiAgICAgICAgICAgICAgICBpZiAoIWxvY2F0aW9uKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCgwLCBmZXRjaF9jb21tb25fMS5tYWtlSWxsZWdhbFJlZGlyZWN0RXJyb3IpKCkpO1xuICAgICAgICAgICAgICAgIGlmIChpc1JlbGF0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3VsZENsZWFudXBTb2NrZXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmZXRjaEltcGwoc2Vzc2lvbiwgcmVxdWVzdC5jbG9uZShsb2NhdGlvblVybCksIGluaXQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhY2VDb25kaXRpb25lZEdvYXdheSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0ZWQ6IHJlZGlyZWN0ZWQuY29uY2F0KHVybCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0QXQsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc2Vzc2lvbi5uZXdGZXRjaChyZXF1ZXN0LmNsb25lKGxvY2F0aW9uVXJsKSwgaW5pdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dEF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RlZDogcmVkaXJlY3RlZC5jb25jYXQodXJsKSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghZW5kU3RyZWFtKVxuICAgICAgICAgICAgYXdhaXQgcmVxdWVzdC5yZWFkYWJsZSgpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVhZGFibGUgPT4ge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLnBpcGVsaW5lKShyZWFkYWJsZSwgc3RyZWFtKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goX2VyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IEltcGxlbWVudCBlcnJvciBoYW5kbGluZ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBmZXRjaF9jb21tb25fMS5oYW5kbGVTaWduYWxBbmRUaW1lb3V0KShzaWduYWxQcm9taXNlLCB0aW1lb3V0SW5mbywgY2xlYW51cCwgZG9GZXRjaCwgc3RyZWFtUHJvbWlzZS5jbGVhbnVwKTtcbn1cbmZ1bmN0aW9uIGZldGNoKHNlc3Npb24sIGlucHV0LCBpbml0LCBleHRyYSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBodHRwMkV4dHJhID0ge1xuICAgICAgICB0aW1lb3V0QXQ6IGV4dHJhID09PSBudWxsIHx8IGV4dHJhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleHRyYS50aW1lb3V0QXQsXG4gICAgICAgIHJlZGlyZWN0ZWQ6IChfYSA9IGV4dHJhID09PSBudWxsIHx8IGV4dHJhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleHRyYS5yZWRpcmVjdGVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSxcbiAgICAgICAgcmFjZUNvbmRpdGlvbmVkR29hd2F5OiBuZXcgU2V0KCksXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hJbXBsKHNlc3Npb24sIGlucHV0LCBpbml0LCBodHRwMkV4dHJhKTtcbn1cbmV4cG9ydHMuZmV0Y2ggPSBmZXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoLWh0dHAyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/fetch-http2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/generated/version.js":
/*!*************************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/generated/version.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\nexports.version = \"3.0.2\";\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvZ2VuZXJhdGVkL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL2ZldGNoLWgyL2Rpc3QvbGliL2dlbmVyYXRlZC92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52ZXJzaW9uID0gdm9pZCAwO1xuZXhwb3J0cy52ZXJzaW9uID0gXCIzLjAuMlwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/generated/version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/headers.js":
/*!***************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/headers.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ensureHeaders = exports.GuardedHeaders = exports.Headers = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fetch-h2/dist/lib/utils.js\");\nconst forbiddenHeaders = [\n    \"accept-charset\",\n    \"accept-encoding\",\n    \"access-control-request-headers\",\n    \"access-control-request-method\",\n    \"connection\",\n    \"content-length\",\n    \"cookie\",\n    \"cookie2\",\n    \"date\",\n    \"dnt\",\n    \"expect\",\n    \"host\",\n    \"keep-alive\",\n    \"origin\",\n    \"referer\",\n    \"te\",\n    \"trailer\",\n    \"transfer-encoding\",\n    \"upgrade\",\n    \"via\",\n];\nfunction isForbiddenHeader(name) {\n    if (name.startsWith(\"proxy-\") || name.startsWith(\"sec-\"))\n        // Safe headers\n        return false;\n    return forbiddenHeaders.includes(name);\n}\nfunction isForbiddenResponseHeader(name) {\n    return [\"set-cookie\", \"set-cookie2\"].includes(name);\n}\nfunction isSimpleHeader(name, value) {\n    const simpleHeaders = [\n        \"accept\",\n        \"accept-language\",\n        \"content-language\",\n        \"dpr\",\n        \"downlink\",\n        \"save-data\",\n        \"viewport-width\",\n        \"width\",\n    ];\n    if (simpleHeaders.includes(name))\n        return true;\n    if (name !== \"content-type\")\n        return false;\n    if (value == null)\n        return false;\n    const mimeType = value.replace(/;.*/, \"\").toLowerCase();\n    return [\n        \"application/x-www-form-urlencoded\",\n        \"multipart/form-data\",\n        \"text/plain\",\n    ].includes(mimeType);\n}\nfunction filterName(name) {\n    if (/[^A-Za-z0-9\\-#$%&'*+.\\^_`|~]/.test(name))\n        throw new TypeError(\"Invalid character in header field name: \" + name);\n    return name.toLowerCase();\n}\nfunction _ensureGuard(guard, name, value) {\n    if (guard === \"immutable\")\n        throw new TypeError(\"Header guard error: Cannot change immutable header\");\n    if (!name)\n        return;\n    if (guard === \"request\" && isForbiddenHeader(name))\n        throw new TypeError(\"Header guard error: \" +\n            \"Cannot set forbidden header for requests\" +\n            ` (${name})`);\n    if (guard === \"request-no-cors\" && !isSimpleHeader(name, value))\n        throw new TypeError(\"Header guard error: \" +\n            \"Cannot set non-simple header for no-cors requests\" +\n            ` (${name})`);\n    if (guard === \"response\" && isForbiddenResponseHeader(name))\n        throw new TypeError(\"Header guard error: \" +\n            \"Cannot set forbidden response header for response\" +\n            ` (${name})`);\n}\nlet _guard = null;\nclass Headers {\n    constructor(init) {\n        this._guard = _guard || \"none\";\n        _guard = null;\n        this._data = new Map();\n        const set = (name, values) => {\n            if (values.length === 1)\n                this.set(name, values[0]);\n            else\n                for (const value of values)\n                    this.append(name, value);\n        };\n        if (!init)\n            return;\n        else if (init instanceof Headers) {\n            for (const [name, values] of init._data.entries())\n                set(name, values);\n        }\n        else {\n            for (const _name of Object.keys(init)) {\n                const name = filterName(_name);\n                const value = (0, utils_1.arrayify)(init[_name])\n                    .map(val => `${val}`);\n                set(name, [...value]);\n            }\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"Map\"; // This causes unit test libraries to treat this as a Map\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    append(name, value) {\n        const _name = filterName(name);\n        _ensureGuard(this._guard, _name, value);\n        if (!this._data.has(_name))\n            this._data.set(_name, [value]);\n        else\n            this._data.get(_name).push(value);\n    }\n    delete(name) {\n        const _name = filterName(name);\n        _ensureGuard(this._guard);\n        this._data.delete(_name);\n    }\n    *entries() {\n        for (const [name, value] of this._data.entries())\n            yield [name, value.join(\",\")];\n    }\n    get(name) {\n        const _name = filterName(name);\n        return this._data.has(_name)\n            ? this._data.get(_name).join(\",\")\n            : null;\n    }\n    has(name) {\n        return this._data.has(filterName(name));\n    }\n    keys() {\n        return this._data.keys();\n    }\n    set(name, value) {\n        const _name = filterName(name);\n        _ensureGuard(this._guard, _name, value);\n        this._data.set(_name, [value]);\n    }\n    *values() {\n        for (const value of this._data.values())\n            yield value.join(\",\");\n    }\n    // This is non-standard, but useful\n    toJSON() {\n        return [...this.entries()]\n            .reduce((prev, [key, val]) => Object.assign(prev, { [key]: val }), {});\n    }\n}\nexports.Headers = Headers;\nclass GuardedHeaders extends Headers {\n    constructor(guard, init) {\n        super((_guard = guard, init));\n        _guard = null;\n    }\n}\nexports.GuardedHeaders = GuardedHeaders;\nfunction ensureHeaders(headers) {\n    return headers instanceof Headers ? headers : new Headers(headers);\n}\nexports.ensureHeaders = ensureHeaders;\n//# sourceMappingURL=headers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/origin-cache.js":
/*!********************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/origin-cache.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nfunction makeKey(protocol, origin) {\n    return protocol + \":\" + origin;\n}\nclass OriginCache {\n    constructor() {\n        this.sessionMap = new Map();\n        this.staticMap = new Map();\n    }\n    get(protocol, origin) {\n        const key = makeKey(protocol, origin);\n        const stateByStatic = this.staticMap.get(key);\n        if (stateByStatic)\n            return {\n                protocol: stateByStatic.protocol,\n                session: stateByStatic.session,\n                firstOrigin: stateByStatic.firstOrigin,\n            };\n        const stateByDynamic = [...this.sessionMap.values()].find(state => state.protocol === protocol &&\n            state.match &&\n            state.match.dynamic &&\n            state.match.dynamic(origin));\n        if (stateByDynamic) {\n            // An origin matching a dynamic (wildcard) alt-name was found.\n            // Cache this to find it statically in the future.\n            stateByDynamic.resolved.push(origin);\n            this.staticMap.set(key, stateByDynamic);\n            return {\n                protocol: stateByDynamic.protocol,\n                session: stateByDynamic.session,\n                firstOrigin: stateByDynamic.firstOrigin,\n            };\n        }\n    }\n    set(origin, protocol, session, altNameMatch, cleanup) {\n        const state = {\n            protocol,\n            firstOrigin: origin,\n            session,\n            match: altNameMatch,\n            resolved: [],\n            cleanup,\n        };\n        this.sessionMap.set(session, state);\n        if (altNameMatch)\n            altNameMatch.names.forEach(origin => {\n                this.staticMap.set(makeKey(protocol, origin), state);\n            });\n        this.staticMap.set(makeKey(protocol, origin), state);\n    }\n    // Returns true if a session was deleted, false otherwise\n    delete(session) {\n        var _a, _b;\n        const state = this.sessionMap.get(session);\n        if (!state)\n            return false;\n        [\n            state.firstOrigin,\n            ...state.resolved,\n            ...((_b = (_a = state.match) === null || _a === void 0 ? void 0 : _a.names) !== null && _b !== void 0 ? _b : []),\n        ]\n            .forEach(origin => {\n            this.staticMap.delete(makeKey(state.protocol, origin));\n        });\n        this.sessionMap.delete(session);\n        return true;\n    }\n    disconnectAll() {\n        [...this.sessionMap].forEach(([_, session]) => {\n            var _a;\n            (_a = session.cleanup) === null || _a === void 0 ? void 0 : _a.call(session);\n        });\n        this.sessionMap.clear();\n        this.staticMap.clear();\n    }\n    disconnect(origin) {\n        [\n            this.get('https1', origin),\n            this.get('https2', origin),\n            this.get('http1', origin),\n            this.get('http2', origin),\n        ]\n            .filter((t) => !!t)\n            .forEach(({ session }) => {\n            var _a, _b;\n            (_b = (_a = this.sessionMap.get(session)) === null || _a === void 0 ? void 0 : _a.cleanup) === null || _b === void 0 ? void 0 : _b.call(_a);\n            this.delete(session);\n        });\n    }\n}\nexports[\"default\"] = OriginCache;\n//# sourceMappingURL=origin-cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvb3JpZ2luLWNhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFNBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvb3JpZ2luLWNhY2hlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gbWFrZUtleShwcm90b2NvbCwgb3JpZ2luKSB7XG4gICAgcmV0dXJuIHByb3RvY29sICsgXCI6XCIgKyBvcmlnaW47XG59XG5jbGFzcyBPcmlnaW5DYWNoZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbk1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5zdGF0aWNNYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGdldChwcm90b2NvbCwgb3JpZ2luKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IG1ha2VLZXkocHJvdG9jb2wsIG9yaWdpbik7XG4gICAgICAgIGNvbnN0IHN0YXRlQnlTdGF0aWMgPSB0aGlzLnN0YXRpY01hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKHN0YXRlQnlTdGF0aWMpXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHByb3RvY29sOiBzdGF0ZUJ5U3RhdGljLnByb3RvY29sLFxuICAgICAgICAgICAgICAgIHNlc3Npb246IHN0YXRlQnlTdGF0aWMuc2Vzc2lvbixcbiAgICAgICAgICAgICAgICBmaXJzdE9yaWdpbjogc3RhdGVCeVN0YXRpYy5maXJzdE9yaWdpbixcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN0YXRlQnlEeW5hbWljID0gWy4uLnRoaXMuc2Vzc2lvbk1hcC52YWx1ZXMoKV0uZmluZChzdGF0ZSA9PiBzdGF0ZS5wcm90b2NvbCA9PT0gcHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHN0YXRlLm1hdGNoICYmXG4gICAgICAgICAgICBzdGF0ZS5tYXRjaC5keW5hbWljICYmXG4gICAgICAgICAgICBzdGF0ZS5tYXRjaC5keW5hbWljKG9yaWdpbikpO1xuICAgICAgICBpZiAoc3RhdGVCeUR5bmFtaWMpIHtcbiAgICAgICAgICAgIC8vIEFuIG9yaWdpbiBtYXRjaGluZyBhIGR5bmFtaWMgKHdpbGRjYXJkKSBhbHQtbmFtZSB3YXMgZm91bmQuXG4gICAgICAgICAgICAvLyBDYWNoZSB0aGlzIHRvIGZpbmQgaXQgc3RhdGljYWxseSBpbiB0aGUgZnV0dXJlLlxuICAgICAgICAgICAgc3RhdGVCeUR5bmFtaWMucmVzb2x2ZWQucHVzaChvcmlnaW4pO1xuICAgICAgICAgICAgdGhpcy5zdGF0aWNNYXAuc2V0KGtleSwgc3RhdGVCeUR5bmFtaWMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwcm90b2NvbDogc3RhdGVCeUR5bmFtaWMucHJvdG9jb2wsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbjogc3RhdGVCeUR5bmFtaWMuc2Vzc2lvbixcbiAgICAgICAgICAgICAgICBmaXJzdE9yaWdpbjogc3RhdGVCeUR5bmFtaWMuZmlyc3RPcmlnaW4sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldChvcmlnaW4sIHByb3RvY29sLCBzZXNzaW9uLCBhbHROYW1lTWF0Y2gsIGNsZWFudXApIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgICAgIGZpcnN0T3JpZ2luOiBvcmlnaW4sXG4gICAgICAgICAgICBzZXNzaW9uLFxuICAgICAgICAgICAgbWF0Y2g6IGFsdE5hbWVNYXRjaCxcbiAgICAgICAgICAgIHJlc29sdmVkOiBbXSxcbiAgICAgICAgICAgIGNsZWFudXAsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2Vzc2lvbk1hcC5zZXQoc2Vzc2lvbiwgc3RhdGUpO1xuICAgICAgICBpZiAoYWx0TmFtZU1hdGNoKVxuICAgICAgICAgICAgYWx0TmFtZU1hdGNoLm5hbWVzLmZvckVhY2gob3JpZ2luID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRpY01hcC5zZXQobWFrZUtleShwcm90b2NvbCwgb3JpZ2luKSwgc3RhdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RhdGljTWFwLnNldChtYWtlS2V5KHByb3RvY29sLCBvcmlnaW4pLCBzdGF0ZSk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdHJ1ZSBpZiBhIHNlc3Npb24gd2FzIGRlbGV0ZWQsIGZhbHNlIG90aGVyd2lzZVxuICAgIGRlbGV0ZShzZXNzaW9uKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zZXNzaW9uTWFwLmdldChzZXNzaW9uKTtcbiAgICAgICAgaWYgKCFzdGF0ZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgW1xuICAgICAgICAgICAgc3RhdGUuZmlyc3RPcmlnaW4sXG4gICAgICAgICAgICAuLi5zdGF0ZS5yZXNvbHZlZCxcbiAgICAgICAgICAgIC4uLigoX2IgPSAoX2EgPSBzdGF0ZS5tYXRjaCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5hbWVzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXSksXG4gICAgICAgIF1cbiAgICAgICAgICAgIC5mb3JFYWNoKG9yaWdpbiA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0YXRpY01hcC5kZWxldGUobWFrZUtleShzdGF0ZS5wcm90b2NvbCwgb3JpZ2luKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlc3Npb25NYXAuZGVsZXRlKHNlc3Npb24pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZGlzY29ubmVjdEFsbCgpIHtcbiAgICAgICAgWy4uLnRoaXMuc2Vzc2lvbk1hcF0uZm9yRWFjaCgoW18sIHNlc3Npb25dKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAoX2EgPSBzZXNzaW9uLmNsZWFudXApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHNlc3Npb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXNzaW9uTWFwLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuc3RhdGljTWFwLmNsZWFyKCk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3Qob3JpZ2luKSB7XG4gICAgICAgIFtcbiAgICAgICAgICAgIHRoaXMuZ2V0KCdodHRwczEnLCBvcmlnaW4pLFxuICAgICAgICAgICAgdGhpcy5nZXQoJ2h0dHBzMicsIG9yaWdpbiksXG4gICAgICAgICAgICB0aGlzLmdldCgnaHR0cDEnLCBvcmlnaW4pLFxuICAgICAgICAgICAgdGhpcy5nZXQoJ2h0dHAyJywgb3JpZ2luKSxcbiAgICAgICAgXVxuICAgICAgICAgICAgLmZpbHRlcigodCkgPT4gISF0KVxuICAgICAgICAgICAgLmZvckVhY2goKHsgc2Vzc2lvbiB9KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5zZXNzaW9uTWFwLmdldChzZXNzaW9uKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsZWFudXApID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlKHNlc3Npb24pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBPcmlnaW5DYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9yaWdpbi1jYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/origin-cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/request.js":
/*!***************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/request.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Request = void 0;\nconst body_1 = __webpack_require__(/*! ./body */ \"(rsc)/./node_modules/fetch-h2/dist/lib/body.js\");\nconst headers_1 = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/fetch-h2/dist/lib/headers.js\");\nconst defaultInit = {\n    allowForbiddenHeaders: false,\n    cache: \"default\",\n    credentials: \"omit\",\n    method: \"GET\",\n    mode: \"same-origin\",\n    redirect: \"manual\",\n    referrer: \"client\",\n};\nclass Request extends body_1.Body {\n    constructor(input, init) {\n        super();\n        const { url: overwriteUrl } = init || {};\n        // TODO: Consider throwing a TypeError if the URL has credentials\n        this._url =\n            input instanceof Request\n                ? (overwriteUrl || input._url)\n                : (overwriteUrl || input);\n        if (input instanceof Request) {\n            if (input.hasBody())\n                // Move body to this request\n                this.setBody(input);\n            const newInit = Object.assign({}, input, init);\n            init = newInit;\n            // TODO: Follow MDN:\n            //       If this object exists on another origin to the\n            //       constructor call, the Request.referrer is stripped out.\n            //       If this object has a Request.mode of navigate, the mode\n            //       value is converted to same-origin.\n        }\n        this._init = Object.assign({}, defaultInit, init);\n        const allowForbiddenHeaders = this._init.allowForbiddenHeaders;\n        const headers = new headers_1.GuardedHeaders(allowForbiddenHeaders\n            ? \"none\"\n            : this._init.mode === \"no-cors\"\n                ? \"request-no-cors\"\n                : \"request\", this._init.headers);\n        if (this._init.body && this._init.json)\n            throw new Error(\"Cannot specify both 'body' and 'json'\");\n        if (!this.hasBody() && this._init.body) {\n            if (headers.has(\"content-type\"))\n                this.setBody(this._init.body, headers.get(\"content-type\"));\n            else\n                this.setBody(this._init.body);\n        }\n        else if (!this.hasBody() && this._init.json) {\n            this.setBody(new body_1.JsonBody(this._init.json));\n        }\n        Object.defineProperties(this, {\n            allowForbiddenHeaders: {\n                enumerable: true,\n                value: allowForbiddenHeaders,\n            },\n            cache: {\n                enumerable: true,\n                value: this._init.cache,\n            },\n            credentials: {\n                enumerable: true,\n                value: this._init.credentials,\n            },\n            headers: {\n                enumerable: true,\n                value: headers,\n            },\n            integrity: {\n                enumerable: true,\n                value: this._init.integrity,\n            },\n            method: {\n                enumerable: true,\n                value: this._init.method,\n            },\n            mode: {\n                enumerable: true,\n                value: this._init.mode,\n            },\n            redirect: {\n                enumerable: true,\n                value: this._init.redirect,\n            },\n            referrer: {\n                enumerable: true,\n                value: this._init.referrer,\n            },\n            referrerPolicy: {\n                enumerable: true,\n                value: this._init.referrerPolicy,\n            },\n            url: {\n                enumerable: true,\n                value: this._url,\n            },\n        });\n    }\n    clone(newUrl) {\n        return new Request(this, { url: newUrl });\n    }\n}\nexports.Request = Request;\n//# sourceMappingURL=request.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvcmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2YsZUFBZSxtQkFBTyxDQUFDLDhEQUFRO0FBQy9CLGtCQUFrQixtQkFBTyxDQUFDLG9FQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSxtQ0FBbUMsYUFBYTtBQUNoRDtBQUNBO0FBQ0EsZUFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvcmVxdWVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IGJvZHlfMSA9IHJlcXVpcmUoXCIuL2JvZHlcIik7XG5jb25zdCBoZWFkZXJzXzEgPSByZXF1aXJlKFwiLi9oZWFkZXJzXCIpO1xuY29uc3QgZGVmYXVsdEluaXQgPSB7XG4gICAgYWxsb3dGb3JiaWRkZW5IZWFkZXJzOiBmYWxzZSxcbiAgICBjYWNoZTogXCJkZWZhdWx0XCIsXG4gICAgY3JlZGVudGlhbHM6IFwib21pdFwiLFxuICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICBtb2RlOiBcInNhbWUtb3JpZ2luXCIsXG4gICAgcmVkaXJlY3Q6IFwibWFudWFsXCIsXG4gICAgcmVmZXJyZXI6IFwiY2xpZW50XCIsXG59O1xuY2xhc3MgUmVxdWVzdCBleHRlbmRzIGJvZHlfMS5Cb2R5IHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCwgaW5pdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zdCB7IHVybDogb3ZlcndyaXRlVXJsIH0gPSBpbml0IHx8IHt9O1xuICAgICAgICAvLyBUT0RPOiBDb25zaWRlciB0aHJvd2luZyBhIFR5cGVFcnJvciBpZiB0aGUgVVJMIGhhcyBjcmVkZW50aWFsc1xuICAgICAgICB0aGlzLl91cmwgPVxuICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0XG4gICAgICAgICAgICAgICAgPyAob3ZlcndyaXRlVXJsIHx8IGlucHV0Ll91cmwpXG4gICAgICAgICAgICAgICAgOiAob3ZlcndyaXRlVXJsIHx8IGlucHV0KTtcbiAgICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgICAgICAgaWYgKGlucHV0Lmhhc0JvZHkoKSlcbiAgICAgICAgICAgICAgICAvLyBNb3ZlIGJvZHkgdG8gdGhpcyByZXF1ZXN0XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRCb2R5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0luaXQgPSBPYmplY3QuYXNzaWduKHt9LCBpbnB1dCwgaW5pdCk7XG4gICAgICAgICAgICBpbml0ID0gbmV3SW5pdDtcbiAgICAgICAgICAgIC8vIFRPRE86IEZvbGxvdyBNRE46XG4gICAgICAgICAgICAvLyAgICAgICBJZiB0aGlzIG9iamVjdCBleGlzdHMgb24gYW5vdGhlciBvcmlnaW4gdG8gdGhlXG4gICAgICAgICAgICAvLyAgICAgICBjb25zdHJ1Y3RvciBjYWxsLCB0aGUgUmVxdWVzdC5yZWZlcnJlciBpcyBzdHJpcHBlZCBvdXQuXG4gICAgICAgICAgICAvLyAgICAgICBJZiB0aGlzIG9iamVjdCBoYXMgYSBSZXF1ZXN0Lm1vZGUgb2YgbmF2aWdhdGUsIHRoZSBtb2RlXG4gICAgICAgICAgICAvLyAgICAgICB2YWx1ZSBpcyBjb252ZXJ0ZWQgdG8gc2FtZS1vcmlnaW4uXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5pdCA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRJbml0LCBpbml0KTtcbiAgICAgICAgY29uc3QgYWxsb3dGb3JiaWRkZW5IZWFkZXJzID0gdGhpcy5faW5pdC5hbGxvd0ZvcmJpZGRlbkhlYWRlcnM7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgaGVhZGVyc18xLkd1YXJkZWRIZWFkZXJzKGFsbG93Rm9yYmlkZGVuSGVhZGVyc1xuICAgICAgICAgICAgPyBcIm5vbmVcIlxuICAgICAgICAgICAgOiB0aGlzLl9pbml0Lm1vZGUgPT09IFwibm8tY29yc1wiXG4gICAgICAgICAgICAgICAgPyBcInJlcXVlc3Qtbm8tY29yc1wiXG4gICAgICAgICAgICAgICAgOiBcInJlcXVlc3RcIiwgdGhpcy5faW5pdC5oZWFkZXJzKTtcbiAgICAgICAgaWYgKHRoaXMuX2luaXQuYm9keSAmJiB0aGlzLl9pbml0Lmpzb24pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3BlY2lmeSBib3RoICdib2R5JyBhbmQgJ2pzb24nXCIpO1xuICAgICAgICBpZiAoIXRoaXMuaGFzQm9keSgpICYmIHRoaXMuX2luaXQuYm9keSkge1xuICAgICAgICAgICAgaWYgKGhlYWRlcnMuaGFzKFwiY29udGVudC10eXBlXCIpKVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Qm9keSh0aGlzLl9pbml0LmJvZHksIGhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLnNldEJvZHkodGhpcy5faW5pdC5ib2R5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5oYXNCb2R5KCkgJiYgdGhpcy5faW5pdC5qc29uKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJvZHkobmV3IGJvZHlfMS5Kc29uQm9keSh0aGlzLl9pbml0Lmpzb24pKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAgICAgICBhbGxvd0ZvcmJpZGRlbkhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBhbGxvd0ZvcmJpZGRlbkhlYWRlcnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FjaGU6IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9pbml0LmNhY2hlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5faW5pdC5jcmVkZW50aWFscyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogaGVhZGVycyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnRlZ3JpdHk6IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9pbml0LmludGVncml0eSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXRob2Q6IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9pbml0Lm1ldGhvZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtb2RlOiB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5faW5pdC5tb2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZGlyZWN0OiB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5faW5pdC5yZWRpcmVjdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWZlcnJlcjoge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuX2luaXQucmVmZXJyZXIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVmZXJyZXJQb2xpY3k6IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9pbml0LnJlZmVycmVyUG9saWN5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVybDoge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuX3VybCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjbG9uZShuZXdVcmwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHsgdXJsOiBuZXdVcmwgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0ID0gUmVxdWVzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3QuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/response.js":
/*!****************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/response.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamResponse = exports.Response = void 0;\nconst http2_1 = __webpack_require__(/*! http2 */ \"http2\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst zlib_1 = __webpack_require__(/*! zlib */ \"zlib\");\nconst { HTTP2_HEADER_LOCATION, HTTP2_HEADER_STATUS, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_CONTENT_ENCODING, HTTP2_HEADER_CONTENT_LENGTH, } = http2_1.constants;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fetch-h2/dist/lib/utils.js\");\nconst headers_1 = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/fetch-h2/dist/lib/headers.js\");\nconst body_1 = __webpack_require__(/*! ./body */ \"(rsc)/./node_modules/fetch-h2/dist/lib/body.js\");\nclass Response extends body_1.Body {\n    constructor(body = null, init = {}, extra) {\n        super();\n        const headers = (0, headers_1.ensureHeaders)(init.allowForbiddenHeaders\n            ? new headers_1.GuardedHeaders(\"none\", init.headers)\n            : init.headers);\n        const _extra = (extra || {});\n        const type = _extra.type || \"basic\";\n        const redirected = !!_extra.redirected || false;\n        const url = _extra.url || \"\";\n        const integrity = _extra.integrity || null;\n        this.setSignal(_extra.signal);\n        if (body) {\n            const contentType = headers.get(HTTP2_HEADER_CONTENT_TYPE);\n            const contentLength = headers.get(HTTP2_HEADER_CONTENT_LENGTH);\n            const contentEncoding = headers.get(HTTP2_HEADER_CONTENT_ENCODING);\n            const length = (contentLength == null || contentEncoding != null)\n                ? null\n                : parseInt(contentLength, 10);\n            if (contentType)\n                this.setBody(body, contentType, integrity, length);\n            else\n                this.setBody(body, null, integrity, length);\n        }\n        Object.defineProperties(this, {\n            headers: {\n                enumerable: true,\n                value: headers,\n            },\n            httpVersion: {\n                enumerable: true,\n                value: _extra.httpVersion,\n            },\n            ok: {\n                enumerable: true,\n                get: () => this.status >= 200 && this.status < 300,\n            },\n            redirected: {\n                enumerable: true,\n                value: redirected,\n            },\n            status: {\n                enumerable: true,\n                value: init.status || 200,\n            },\n            statusText: {\n                enumerable: true,\n                value: init.statusText || \"\",\n            },\n            type: {\n                enumerable: true,\n                value: type,\n            },\n            url: {\n                enumerable: true,\n                value: url,\n            },\n            useFinalURL: {\n                enumerable: true,\n                value: undefined,\n            },\n        });\n    }\n    // Returns a new Response object associated with a network error.\n    static error() {\n        const headers = new headers_1.GuardedHeaders(\"immutable\");\n        const status = 521;\n        const statusText = \"Web Server Is Down\";\n        return new Response(null, { headers, status, statusText }, { type: \"error\" });\n    }\n    // Creates a new response with a different URL.\n    static redirect(url, status) {\n        status = status || 302;\n        const headers = {\n            [HTTP2_HEADER_LOCATION]: url,\n        };\n        return new Response(null, { headers, status });\n    }\n    // Creates a clone of a Response object.\n    clone() {\n        const { headers, status, statusText } = this;\n        return new Response(this, { headers, status, statusText });\n    }\n}\nexports.Response = Response;\nfunction makeHeadersFromH2Headers(headers, allowForbiddenHeaders) {\n    const out = new headers_1.GuardedHeaders(allowForbiddenHeaders ? \"none\" : \"response\");\n    for (const key of Object.keys(headers)) {\n        if (key.startsWith(\":\"))\n            // We ignore pseudo-headers\n            continue;\n        const value = headers[key];\n        if (Array.isArray(value))\n            value.forEach(val => out.append(key, val));\n        else if (value != null)\n            out.set(key, value);\n    }\n    return out;\n}\nfunction makeInitHttp1(inHeaders, allowForbiddenHeaders) {\n    // Headers in HTTP/2 are compatible with HTTP/1 (colon illegal in HTTP/1)\n    const headers = makeHeadersFromH2Headers(inHeaders, allowForbiddenHeaders);\n    return { headers };\n}\nfunction makeInitHttp2(inHeaders, allowForbiddenHeaders) {\n    const status = parseInt(\"\" + inHeaders[HTTP2_HEADER_STATUS], 10);\n    const statusText = \"\"; // Not supported in H2\n    const headers = makeHeadersFromH2Headers(inHeaders, allowForbiddenHeaders);\n    return { status, statusText, headers };\n}\nfunction makeExtra(httpVersion, url, redirected, signal, integrity) {\n    const type = \"basic\"; // TODO: Implement CORS\n    return { httpVersion, redirected, integrity, signal, type, url };\n}\nfunction handleEncoding(contentDecoders, stream, headers) {\n    const contentEncoding = headers[HTTP2_HEADER_CONTENT_ENCODING];\n    if (!contentEncoding)\n        return stream;\n    const handleStreamResult = (_err) => {\n        // TODO: Add error handling\n    };\n    const zlibOpts = {\n        flush: zlib_1.constants.Z_SYNC_FLUSH,\n        finishFlush: zlib_1.constants.Z_SYNC_FLUSH,\n    };\n    const decoders = {\n        deflate: (stream) => (0, stream_1.pipeline)(stream, (0, zlib_1.createInflate)(), handleStreamResult),\n        gzip: (stream) => (0, stream_1.pipeline)(stream, (0, zlib_1.createGunzip)(zlibOpts), handleStreamResult),\n    };\n    if ((0, utils_1.hasBuiltinBrotli)()) {\n        decoders.br = (stream) => (0, stream_1.pipeline)(stream, (0, zlib_1.createBrotliDecompress)(), handleStreamResult);\n    }\n    contentDecoders.forEach(decoder => {\n        decoders[decoder.name] = decoder.decode;\n    });\n    const decoder = decoders[contentEncoding];\n    if (!decoder)\n        // We haven't asked for this encoding, and we can't handle it.\n        // Pushing raw encoded stream through...\n        return stream;\n    return decoder(stream);\n}\nclass StreamResponse extends Response {\n    constructor(contentDecoders, url, stream, headers, redirected, init, signal, httpVersion, allowForbiddenHeaders, integrity) {\n        super(handleEncoding(contentDecoders, stream, headers), {\n            ...init,\n            allowForbiddenHeaders,\n            ...(httpVersion === 1\n                ? makeInitHttp1(headers, allowForbiddenHeaders)\n                : makeInitHttp2(headers, allowForbiddenHeaders)),\n        }, makeExtra(httpVersion, url, redirected, signal, integrity));\n    }\n}\nexports.StreamResponse = StreamResponse;\n//# sourceMappingURL=response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/san.js":
/*!***********************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/san.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseOrigin = exports.makeRegex = void 0;\nfunction getNames(cert) {\n    var _a, _b;\n    const CN = (_a = cert.subject) === null || _a === void 0 ? void 0 : _a.CN;\n    const sans = ((_b = cert.subjectaltname) !== null && _b !== void 0 ? _b : '')\n        .split(',')\n        .map(name => name.trim())\n        .filter(name => name.startsWith('DNS:'))\n        .map(name => name.substr(4));\n    if (cert.subjectaltname)\n        // Ignore CN if SAN:s are present; https://stackoverflow.com/a/29600674\n        return [...new Set(sans)];\n    else\n        return [CN];\n}\nfunction makeRegex(name) {\n    return \"^\" + name\n        .split('*')\n        .map(part => part.replace(/[^a-zA-Z0-9]/g, val => `\\\\${val}`))\n        .join('[^.]+') + \"$\";\n}\nexports.makeRegex = makeRegex;\nfunction makeMatcher(regexes) {\n    return (name) => regexes.some(regex => name.match(regex));\n}\nfunction parseOrigin(cert) {\n    const names = [];\n    const regexes = [];\n    if (cert) {\n        getNames(cert).forEach(name => {\n            if (name.match(/.*\\*.*\\*.*/))\n                throw new Error(`Invalid CN/subjectAltNames: ${name}`);\n            if (name.includes(\"*\"))\n                regexes.push(new RegExp(makeRegex(name)));\n            else\n                names.push(name);\n        });\n    }\n    const ret = {\n        names,\n        ...(!regexes.length ? {} : { dynamic: makeMatcher(regexes) }),\n    };\n    return ret;\n}\nexports.parseOrigin = parseOrigin;\n//# sourceMappingURL=san.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvc2FuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLGlCQUFpQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsSUFBSTtBQUNuRTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxLQUFLO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxJQUFJLCtCQUErQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9mZXRjaC1oMi9kaXN0L2xpYi9zYW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlT3JpZ2luID0gZXhwb3J0cy5tYWtlUmVnZXggPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXROYW1lcyhjZXJ0KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBDTiA9IChfYSA9IGNlcnQuc3ViamVjdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLkNOO1xuICAgIGNvbnN0IHNhbnMgPSAoKF9iID0gY2VydC5zdWJqZWN0YWx0bmFtZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJycpXG4gICAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAgIC5tYXAobmFtZSA9PiBuYW1lLnRyaW0oKSlcbiAgICAgICAgLmZpbHRlcihuYW1lID0+IG5hbWUuc3RhcnRzV2l0aCgnRE5TOicpKVxuICAgICAgICAubWFwKG5hbWUgPT4gbmFtZS5zdWJzdHIoNCkpO1xuICAgIGlmIChjZXJ0LnN1YmplY3RhbHRuYW1lKVxuICAgICAgICAvLyBJZ25vcmUgQ04gaWYgU0FOOnMgYXJlIHByZXNlbnQ7IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yOTYwMDY3NFxuICAgICAgICByZXR1cm4gWy4uLm5ldyBTZXQoc2FucyldO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIFtDTl07XG59XG5mdW5jdGlvbiBtYWtlUmVnZXgobmFtZSkge1xuICAgIHJldHVybiBcIl5cIiArIG5hbWVcbiAgICAgICAgLnNwbGl0KCcqJylcbiAgICAgICAgLm1hcChwYXJ0ID0+IHBhcnQucmVwbGFjZSgvW15hLXpBLVowLTldL2csIHZhbCA9PiBgXFxcXCR7dmFsfWApKVxuICAgICAgICAuam9pbignW14uXSsnKSArIFwiJFwiO1xufVxuZXhwb3J0cy5tYWtlUmVnZXggPSBtYWtlUmVnZXg7XG5mdW5jdGlvbiBtYWtlTWF0Y2hlcihyZWdleGVzKSB7XG4gICAgcmV0dXJuIChuYW1lKSA9PiByZWdleGVzLnNvbWUocmVnZXggPT4gbmFtZS5tYXRjaChyZWdleCkpO1xufVxuZnVuY3Rpb24gcGFyc2VPcmlnaW4oY2VydCkge1xuICAgIGNvbnN0IG5hbWVzID0gW107XG4gICAgY29uc3QgcmVnZXhlcyA9IFtdO1xuICAgIGlmIChjZXJ0KSB7XG4gICAgICAgIGdldE5hbWVzKGNlcnQpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgICAgICBpZiAobmFtZS5tYXRjaCgvLipcXCouKlxcKi4qLykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIENOL3N1YmplY3RBbHROYW1lczogJHtuYW1lfWApO1xuICAgICAgICAgICAgaWYgKG5hbWUuaW5jbHVkZXMoXCIqXCIpKVxuICAgICAgICAgICAgICAgIHJlZ2V4ZXMucHVzaChuZXcgUmVnRXhwKG1ha2VSZWdleChuYW1lKSkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG5hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSB7XG4gICAgICAgIG5hbWVzLFxuICAgICAgICAuLi4oIXJlZ2V4ZXMubGVuZ3RoID8ge30gOiB7IGR5bmFtaWM6IG1ha2VNYXRjaGVyKHJlZ2V4ZXMpIH0pLFxuICAgIH07XG4gICAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydHMucGFyc2VPcmlnaW4gPSBwYXJzZU9yaWdpbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/san.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/utils-http2.js":
/*!*******************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/utils-http2.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setDestroyed = exports.isDestroyed = exports.setGotGoaway = exports.hasGotGoaway = void 0;\nfunction hasGotGoaway(session) {\n    return !!session.__fetch_h2_goaway;\n}\nexports.hasGotGoaway = hasGotGoaway;\nfunction setGotGoaway(session) {\n    session.__fetch_h2_goaway = true;\n}\nexports.setGotGoaway = setGotGoaway;\nfunction isDestroyed(session) {\n    const monkeySession = session;\n    return monkeySession.destroyed || monkeySession.__fetch_h2_destroyed;\n}\nexports.isDestroyed = isDestroyed;\nfunction setDestroyed(session) {\n    session.__fetch_h2_destroyed = true;\n}\nexports.setDestroyed = setDestroyed;\n//# sourceMappingURL=utils-http2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvdXRpbHMtaHR0cDIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsbUJBQW1CLEdBQUcsb0JBQW9CLEdBQUcsb0JBQW9CO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvVXNlcnMvbGFldGl0aWF2YW5kZXJ2ZWtlbi9EZXNrdG9wL3NlZW4tYXBwcy9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvdXRpbHMtaHR0cDIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldERlc3Ryb3llZCA9IGV4cG9ydHMuaXNEZXN0cm95ZWQgPSBleHBvcnRzLnNldEdvdEdvYXdheSA9IGV4cG9ydHMuaGFzR290R29hd2F5ID0gdm9pZCAwO1xuZnVuY3Rpb24gaGFzR290R29hd2F5KHNlc3Npb24pIHtcbiAgICByZXR1cm4gISFzZXNzaW9uLl9fZmV0Y2hfaDJfZ29hd2F5O1xufVxuZXhwb3J0cy5oYXNHb3RHb2F3YXkgPSBoYXNHb3RHb2F3YXk7XG5mdW5jdGlvbiBzZXRHb3RHb2F3YXkoc2Vzc2lvbikge1xuICAgIHNlc3Npb24uX19mZXRjaF9oMl9nb2F3YXkgPSB0cnVlO1xufVxuZXhwb3J0cy5zZXRHb3RHb2F3YXkgPSBzZXRHb3RHb2F3YXk7XG5mdW5jdGlvbiBpc0Rlc3Ryb3llZChzZXNzaW9uKSB7XG4gICAgY29uc3QgbW9ua2V5U2Vzc2lvbiA9IHNlc3Npb247XG4gICAgcmV0dXJuIG1vbmtleVNlc3Npb24uZGVzdHJveWVkIHx8IG1vbmtleVNlc3Npb24uX19mZXRjaF9oMl9kZXN0cm95ZWQ7XG59XG5leHBvcnRzLmlzRGVzdHJveWVkID0gaXNEZXN0cm95ZWQ7XG5mdW5jdGlvbiBzZXREZXN0cm95ZWQoc2Vzc2lvbikge1xuICAgIHNlc3Npb24uX19mZXRjaF9oMl9kZXN0cm95ZWQgPSB0cnVlO1xufVxuZXhwb3J0cy5zZXREZXN0cm95ZWQgPSBzZXREZXN0cm95ZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy1odHRwMi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/utils-http2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-h2/dist/lib/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/fetch-h2/dist/lib/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasBuiltinBrotli = exports.uniq = exports.identity = exports.parseInput = exports.makeOkError = exports.isRedirectStatus = exports.parseLocation = exports.arrayify = exports.pipeline = void 0;\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst zlib_1 = __webpack_require__(/*! zlib */ \"zlib\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nexports.pipeline = (0, util_1.promisify)(stream.pipeline);\nfunction arrayify(value) {\n    if (value != null && Array.isArray(value))\n        return value;\n    return value == null\n        ? []\n        : Array.isArray(value)\n            ? [...value]\n            : [value];\n}\nexports.arrayify = arrayify;\nfunction parseLocation(location, origin) {\n    if (\"string\" !== typeof location)\n        return null;\n    const originUrl = new url_1.URL(origin);\n    const url = new url_1.URL(location, origin);\n    return {\n        url: url.href,\n        isRelative: originUrl.origin === url.origin,\n    };\n}\nexports.parseLocation = parseLocation;\nexports.isRedirectStatus = {\n    300: true,\n    301: true,\n    302: true,\n    303: true,\n    305: true,\n    307: true,\n    308: true,\n};\nfunction makeOkError(err) {\n    err.metaData = err.metaData || {};\n    err.metaData.ok = true;\n    return err;\n}\nexports.makeOkError = makeOkError;\nfunction parseInput(url) {\n    const explicitProtocol = (url.startsWith(\"http2://\") || url.startsWith(\"http1://\"))\n        ? url.substr(0, 5)\n        : null;\n    url = url.replace(/^http[12]:\\/\\//, \"http://\");\n    const { origin, hostname, port, protocol } = new url_1.URL(url);\n    return {\n        hostname,\n        origin,\n        port: port || (protocol === \"https:\" ? \"443\" : \"80\"),\n        protocol: explicitProtocol || protocol.replace(\":\", \"\"),\n        url,\n    };\n}\nexports.parseInput = parseInput;\nconst identity = (t) => t;\nexports.identity = identity;\nfunction uniq(arr, pred) {\n    if (!pred)\n        return Array.from(new Set(arr));\n    const known = new Set();\n    return arr.filter(value => {\n        const u = pred(value);\n        const first = !known.has(u);\n        known.add(u);\n        return first;\n    });\n}\nexports.uniq = uniq;\nfunction hasBuiltinBrotli() {\n    return typeof zlib_1.createBrotliCompress === \"function\";\n}\nexports.hasBuiltinBrotli = hasBuiltinBrotli;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtaDIvZGlzdC9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsWUFBWSxHQUFHLGdCQUFnQixHQUFHLGtCQUFrQixHQUFHLG1CQUFtQixHQUFHLHdCQUF3QixHQUFHLHFCQUFxQixHQUFHLGdCQUFnQixHQUFHLGdCQUFnQjtBQUM5TCxjQUFjLG1CQUFPLENBQUMsZ0JBQUs7QUFDM0IsZUFBZSxtQkFBTyxDQUFDLGtCQUFNO0FBQzdCLGVBQWUsbUJBQU8sQ0FBQyxrQkFBTTtBQUM3QixlQUFlLG1CQUFPLENBQUMsc0JBQVE7QUFDL0IsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQix3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhZXRpdGlhdmFuZGVydmVrZW4vRGVza3RvcC9zZWVuLWFwcHMvbm9kZV9tb2R1bGVzL2ZldGNoLWgyL2Rpc3QvbGliL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNCdWlsdGluQnJvdGxpID0gZXhwb3J0cy51bmlxID0gZXhwb3J0cy5pZGVudGl0eSA9IGV4cG9ydHMucGFyc2VJbnB1dCA9IGV4cG9ydHMubWFrZU9rRXJyb3IgPSBleHBvcnRzLmlzUmVkaXJlY3RTdGF0dXMgPSBleHBvcnRzLnBhcnNlTG9jYXRpb24gPSBleHBvcnRzLmFycmF5aWZ5ID0gZXhwb3J0cy5waXBlbGluZSA9IHZvaWQgMDtcbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IHpsaWJfMSA9IHJlcXVpcmUoXCJ6bGliXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcInV0aWxcIik7XG5jb25zdCBzdHJlYW0gPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuZXhwb3J0cy5waXBlbGluZSA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KShzdHJlYW0ucGlwZWxpbmUpO1xuZnVuY3Rpb24gYXJyYXlpZnkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsXG4gICAgICAgID8gW11cbiAgICAgICAgOiBBcnJheS5pc0FycmF5KHZhbHVlKVxuICAgICAgICAgICAgPyBbLi4udmFsdWVdXG4gICAgICAgICAgICA6IFt2YWx1ZV07XG59XG5leHBvcnRzLmFycmF5aWZ5ID0gYXJyYXlpZnk7XG5mdW5jdGlvbiBwYXJzZUxvY2F0aW9uKGxvY2F0aW9uLCBvcmlnaW4pIHtcbiAgICBpZiAoXCJzdHJpbmdcIiAhPT0gdHlwZW9mIGxvY2F0aW9uKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBvcmlnaW5VcmwgPSBuZXcgdXJsXzEuVVJMKG9yaWdpbik7XG4gICAgY29uc3QgdXJsID0gbmV3IHVybF8xLlVSTChsb2NhdGlvbiwgb3JpZ2luKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IHVybC5ocmVmLFxuICAgICAgICBpc1JlbGF0aXZlOiBvcmlnaW5Vcmwub3JpZ2luID09PSB1cmwub3JpZ2luLFxuICAgIH07XG59XG5leHBvcnRzLnBhcnNlTG9jYXRpb24gPSBwYXJzZUxvY2F0aW9uO1xuZXhwb3J0cy5pc1JlZGlyZWN0U3RhdHVzID0ge1xuICAgIDMwMDogdHJ1ZSxcbiAgICAzMDE6IHRydWUsXG4gICAgMzAyOiB0cnVlLFxuICAgIDMwMzogdHJ1ZSxcbiAgICAzMDU6IHRydWUsXG4gICAgMzA3OiB0cnVlLFxuICAgIDMwODogdHJ1ZSxcbn07XG5mdW5jdGlvbiBtYWtlT2tFcnJvcihlcnIpIHtcbiAgICBlcnIubWV0YURhdGEgPSBlcnIubWV0YURhdGEgfHwge307XG4gICAgZXJyLm1ldGFEYXRhLm9rID0gdHJ1ZTtcbiAgICByZXR1cm4gZXJyO1xufVxuZXhwb3J0cy5tYWtlT2tFcnJvciA9IG1ha2VPa0Vycm9yO1xuZnVuY3Rpb24gcGFyc2VJbnB1dCh1cmwpIHtcbiAgICBjb25zdCBleHBsaWNpdFByb3RvY29sID0gKHVybC5zdGFydHNXaXRoKFwiaHR0cDI6Ly9cIikgfHwgdXJsLnN0YXJ0c1dpdGgoXCJodHRwMTovL1wiKSlcbiAgICAgICAgPyB1cmwuc3Vic3RyKDAsIDUpXG4gICAgICAgIDogbnVsbDtcbiAgICB1cmwgPSB1cmwucmVwbGFjZSgvXmh0dHBbMTJdOlxcL1xcLy8sIFwiaHR0cDovL1wiKTtcbiAgICBjb25zdCB7IG9yaWdpbiwgaG9zdG5hbWUsIHBvcnQsIHByb3RvY29sIH0gPSBuZXcgdXJsXzEuVVJMKHVybCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgIG9yaWdpbixcbiAgICAgICAgcG9ydDogcG9ydCB8fCAocHJvdG9jb2wgPT09IFwiaHR0cHM6XCIgPyBcIjQ0M1wiIDogXCI4MFwiKSxcbiAgICAgICAgcHJvdG9jb2w6IGV4cGxpY2l0UHJvdG9jb2wgfHwgcHJvdG9jb2wucmVwbGFjZShcIjpcIiwgXCJcIiksXG4gICAgICAgIHVybCxcbiAgICB9O1xufVxuZXhwb3J0cy5wYXJzZUlucHV0ID0gcGFyc2VJbnB1dDtcbmNvbnN0IGlkZW50aXR5ID0gKHQpID0+IHQ7XG5leHBvcnRzLmlkZW50aXR5ID0gaWRlbnRpdHk7XG5mdW5jdGlvbiB1bmlxKGFyciwgcHJlZCkge1xuICAgIGlmICghcHJlZClcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChhcnIpKTtcbiAgICBjb25zdCBrbm93biA9IG5ldyBTZXQoKTtcbiAgICByZXR1cm4gYXJyLmZpbHRlcih2YWx1ZSA9PiB7XG4gICAgICAgIGNvbnN0IHUgPSBwcmVkKHZhbHVlKTtcbiAgICAgICAgY29uc3QgZmlyc3QgPSAha25vd24uaGFzKHUpO1xuICAgICAgICBrbm93bi5hZGQodSk7XG4gICAgICAgIHJldHVybiBmaXJzdDtcbiAgICB9KTtcbn1cbmV4cG9ydHMudW5pcSA9IHVuaXE7XG5mdW5jdGlvbiBoYXNCdWlsdGluQnJvdGxpKCkge1xuICAgIHJldHVybiB0eXBlb2YgemxpYl8xLmNyZWF0ZUJyb3RsaUNvbXByZXNzID09PSBcImZ1bmN0aW9uXCI7XG59XG5leHBvcnRzLmhhc0J1aWx0aW5Ccm90bGkgPSBoYXNCdWlsdGluQnJvdGxpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-h2/dist/lib/utils.js\n");

/***/ })

};
;