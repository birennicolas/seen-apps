"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/callguard";
exports.ids = ["vendor-chunks/callguard"];
exports.modules = {

/***/ "(rsc)/./node_modules/callguard/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/callguard/dist/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.asyncGuard = exports.syncGuard = void 0;\nfunction handle(handler, err, stacks) {\n    try {\n        const handledErr = stacks.length === 0 ? err : Object.create(err);\n        if (stacks.length > 0) {\n            handledErr.stack =\n                [...stacks, err.stack]\n                    .join(\"\\nFrom:\\n\")\n                    .replace(\"\\n\\n\", \"\\n\");\n        }\n        try {\n            handler(handledErr);\n        }\n        catch (err) {\n            console.error(\"[callguard 1/2]: guard handler threw error\", err);\n            console.error(\"[callguard 2/2]: while handling\", handledErr);\n        }\n    }\n    catch (err) {\n        console.error(\"[callguard] handle error (probably caused by non-Error throw)]\", err);\n    }\n}\nfunction syncGuard(handler, opts) {\n    const captureCallstacks = opts && !!opts.longStackTraces;\n    const defaultReturn = (opts && opts.defaultReturn != null)\n        ? opts.defaultReturn\n        : null;\n    const stacks = [];\n    return function (fn) {\n        if (captureCallstacks)\n            stacks.push((new Error(\"[callguard]\")).stack);\n        return function (...args) {\n            if (captureCallstacks)\n                stacks.push((new Error(\"[callguard]\")).stack);\n            try {\n                const ret = fn(...args);\n                if (opts && opts.catchAsync) {\n                    Promise.resolve(ret)\n                        .catch(err => handle(handler, err, stacks));\n                }\n                return ret;\n            }\n            catch (err) {\n                handle(handler, err, stacks);\n                return defaultReturn;\n            }\n        };\n    };\n}\nexports.syncGuard = syncGuard;\nfunction asyncGuard(handler, opts) {\n    const captureCallstacks = opts && !!opts.longStackTraces;\n    const defaultReturn = (opts && opts.defaultReturn != null)\n        ? opts.defaultReturn\n        : null;\n    const stacks = [];\n    return function (fn) {\n        if (captureCallstacks)\n            stacks.push((new Error(\"[callguard]\")).stack);\n        return function (...args) {\n            if (captureCallstacks)\n                stacks.push((new Error(\"[callguard]\")).stack);\n            try {\n                return Promise.resolve(fn(...args))\n                    .catch(err => {\n                    handle(handler, err, stacks);\n                    return defaultReturn;\n                });\n            }\n            catch (err) {\n                handle(handler, err, stacks);\n                return defaultReturn;\n            }\n        };\n    };\n}\nexports.asyncGuard = asyncGuard;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2FsbGd1YXJkL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLEdBQUcsaUJBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWV0aXRpYXZhbmRlcnZla2VuL0Rlc2t0b3Avc2Vlbi1hcHBzL25vZGVfbW9kdWxlcy9jYWxsZ3VhcmQvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzeW5jR3VhcmQgPSBleHBvcnRzLnN5bmNHdWFyZCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGhhbmRsZShoYW5kbGVyLCBlcnIsIHN0YWNrcykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZWRFcnIgPSBzdGFja3MubGVuZ3RoID09PSAwID8gZXJyIDogT2JqZWN0LmNyZWF0ZShlcnIpO1xuICAgICAgICBpZiAoc3RhY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGhhbmRsZWRFcnIuc3RhY2sgPVxuICAgICAgICAgICAgICAgIFsuLi5zdGFja3MsIGVyci5zdGFja11cbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCJcXG5Gcm9tOlxcblwiKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShcIlxcblxcblwiLCBcIlxcblwiKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaGFuZGxlcihoYW5kbGVkRXJyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW2NhbGxndWFyZCAxLzJdOiBndWFyZCBoYW5kbGVyIHRocmV3IGVycm9yXCIsIGVycik7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW2NhbGxndWFyZCAyLzJdOiB3aGlsZSBoYW5kbGluZ1wiLCBoYW5kbGVkRXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbY2FsbGd1YXJkXSBoYW5kbGUgZXJyb3IgKHByb2JhYmx5IGNhdXNlZCBieSBub24tRXJyb3IgdGhyb3cpXVwiLCBlcnIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN5bmNHdWFyZChoYW5kbGVyLCBvcHRzKSB7XG4gICAgY29uc3QgY2FwdHVyZUNhbGxzdGFja3MgPSBvcHRzICYmICEhb3B0cy5sb25nU3RhY2tUcmFjZXM7XG4gICAgY29uc3QgZGVmYXVsdFJldHVybiA9IChvcHRzICYmIG9wdHMuZGVmYXVsdFJldHVybiAhPSBudWxsKVxuICAgICAgICA/IG9wdHMuZGVmYXVsdFJldHVyblxuICAgICAgICA6IG51bGw7XG4gICAgY29uc3Qgc3RhY2tzID0gW107XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgICAgICBpZiAoY2FwdHVyZUNhbGxzdGFja3MpXG4gICAgICAgICAgICBzdGFja3MucHVzaCgobmV3IEVycm9yKFwiW2NhbGxndWFyZF1cIikpLnN0YWNrKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICBpZiAoY2FwdHVyZUNhbGxzdGFja3MpXG4gICAgICAgICAgICAgICAgc3RhY2tzLnB1c2goKG5ldyBFcnJvcihcIltjYWxsZ3VhcmRdXCIpKS5zdGFjayk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9IGZuKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzICYmIG9wdHMuY2F0Y2hBc3luYykge1xuICAgICAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUocmV0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBoYW5kbGUoaGFuZGxlciwgZXJyLCBzdGFja3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGUoaGFuZGxlciwgZXJyLCBzdGFja3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0UmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG59XG5leHBvcnRzLnN5bmNHdWFyZCA9IHN5bmNHdWFyZDtcbmZ1bmN0aW9uIGFzeW5jR3VhcmQoaGFuZGxlciwgb3B0cykge1xuICAgIGNvbnN0IGNhcHR1cmVDYWxsc3RhY2tzID0gb3B0cyAmJiAhIW9wdHMubG9uZ1N0YWNrVHJhY2VzO1xuICAgIGNvbnN0IGRlZmF1bHRSZXR1cm4gPSAob3B0cyAmJiBvcHRzLmRlZmF1bHRSZXR1cm4gIT0gbnVsbClcbiAgICAgICAgPyBvcHRzLmRlZmF1bHRSZXR1cm5cbiAgICAgICAgOiBudWxsO1xuICAgIGNvbnN0IHN0YWNrcyA9IFtdO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgaWYgKGNhcHR1cmVDYWxsc3RhY2tzKVxuICAgICAgICAgICAgc3RhY2tzLnB1c2goKG5ldyBFcnJvcihcIltjYWxsZ3VhcmRdXCIpKS5zdGFjayk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgaWYgKGNhcHR1cmVDYWxsc3RhY2tzKVxuICAgICAgICAgICAgICAgIHN0YWNrcy5wdXNoKChuZXcgRXJyb3IoXCJbY2FsbGd1YXJkXVwiKSkuc3RhY2spO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZuKC4uLmFyZ3MpKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlKGhhbmRsZXIsIGVyciwgc3RhY2tzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRSZXR1cm47XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlKGhhbmRsZXIsIGVyciwgc3RhY2tzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmYXVsdFJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xufVxuZXhwb3J0cy5hc3luY0d1YXJkID0gYXN5bmNHdWFyZDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/callguard/dist/index.js\n");

/***/ })

};
;